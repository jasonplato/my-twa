var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
(function(global, factory) {
  typeof exports === "object" && typeof module !== "undefined" ? factory(exports, require("@tonconnect/sdk"), require("deepmerge"), require("ua-parser-js"), require("classnames")) : typeof define === "function" && define.amd ? define(["exports", "@tonconnect/sdk", "deepmerge", "ua-parser-js", "classnames"], factory) : (global = typeof globalThis !== "undefined" ? globalThis : global || self, factory(global.TON_CONNECT_UI = {}, global.TonConnectSDK, global.deepmerge, global.UAParser, global.classNames));
})(this, function(exports2, sdk, deepmerge, UAParser, cn) {
  "use strict";
  const _interopDefaultLegacy = (e2) => e2 && typeof e2 === "object" && "default" in e2 ? e2 : { default: e2 };
  const deepmerge__default = /* @__PURE__ */ _interopDefaultLegacy(deepmerge);
  const UAParser__default = /* @__PURE__ */ _interopDefaultLegacy(UAParser);
  const cn__default = /* @__PURE__ */ _interopDefaultLegacy(cn);
  const sharedConfig = {};
  function setHydrateContext(context) {
    sharedConfig.context = context;
  }
  const equalFn = (a2, b) => a2 === b;
  const $PROXY = Symbol("solid-proxy");
  const $TRACK = Symbol("solid-track");
  const signalOptions = {
    equals: equalFn
  };
  let runEffects = runQueue;
  const STALE = 1;
  const PENDING = 2;
  const UNOWNED = {
    owned: null,
    cleanups: null,
    context: null,
    owner: null
  };
  const NO_INIT = {};
  var Owner = null;
  let Transition$1 = null;
  let Listener = null;
  let Updates = null;
  let Effects = null;
  let ExecCount = 0;
  function createRoot(fn, detachedOwner) {
    const listener = Listener, owner = Owner, unowned = fn.length === 0, root = unowned ? UNOWNED : {
      owned: null,
      cleanups: null,
      context: null,
      owner: detachedOwner === void 0 ? owner : detachedOwner
    }, updateFn = unowned ? fn : () => fn(() => untrack(() => cleanNode(root)));
    Owner = root;
    Listener = null;
    try {
      return runUpdates(updateFn, true);
    } finally {
      Listener = listener;
      Owner = owner;
    }
  }
  function createSignal(value, options) {
    options = options ? Object.assign({}, signalOptions, options) : signalOptions;
    const s2 = {
      value,
      observers: null,
      observerSlots: null,
      comparator: options.equals || void 0
    };
    const setter = (value2) => {
      if (typeof value2 === "function") {
        value2 = value2(s2.value);
      }
      return writeSignal(s2, value2);
    };
    return [readSignal.bind(s2), setter];
  }
  function createComputed(fn, value, options) {
    const c2 = createComputation(fn, value, true, STALE);
    updateComputation(c2);
  }
  function createRenderEffect(fn, value, options) {
    const c2 = createComputation(fn, value, false, STALE);
    updateComputation(c2);
  }
  function createEffect(fn, value, options) {
    runEffects = runUserEffects;
    const c2 = createComputation(fn, value, false, STALE);
    c2.user = true;
    Effects ? Effects.push(c2) : updateComputation(c2);
  }
  function createMemo(fn, value, options) {
    options = options ? Object.assign({}, signalOptions, options) : signalOptions;
    const c2 = createComputation(fn, value, true, 0);
    c2.observers = null;
    c2.observerSlots = null;
    c2.comparator = options.equals || void 0;
    updateComputation(c2);
    return readSignal.bind(c2);
  }
  function createResource(pSource, pFetcher, pOptions) {
    let source;
    let fetcher;
    let options;
    if (arguments.length === 2 && typeof pFetcher === "object" || arguments.length === 1) {
      source = true;
      fetcher = pSource;
      options = pFetcher || {};
    } else {
      source = pSource;
      fetcher = pFetcher;
      options = pOptions || {};
    }
    let pr = null, initP = NO_INIT, id = null, scheduled = false, resolved = "initialValue" in options, dynamic = typeof source === "function" && createMemo(source);
    const contexts = /* @__PURE__ */ new Set(), [value, setValue] = (options.storage || createSignal)(options.initialValue), [error, setError] = createSignal(void 0), [track, trigger] = createSignal(void 0, {
      equals: false
    }), [state, setState] = createSignal(resolved ? "ready" : "unresolved");
    if (sharedConfig.context) {
      id = `${sharedConfig.context.id}${sharedConfig.context.count++}`;
      let v;
      if (options.ssrLoadFrom === "initial")
        initP = options.initialValue;
      else if (sharedConfig.load && (v = sharedConfig.load(id)))
        initP = v[0];
    }
    function loadEnd(p2, v, error2, key) {
      if (pr === p2) {
        pr = null;
        resolved = true;
        if ((p2 === initP || v === initP) && options.onHydrated)
          queueMicrotask(() => options.onHydrated(key, {
            value: v
          }));
        initP = NO_INIT;
        completeLoad(v, error2);
      }
      return v;
    }
    function completeLoad(v, err) {
      runUpdates(() => {
        if (err === void 0)
          setValue(() => v);
        setState(err !== void 0 ? "errored" : "ready");
        setError(err);
        for (const c2 of contexts.keys())
          c2.decrement();
        contexts.clear();
      }, false);
    }
    function read() {
      const c2 = SuspenseContext, v = value(), err = error();
      if (err !== void 0 && !pr)
        throw err;
      if (Listener && !Listener.user && c2) {
        createComputed(() => {
          track();
          if (pr) {
            if (c2.resolved)
              ;
            else if (!contexts.has(c2)) {
              c2.increment();
              contexts.add(c2);
            }
          }
        });
      }
      return v;
    }
    function load(refetching = true) {
      if (refetching !== false && scheduled)
        return;
      scheduled = false;
      const lookup2 = dynamic ? dynamic() : source;
      if (lookup2 == null || lookup2 === false) {
        loadEnd(pr, untrack(value));
        return;
      }
      const p2 = initP !== NO_INIT ? initP : untrack(() => fetcher(lookup2, {
        value: value(),
        refetching
      }));
      if (typeof p2 !== "object" || !(p2 && "then" in p2)) {
        loadEnd(pr, p2, void 0, lookup2);
        return p2;
      }
      pr = p2;
      scheduled = true;
      queueMicrotask(() => scheduled = false);
      runUpdates(() => {
        setState(resolved ? "refreshing" : "pending");
        trigger();
      }, false);
      return p2.then((v) => loadEnd(p2, v, void 0, lookup2), (e2) => loadEnd(p2, void 0, castError(e2), lookup2));
    }
    Object.defineProperties(read, {
      state: {
        get: () => state()
      },
      error: {
        get: () => error()
      },
      loading: {
        get() {
          const s2 = state();
          return s2 === "pending" || s2 === "refreshing";
        }
      },
      latest: {
        get() {
          if (!resolved)
            return read();
          const err = error();
          if (err && !pr)
            throw err;
          return value();
        }
      }
    });
    if (dynamic)
      createComputed(() => load(false));
    else
      load(false);
    return [read, {
      refetch: load,
      mutate: setValue
    }];
  }
  function batch(fn) {
    return runUpdates(fn, false);
  }
  function untrack(fn) {
    if (Listener === null)
      return fn();
    const listener = Listener;
    Listener = null;
    try {
      return fn();
    } finally {
      Listener = listener;
    }
  }
  function on(deps, fn, options) {
    const isArray = Array.isArray(deps);
    let prevInput;
    let defer = options && options.defer;
    return (prevValue) => {
      let input;
      if (isArray) {
        input = Array(deps.length);
        for (let i2 = 0; i2 < deps.length; i2++)
          input[i2] = deps[i2]();
      } else
        input = deps();
      if (defer) {
        defer = false;
        return void 0;
      }
      const result = untrack(() => fn(input, prevInput, prevValue));
      prevInput = input;
      return result;
    };
  }
  function onMount(fn) {
    createEffect(() => untrack(fn));
  }
  function onCleanup(fn) {
    if (Owner === null)
      ;
    else if (Owner.cleanups === null)
      Owner.cleanups = [fn];
    else
      Owner.cleanups.push(fn);
    return fn;
  }
  function getListener() {
    return Listener;
  }
  function getOwner() {
    return Owner;
  }
  function createContext(defaultValue, options) {
    const id = Symbol("context");
    return {
      id,
      Provider: createProvider(id),
      defaultValue
    };
  }
  function useContext(context) {
    let ctx;
    return (ctx = lookup(Owner, context.id)) !== void 0 ? ctx : context.defaultValue;
  }
  function children(fn) {
    const children2 = createMemo(fn);
    const memo = createMemo(() => resolveChildren(children2()));
    memo.toArray = () => {
      const c2 = memo();
      return Array.isArray(c2) ? c2 : c2 != null ? [c2] : [];
    };
    return memo;
  }
  let SuspenseContext;
  function readSignal() {
    const runningTransition = Transition$1;
    if (this.sources && (this.state || runningTransition)) {
      if (this.state === STALE || runningTransition)
        updateComputation(this);
      else {
        const updates = Updates;
        Updates = null;
        runUpdates(() => lookUpstream(this), false);
        Updates = updates;
      }
    }
    if (Listener) {
      const sSlot = this.observers ? this.observers.length : 0;
      if (!Listener.sources) {
        Listener.sources = [this];
        Listener.sourceSlots = [sSlot];
      } else {
        Listener.sources.push(this);
        Listener.sourceSlots.push(sSlot);
      }
      if (!this.observers) {
        this.observers = [Listener];
        this.observerSlots = [Listener.sources.length - 1];
      } else {
        this.observers.push(Listener);
        this.observerSlots.push(Listener.sources.length - 1);
      }
    }
    return this.value;
  }
  function writeSignal(node, value, isComp) {
    let current = node.value;
    if (!node.comparator || !node.comparator(current, value)) {
      node.value = value;
      if (node.observers && node.observers.length) {
        runUpdates(() => {
          for (let i2 = 0; i2 < node.observers.length; i2 += 1) {
            const o2 = node.observers[i2];
            const TransitionRunning = Transition$1 && Transition$1.running;
            if (TransitionRunning && Transition$1.disposed.has(o2))
              ;
            if (TransitionRunning && !o2.tState || !TransitionRunning && !o2.state) {
              if (o2.pure)
                Updates.push(o2);
              else
                Effects.push(o2);
              if (o2.observers)
                markDownstream(o2);
            }
            if (TransitionRunning)
              ;
            else
              o2.state = STALE;
          }
          if (Updates.length > 1e6) {
            Updates = [];
            if (false)
              ;
            throw new Error();
          }
        }, false);
      }
    }
    return value;
  }
  function updateComputation(node) {
    if (!node.fn)
      return;
    cleanNode(node);
    const owner = Owner, listener = Listener, time = ExecCount;
    Listener = Owner = node;
    runComputation(node, node.value, time);
    Listener = listener;
    Owner = owner;
  }
  function runComputation(node, value, time) {
    let nextValue;
    try {
      nextValue = node.fn(value);
    } catch (err) {
      if (node.pure) {
        {
          node.state = STALE;
          node.owned && node.owned.forEach(cleanNode);
          node.owned = null;
        }
      }
      handleError(err);
    }
    if (!node.updatedAt || node.updatedAt <= time) {
      if (node.updatedAt != null && "observers" in node) {
        writeSignal(node, nextValue);
      } else
        node.value = nextValue;
      node.updatedAt = time;
    }
  }
  function createComputation(fn, init, pure, state = STALE, options) {
    const c2 = {
      fn,
      state,
      updatedAt: null,
      owned: null,
      sources: null,
      sourceSlots: null,
      cleanups: null,
      value: init,
      owner: Owner,
      context: null,
      pure
    };
    if (Owner === null)
      ;
    else if (Owner !== UNOWNED) {
      {
        if (!Owner.owned)
          Owner.owned = [c2];
        else
          Owner.owned.push(c2);
      }
    }
    return c2;
  }
  function runTop(node) {
    const runningTransition = Transition$1;
    if (node.state === 0 || runningTransition)
      return;
    if (node.state === PENDING || runningTransition)
      return lookUpstream(node);
    if (node.suspense && untrack(node.suspense.inFallback))
      return node.suspense.effects.push(node);
    const ancestors = [node];
    while ((node = node.owner) && (!node.updatedAt || node.updatedAt < ExecCount)) {
      if (node.state || runningTransition)
        ancestors.push(node);
    }
    for (let i2 = ancestors.length - 1; i2 >= 0; i2--) {
      node = ancestors[i2];
      if (node.state === STALE || runningTransition) {
        updateComputation(node);
      } else if (node.state === PENDING || runningTransition) {
        const updates = Updates;
        Updates = null;
        runUpdates(() => lookUpstream(node, ancestors[0]), false);
        Updates = updates;
      }
    }
  }
  function runUpdates(fn, init) {
    if (Updates)
      return fn();
    let wait = false;
    if (!init)
      Updates = [];
    if (Effects)
      wait = true;
    else
      Effects = [];
    ExecCount++;
    try {
      const res = fn();
      completeUpdates(wait);
      return res;
    } catch (err) {
      if (!wait)
        Effects = null;
      Updates = null;
      handleError(err);
    }
  }
  function completeUpdates(wait) {
    if (Updates) {
      runQueue(Updates);
      Updates = null;
    }
    if (wait)
      return;
    const e2 = Effects;
    Effects = null;
    if (e2.length)
      runUpdates(() => runEffects(e2), false);
  }
  function runQueue(queue) {
    for (let i2 = 0; i2 < queue.length; i2++)
      runTop(queue[i2]);
  }
  function runUserEffects(queue) {
    let i2, userLength = 0;
    for (i2 = 0; i2 < queue.length; i2++) {
      const e2 = queue[i2];
      if (!e2.user)
        runTop(e2);
      else
        queue[userLength++] = e2;
    }
    if (sharedConfig.context)
      setHydrateContext();
    for (i2 = 0; i2 < userLength; i2++)
      runTop(queue[i2]);
  }
  function lookUpstream(node, ignore) {
    const runningTransition = Transition$1;
    node.state = 0;
    for (let i2 = 0; i2 < node.sources.length; i2 += 1) {
      const source = node.sources[i2];
      if (source.sources) {
        if (source.state === STALE || runningTransition) {
          if (source !== ignore)
            runTop(source);
        } else if (source.state === PENDING || runningTransition)
          lookUpstream(source, ignore);
      }
    }
  }
  function markDownstream(node) {
    const runningTransition = Transition$1;
    for (let i2 = 0; i2 < node.observers.length; i2 += 1) {
      const o2 = node.observers[i2];
      if (!o2.state || runningTransition) {
        o2.state = PENDING;
        if (o2.pure)
          Updates.push(o2);
        else
          Effects.push(o2);
        o2.observers && markDownstream(o2);
      }
    }
  }
  function cleanNode(node) {
    let i2;
    if (node.sources) {
      while (node.sources.length) {
        const source = node.sources.pop(), index = node.sourceSlots.pop(), obs = source.observers;
        if (obs && obs.length) {
          const n2 = obs.pop(), s2 = source.observerSlots.pop();
          if (index < obs.length) {
            n2.sourceSlots[s2] = index;
            obs[index] = n2;
            source.observerSlots[index] = s2;
          }
        }
      }
    }
    if (node.owned) {
      for (i2 = 0; i2 < node.owned.length; i2++)
        cleanNode(node.owned[i2]);
      node.owned = null;
    }
    if (node.cleanups) {
      for (i2 = 0; i2 < node.cleanups.length; i2++)
        node.cleanups[i2]();
      node.cleanups = null;
    }
    node.state = 0;
    node.context = null;
  }
  function castError(err) {
    if (err instanceof Error || typeof err === "string")
      return err;
    return new Error("Unknown error");
  }
  function handleError(err) {
    err = castError(err);
    throw err;
  }
  function lookup(owner, key) {
    return owner ? owner.context && owner.context[key] !== void 0 ? owner.context[key] : lookup(owner.owner, key) : void 0;
  }
  function resolveChildren(children2) {
    if (typeof children2 === "function" && !children2.length)
      return resolveChildren(children2());
    if (Array.isArray(children2)) {
      const results = [];
      for (let i2 = 0; i2 < children2.length; i2++) {
        const result = resolveChildren(children2[i2]);
        Array.isArray(result) ? results.push.apply(results, result) : results.push(result);
      }
      return results;
    }
    return children2;
  }
  function createProvider(id, options) {
    return function provider(props) {
      let res;
      createRenderEffect(() => res = untrack(() => {
        Owner.context = {
          [id]: props.value
        };
        return children(() => props.children);
      }), void 0);
      return res;
    };
  }
  const FALLBACK = Symbol("fallback");
  function dispose(d) {
    for (let i2 = 0; i2 < d.length; i2++)
      d[i2]();
  }
  function mapArray(list, mapFn, options = {}) {
    let items = [], mapped = [], disposers = [], len = 0, indexes = mapFn.length > 1 ? [] : null;
    onCleanup(() => dispose(disposers));
    return () => {
      let newItems = list() || [], i2, j;
      newItems[$TRACK];
      return untrack(() => {
        let newLen = newItems.length, newIndices, newIndicesNext, temp, tempdisposers, tempIndexes, start, end, newEnd, item;
        if (newLen === 0) {
          if (len !== 0) {
            dispose(disposers);
            disposers = [];
            items = [];
            mapped = [];
            len = 0;
            indexes && (indexes = []);
          }
          if (options.fallback) {
            items = [FALLBACK];
            mapped[0] = createRoot((disposer) => {
              disposers[0] = disposer;
              return options.fallback();
            });
            len = 1;
          }
        } else if (len === 0) {
          mapped = new Array(newLen);
          for (j = 0; j < newLen; j++) {
            items[j] = newItems[j];
            mapped[j] = createRoot(mapper);
          }
          len = newLen;
        } else {
          temp = new Array(newLen);
          tempdisposers = new Array(newLen);
          indexes && (tempIndexes = new Array(newLen));
          for (start = 0, end = Math.min(len, newLen); start < end && items[start] === newItems[start]; start++)
            ;
          for (end = len - 1, newEnd = newLen - 1; end >= start && newEnd >= start && items[end] === newItems[newEnd]; end--, newEnd--) {
            temp[newEnd] = mapped[end];
            tempdisposers[newEnd] = disposers[end];
            indexes && (tempIndexes[newEnd] = indexes[end]);
          }
          newIndices = /* @__PURE__ */ new Map();
          newIndicesNext = new Array(newEnd + 1);
          for (j = newEnd; j >= start; j--) {
            item = newItems[j];
            i2 = newIndices.get(item);
            newIndicesNext[j] = i2 === void 0 ? -1 : i2;
            newIndices.set(item, j);
          }
          for (i2 = start; i2 <= end; i2++) {
            item = items[i2];
            j = newIndices.get(item);
            if (j !== void 0 && j !== -1) {
              temp[j] = mapped[i2];
              tempdisposers[j] = disposers[i2];
              indexes && (tempIndexes[j] = indexes[i2]);
              j = newIndicesNext[j];
              newIndices.set(item, j);
            } else
              disposers[i2]();
          }
          for (j = start; j < newLen; j++) {
            if (j in temp) {
              mapped[j] = temp[j];
              disposers[j] = tempdisposers[j];
              if (indexes) {
                indexes[j] = tempIndexes[j];
                indexes[j](j);
              }
            } else
              mapped[j] = createRoot(mapper);
          }
          mapped = mapped.slice(0, len = newLen);
          items = newItems.slice(0);
        }
        return mapped;
      });
      function mapper(disposer) {
        disposers[j] = disposer;
        if (indexes) {
          const [s2, set] = createSignal(j);
          indexes[j] = set;
          return mapFn(newItems[j], s2);
        }
        return mapFn(newItems[j]);
      }
    };
  }
  function createComponent(Comp, props) {
    return untrack(() => Comp(props || {}));
  }
  function trueFn() {
    return true;
  }
  const propTraps = {
    get(_, property, receiver) {
      if (property === $PROXY)
        return receiver;
      return _.get(property);
    },
    has(_, property) {
      if (property === $PROXY)
        return true;
      return _.has(property);
    },
    set: trueFn,
    deleteProperty: trueFn,
    getOwnPropertyDescriptor(_, property) {
      return {
        configurable: true,
        enumerable: true,
        get() {
          return _.get(property);
        },
        set: trueFn,
        deleteProperty: trueFn
      };
    },
    ownKeys(_) {
      return _.keys();
    }
  };
  function resolveSource(s2) {
    return !(s2 = typeof s2 === "function" ? s2() : s2) ? {} : s2;
  }
  function mergeProps(...sources) {
    let proxy = false;
    for (let i2 = 0; i2 < sources.length; i2++) {
      const s2 = sources[i2];
      proxy = proxy || !!s2 && $PROXY in s2;
      sources[i2] = typeof s2 === "function" ? (proxy = true, createMemo(s2)) : s2;
    }
    if (proxy) {
      return new Proxy({
        get(property) {
          for (let i2 = sources.length - 1; i2 >= 0; i2--) {
            const v = resolveSource(sources[i2])[property];
            if (v !== void 0)
              return v;
          }
        },
        has(property) {
          for (let i2 = sources.length - 1; i2 >= 0; i2--) {
            if (property in resolveSource(sources[i2]))
              return true;
          }
          return false;
        },
        keys() {
          const keys = [];
          for (let i2 = 0; i2 < sources.length; i2++)
            keys.push(...Object.keys(resolveSource(sources[i2])));
          return [...new Set(keys)];
        }
      }, propTraps);
    }
    const target = {};
    for (let i2 = sources.length - 1; i2 >= 0; i2--) {
      if (sources[i2]) {
        const descriptors = Object.getOwnPropertyDescriptors(sources[i2]);
        for (const key in descriptors) {
          if (key in target)
            continue;
          Object.defineProperty(target, key, {
            enumerable: true,
            get() {
              for (let i3 = sources.length - 1; i3 >= 0; i3--) {
                const v = (sources[i3] || {})[key];
                if (v !== void 0)
                  return v;
              }
            }
          });
        }
      }
    }
    return target;
  }
  function splitProps(props, ...keys) {
    const blocked = new Set(keys.flat());
    if ($PROXY in props) {
      const res = keys.map((k) => {
        return new Proxy({
          get(property) {
            return k.includes(property) ? props[property] : void 0;
          },
          has(property) {
            return k.includes(property) && property in props;
          },
          keys() {
            return k.filter((property) => property in props);
          }
        }, propTraps);
      });
      res.push(new Proxy({
        get(property) {
          return blocked.has(property) ? void 0 : props[property];
        },
        has(property) {
          return blocked.has(property) ? false : property in props;
        },
        keys() {
          return Object.keys(props).filter((k) => !blocked.has(k));
        }
      }, propTraps));
      return res;
    }
    const descriptors = Object.getOwnPropertyDescriptors(props);
    keys.push(Object.keys(descriptors).filter((k) => !blocked.has(k)));
    return keys.map((k) => {
      const clone = {};
      for (let i2 = 0; i2 < k.length; i2++) {
        const key = k[i2];
        if (!(key in props))
          continue;
        Object.defineProperty(clone, key, descriptors[key] ? descriptors[key] : {
          get() {
            return props[key];
          },
          set() {
            return true;
          },
          enumerable: true
        });
      }
      return clone;
    });
  }
  function For(props) {
    const fallback = "fallback" in props && {
      fallback: () => props.fallback
    };
    return createMemo(mapArray(() => props.each, props.children, fallback || void 0));
  }
  function Show(props) {
    let strictEqual = false;
    const keyed = props.keyed;
    const condition = createMemo(() => props.when, void 0, {
      equals: (a2, b) => strictEqual ? a2 === b : !a2 === !b
    });
    return createMemo(() => {
      const c2 = condition();
      if (c2) {
        const child = props.children;
        const fn = typeof child === "function" && child.length > 0;
        strictEqual = keyed || fn;
        return fn ? untrack(() => child(c2)) : child;
      }
      return props.fallback;
    }, void 0, void 0);
  }
  function Switch(props) {
    let strictEqual = false;
    let keyed = false;
    const equals = (a2, b) => a2[0] === b[0] && (strictEqual ? a2[1] === b[1] : !a2[1] === !b[1]) && a2[2] === b[2];
    const conditions = children(() => props.children), evalConditions = createMemo(() => {
      let conds = conditions();
      if (!Array.isArray(conds))
        conds = [conds];
      for (let i2 = 0; i2 < conds.length; i2++) {
        const c2 = conds[i2].when;
        if (c2) {
          keyed = !!conds[i2].keyed;
          return [i2, c2, conds[i2]];
        }
      }
      return [-1];
    }, void 0, {
      equals
    });
    return createMemo(() => {
      const [index, when, cond] = evalConditions();
      if (index < 0)
        return props.fallback;
      const c2 = cond.children;
      const fn = typeof c2 === "function" && c2.length > 0;
      strictEqual = keyed || fn;
      return fn ? untrack(() => c2(when)) : c2;
    }, void 0, void 0);
  }
  function Match(props) {
    return props;
  }
  const booleans = ["allowfullscreen", "async", "autofocus", "autoplay", "checked", "controls", "default", "disabled", "formnovalidate", "hidden", "indeterminate", "ismap", "loop", "multiple", "muted", "nomodule", "novalidate", "open", "playsinline", "readonly", "required", "reversed", "seamless", "selected"];
  const Properties = /* @__PURE__ */ new Set(["className", "value", "readOnly", "formNoValidate", "isMap", "noModule", "playsInline", ...booleans]);
  const ChildProperties = /* @__PURE__ */ new Set(["innerHTML", "textContent", "innerText", "children"]);
  const Aliases = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(null), {
    className: "class",
    htmlFor: "for"
  });
  const PropAliases = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(null), {
    class: "className",
    formnovalidate: "formNoValidate",
    ismap: "isMap",
    nomodule: "noModule",
    playsinline: "playsInline",
    readonly: "readOnly"
  });
  const DelegatedEvents = /* @__PURE__ */ new Set(["beforeinput", "click", "dblclick", "contextmenu", "focusin", "focusout", "input", "keydown", "keyup", "mousedown", "mousemove", "mouseout", "mouseover", "mouseup", "pointerdown", "pointermove", "pointerout", "pointerover", "pointerup", "touchend", "touchmove", "touchstart"]);
  const SVGElements = /* @__PURE__ */ new Set([
    "altGlyph",
    "altGlyphDef",
    "altGlyphItem",
    "animate",
    "animateColor",
    "animateMotion",
    "animateTransform",
    "circle",
    "clipPath",
    "color-profile",
    "cursor",
    "defs",
    "desc",
    "ellipse",
    "feBlend",
    "feColorMatrix",
    "feComponentTransfer",
    "feComposite",
    "feConvolveMatrix",
    "feDiffuseLighting",
    "feDisplacementMap",
    "feDistantLight",
    "feFlood",
    "feFuncA",
    "feFuncB",
    "feFuncG",
    "feFuncR",
    "feGaussianBlur",
    "feImage",
    "feMerge",
    "feMergeNode",
    "feMorphology",
    "feOffset",
    "fePointLight",
    "feSpecularLighting",
    "feSpotLight",
    "feTile",
    "feTurbulence",
    "filter",
    "font",
    "font-face",
    "font-face-format",
    "font-face-name",
    "font-face-src",
    "font-face-uri",
    "foreignObject",
    "g",
    "glyph",
    "glyphRef",
    "hkern",
    "image",
    "line",
    "linearGradient",
    "marker",
    "mask",
    "metadata",
    "missing-glyph",
    "mpath",
    "path",
    "pattern",
    "polygon",
    "polyline",
    "radialGradient",
    "rect",
    "set",
    "stop",
    "svg",
    "switch",
    "symbol",
    "text",
    "textPath",
    "tref",
    "tspan",
    "use",
    "view",
    "vkern"
  ]);
  const SVGNamespace = {
    xlink: "http://www.w3.org/1999/xlink",
    xml: "http://www.w3.org/XML/1998/namespace"
  };
  function reconcileArrays(parentNode, a2, b) {
    let bLength = b.length, aEnd = a2.length, bEnd = bLength, aStart = 0, bStart = 0, after = a2[aEnd - 1].nextSibling, map = null;
    while (aStart < aEnd || bStart < bEnd) {
      if (a2[aStart] === b[bStart]) {
        aStart++;
        bStart++;
        continue;
      }
      while (a2[aEnd - 1] === b[bEnd - 1]) {
        aEnd--;
        bEnd--;
      }
      if (aEnd === aStart) {
        const node = bEnd < bLength ? bStart ? b[bStart - 1].nextSibling : b[bEnd - bStart] : after;
        while (bStart < bEnd)
          parentNode.insertBefore(b[bStart++], node);
      } else if (bEnd === bStart) {
        while (aStart < aEnd) {
          if (!map || !map.has(a2[aStart]))
            a2[aStart].remove();
          aStart++;
        }
      } else if (a2[aStart] === b[bEnd - 1] && b[bStart] === a2[aEnd - 1]) {
        const node = a2[--aEnd].nextSibling;
        parentNode.insertBefore(b[bStart++], a2[aStart++].nextSibling);
        parentNode.insertBefore(b[--bEnd], node);
        a2[aEnd] = b[bEnd];
      } else {
        if (!map) {
          map = /* @__PURE__ */ new Map();
          let i2 = bStart;
          while (i2 < bEnd)
            map.set(b[i2], i2++);
        }
        const index = map.get(a2[aStart]);
        if (index != null) {
          if (bStart < index && index < bEnd) {
            let i2 = aStart, sequence = 1, t2;
            while (++i2 < aEnd && i2 < bEnd) {
              if ((t2 = map.get(a2[i2])) == null || t2 !== index + sequence)
                break;
              sequence++;
            }
            if (sequence > index - bStart) {
              const node = a2[aStart];
              while (bStart < index)
                parentNode.insertBefore(b[bStart++], node);
            } else
              parentNode.replaceChild(b[bStart++], a2[aStart++]);
          } else
            aStart++;
        } else
          a2[aStart++].remove();
      }
    }
  }
  const $$EVENTS = "_$DX_DELEGATE";
  function render(code, element, init, options = {}) {
    let disposer;
    createRoot((dispose2) => {
      disposer = dispose2;
      element === document ? code() : insert(element, code(), element.firstChild ? null : void 0, init);
    }, options.owner);
    return () => {
      disposer();
      element.textContent = "";
    };
  }
  function template$1(html, check, isSVG) {
    if (typeof window === 'undefined') {
      return null;
    }
    
    const t2 = document.createElement("template");
    t2.innerHTML = html;
    let node = t2.content.firstChild;
    if (isSVG)
      node = node.firstChild;
    return node;
  }
  function delegateEvents(eventNames, document2 = window.document) {
    const e2 = document2[$$EVENTS] || (document2[$$EVENTS] = /* @__PURE__ */ new Set());
    for (let i2 = 0, l2 = eventNames.length; i2 < l2; i2++) {
      const name = eventNames[i2];
      if (!e2.has(name)) {
        e2.add(name);
        document2.addEventListener(name, eventHandler);
      }
    }
  }
  function setAttribute(node, name, value) {
    if (value == null)
      node.removeAttribute(name);
    else
      node.setAttribute(name, value);
  }
  function setAttributeNS(node, namespace, name, value) {
    if (value == null)
      node.removeAttributeNS(namespace, name);
    else
      node.setAttributeNS(namespace, name, value);
  }
  function className(node, value) {
    if (value == null)
      node.removeAttribute("class");
    else
      node.className = value;
  }
  function addEventListener(node, name, handler, delegate) {
    if (delegate) {
      if (Array.isArray(handler)) {
        node[`$$${name}`] = handler[0];
        node[`$$${name}Data`] = handler[1];
      } else
        node[`$$${name}`] = handler;
    } else if (Array.isArray(handler)) {
      const handlerFn = handler[0];
      node.addEventListener(name, handler[0] = (e2) => handlerFn.call(node, handler[1], e2));
    } else
      node.addEventListener(name, handler);
  }
  function classList(node, value, prev = {}) {
    const classKeys = Object.keys(value || {}), prevKeys = Object.keys(prev);
    let i2, len;
    for (i2 = 0, len = prevKeys.length; i2 < len; i2++) {
      const key = prevKeys[i2];
      if (!key || key === "undefined" || value[key])
        continue;
      toggleClassKey(node, key, false);
      delete prev[key];
    }
    for (i2 = 0, len = classKeys.length; i2 < len; i2++) {
      const key = classKeys[i2], classValue = !!value[key];
      if (!key || key === "undefined" || prev[key] === classValue || !classValue)
        continue;
      toggleClassKey(node, key, true);
      prev[key] = classValue;
    }
    return prev;
  }
  function style(node, value, prev) {
    if (!value)
      return prev ? setAttribute(node, "style") : value;
    const nodeStyle = node.style;
    if (typeof value === "string")
      return nodeStyle.cssText = value;
    typeof prev === "string" && (nodeStyle.cssText = prev = void 0);
    prev || (prev = {});
    value || (value = {});
    let v, s2;
    for (s2 in prev) {
      value[s2] == null && nodeStyle.removeProperty(s2);
      delete prev[s2];
    }
    for (s2 in value) {
      v = value[s2];
      if (v !== prev[s2]) {
        nodeStyle.setProperty(s2, v);
        prev[s2] = v;
      }
    }
    return prev;
  }
  function spread(node, props = {}, isSVG, skipChildren) {
    const prevProps = {};
    if (!skipChildren) {
      createRenderEffect(() => prevProps.children = insertExpression(node, props.children, prevProps.children));
    }
    createRenderEffect(() => props.ref && props.ref(node));
    createRenderEffect(() => assign(node, props, isSVG, true, prevProps, true));
    return prevProps;
  }
  function use(fn, element, arg) {
    return untrack(() => fn(element, arg));
  }
  function insert(parent, accessor, marker, initial) {
    if (marker !== void 0 && !initial)
      initial = [];
    if (typeof accessor !== "function")
      return insertExpression(parent, accessor, initial, marker);
    createRenderEffect((current) => insertExpression(parent, accessor(), current, marker), initial);
  }
  function assign(node, props, isSVG, skipChildren, prevProps = {}, skipRef = false) {
    props || (props = {});
    for (const prop in prevProps) {
      if (!(prop in props)) {
        if (prop === "children")
          continue;
        prevProps[prop] = assignProp(node, prop, null, prevProps[prop], isSVG, skipRef);
      }
    }
    for (const prop in props) {
      if (prop === "children") {
        if (!skipChildren)
          insertExpression(node, props.children);
        continue;
      }
      const value = props[prop];
      prevProps[prop] = assignProp(node, prop, value, prevProps[prop], isSVG, skipRef);
    }
  }
  function getNextElement(template2) {
    let node, key;
    if (!sharedConfig.context || !(node = sharedConfig.registry.get(key = getHydrationKey()))) {
      return template2.cloneNode(true);
    }
    if (sharedConfig.completed)
      sharedConfig.completed.add(node);
    sharedConfig.registry.delete(key);
    return node;
  }
  function toPropertyName(name) {
    return name.toLowerCase().replace(/-([a-z])/g, (_, w) => w.toUpperCase());
  }
  function toggleClassKey(node, key, value) {
    const classNames = key.trim().split(/\s+/);
    for (let i2 = 0, nameLen = classNames.length; i2 < nameLen; i2++)
      node.classList.toggle(classNames[i2], value);
  }
  function assignProp(node, prop, value, prev, isSVG, skipRef) {
    let isCE, isProp, isChildProp;
    if (prop === "style")
      return style(node, value, prev);
    if (prop === "classList")
      return classList(node, value, prev);
    if (value === prev)
      return prev;
    if (prop === "ref") {
      if (!skipRef)
        value(node);
    } else if (prop.slice(0, 3) === "on:") {
      const e2 = prop.slice(3);
      prev && node.removeEventListener(e2, prev);
      value && node.addEventListener(e2, value);
    } else if (prop.slice(0, 10) === "oncapture:") {
      const e2 = prop.slice(10);
      prev && node.removeEventListener(e2, prev, true);
      value && node.addEventListener(e2, value, true);
    } else if (prop.slice(0, 2) === "on") {
      const name = prop.slice(2).toLowerCase();
      const delegate = DelegatedEvents.has(name);
      if (!delegate && prev) {
        const h2 = Array.isArray(prev) ? prev[0] : prev;
        node.removeEventListener(name, h2);
      }
      if (delegate || value) {
        addEventListener(node, name, value, delegate);
        delegate && delegateEvents([name]);
      }
    } else if ((isChildProp = ChildProperties.has(prop)) || !isSVG && (PropAliases[prop] || (isProp = Properties.has(prop))) || (isCE = node.nodeName.includes("-"))) {
      if (prop === "class" || prop === "className")
        className(node, value);
      else if (isCE && !isProp && !isChildProp)
        node[toPropertyName(prop)] = value;
      else
        node[PropAliases[prop] || prop] = value;
    } else {
      const ns = isSVG && prop.indexOf(":") > -1 && SVGNamespace[prop.split(":")[0]];
      if (ns)
        setAttributeNS(node, ns, prop, value);
      else
        setAttribute(node, Aliases[prop] || prop, value);
    }
    return value;
  }
  function eventHandler(e2) {
    const key = `$$${e2.type}`;
    let node = e2.composedPath && e2.composedPath()[0] || e2.target;
    if (e2.target !== node) {
      Object.defineProperty(e2, "target", {
        configurable: true,
        value: node
      });
    }
    Object.defineProperty(e2, "currentTarget", {
      configurable: true,
      get() {
        return node || document;
      }
    });
    if (sharedConfig.registry && !sharedConfig.done) {
      sharedConfig.done = true;
      document.querySelectorAll("[id^=pl-]").forEach((elem) => {
        while (elem && elem.nodeType !== 8 && elem.nodeValue !== "pl-" + e2) {
          let x = elem.nextSibling;
          elem.remove();
          elem = x;
        }
        elem && elem.remove();
      });
    }
    while (node) {
      const handler = node[key];
      if (handler && !node.disabled) {
        const data = node[`${key}Data`];
        data !== void 0 ? handler.call(node, data, e2) : handler.call(node, e2);
        if (e2.cancelBubble)
          return;
      }
      node = node._$host || node.parentNode || node.host;
    }
  }
  function insertExpression(parent, value, current, marker, unwrapArray) {
    if (sharedConfig.context && !current)
      current = [...parent.childNodes];
    while (typeof current === "function")
      current = current();
    if (value === current)
      return current;
    const t2 = typeof value, multi = marker !== void 0;
    parent = multi && current[0] && current[0].parentNode || parent;
    if (t2 === "string" || t2 === "number") {
      if (sharedConfig.context)
        return current;
      if (t2 === "number")
        value = value.toString();
      if (multi) {
        let node = current[0];
        if (node && node.nodeType === 3) {
          node.data = value;
        } else
          node = document.createTextNode(value);
        current = cleanChildren(parent, current, marker, node);
      } else {
        if (current !== "" && typeof current === "string") {
          current = parent.firstChild.data = value;
        } else
          current = parent.textContent = value;
      }
    } else if (value == null || t2 === "boolean") {
      if (sharedConfig.context)
        return current;
      current = cleanChildren(parent, current, marker);
    } else if (t2 === "function") {
      createRenderEffect(() => {
        let v = value();
        while (typeof v === "function")
          v = v();
        current = insertExpression(parent, v, current, marker);
      });
      return () => current;
    } else if (Array.isArray(value)) {
      const array = [];
      const currentArray = current && Array.isArray(current);
      if (normalizeIncomingArray(array, value, current, unwrapArray)) {
        createRenderEffect(() => current = insertExpression(parent, array, current, marker, true));
        return () => current;
      }
      if (sharedConfig.context) {
        if (!array.length)
          return current;
        for (let i2 = 0; i2 < array.length; i2++) {
          if (array[i2].parentNode)
            return current = array;
        }
      }
      if (array.length === 0) {
        current = cleanChildren(parent, current, marker);
        if (multi)
          return current;
      } else if (currentArray) {
        if (current.length === 0) {
          appendNodes(parent, array, marker);
        } else
          reconcileArrays(parent, current, array);
      } else {
        current && cleanChildren(parent);
        appendNodes(parent, array);
      }
      current = array;
    } else if (value instanceof Node) {
      if (sharedConfig.context && value.parentNode)
        return current = multi ? [value] : value;
      if (Array.isArray(current)) {
        if (multi)
          return current = cleanChildren(parent, current, marker, value);
        cleanChildren(parent, current, null, value);
      } else if (current == null || current === "" || !parent.firstChild) {
        parent.appendChild(value);
      } else
        parent.replaceChild(value, parent.firstChild);
      current = value;
    } else
      ;
    return current;
  }
  function normalizeIncomingArray(normalized, array, current, unwrap2) {
    let dynamic = false;
    for (let i2 = 0, len = array.length; i2 < len; i2++) {
      let item = array[i2], prev = current && current[i2];
      if (item instanceof Node) {
        normalized.push(item);
      } else if (item == null || item === true || item === false)
        ;
      else if (Array.isArray(item)) {
        dynamic = normalizeIncomingArray(normalized, item, prev) || dynamic;
      } else if (typeof item === "function") {
        if (unwrap2) {
          while (typeof item === "function")
            item = item();
          dynamic = normalizeIncomingArray(normalized, Array.isArray(item) ? item : [item], Array.isArray(prev) ? prev : [prev]) || dynamic;
        } else {
          normalized.push(item);
          dynamic = true;
        }
      } else {
        const value = String(item);
        if (prev && prev.nodeType === 3 && prev.data === value) {
          normalized.push(prev);
        } else
          normalized.push(document.createTextNode(value));
      }
    }
    return dynamic;
  }
  function appendNodes(parent, array, marker = null) {
    for (let i2 = 0, len = array.length; i2 < len; i2++)
      parent.insertBefore(array[i2], marker);
  }
  function cleanChildren(parent, current, marker, replacement) {
    if (marker === void 0)
      return parent.textContent = "";
    const node = replacement || document.createTextNode("");
    if (current.length) {
      let inserted = false;
      for (let i2 = current.length - 1; i2 >= 0; i2--) {
        const el = current[i2];
        if (node !== el) {
          const isParent = el.parentNode === parent;
          if (!inserted && !i2)
            isParent ? parent.replaceChild(node, el) : parent.insertBefore(node, marker);
          else
            isParent && el.remove();
        } else
          inserted = true;
      }
    } else
      parent.insertBefore(node, marker);
    return [node];
  }
  function getHydrationKey() {
    const hydrate = sharedConfig.context;
    return `${hydrate.id}${hydrate.count++}`;
  }
  const SVG_NAMESPACE = "http://www.w3.org/2000/svg";
  function createElement(tagName, isSVG = false) {
    return isSVG ? document.createElementNS(SVG_NAMESPACE, tagName) : document.createElement(tagName);
  }
  function Portal(props) {
    const {
      useShadow
    } = props, marker = document.createTextNode(""), mount = props.mount || document.body;
    function renderPortal() {
      if (sharedConfig.context) {
        const [s2, set] = createSignal(false);
        queueMicrotask(() => set(true));
        return () => s2() && props.children;
      } else
        return () => props.children;
    }
    if (mount instanceof HTMLHeadElement) {
      const [clean, setClean] = createSignal(false);
      const cleanup = () => setClean(true);
      createRoot((dispose2) => insert(mount, () => !clean() ? renderPortal()() : dispose2(), null));
      onCleanup(() => {
        if (sharedConfig.context)
          queueMicrotask(cleanup);
        else
          cleanup();
      });
    } else {
      const container = createElement(props.isSVG ? "g" : "div", props.isSVG), renderRoot = useShadow && container.attachShadow ? container.attachShadow({
        mode: "open"
      }) : container;
      Object.defineProperty(container, "_$host", {
        get() {
          return marker.parentNode;
        },
        configurable: true
      });
      insert(renderRoot, renderPortal());
      mount.appendChild(container);
      props.ref && props.ref(container);
      onCleanup(() => mount.removeChild(container));
    }
    return marker;
  }
  function Dynamic(props) {
    const [p2, others] = splitProps(props, ["component"]);
    const cached = createMemo(() => p2.component);
    return createMemo(() => {
      const component = cached();
      switch (typeof component) {
        case "function":
          return untrack(() => component(others));
        case "string":
          const isSvg = SVGElements.has(component);
          const el = sharedConfig.context ? getNextElement() : createElement(component, isSvg);
          spread(el, others, isSvg);
          return el;
      }
    });
  }
  const [walletsModalOpen, setWalletsModalOpen] = createSignal(false);
  const [lastSelectedWalletInfo, setLastSelectedWalletInfo] = createSignal(null);
  const [action, setAction] = createSignal(null);
  let e = { data: "" }, t = (t2) => "object" == typeof window ? ((t2 ? t2.querySelector("#_goober") : window._goober) || Object.assign((t2 || document.head).appendChild(document.createElement("style")), { innerHTML: " ", id: "_goober" })).firstChild : t2 || e, l = /(?:([\u0080-\uFFFF\w-%@]+) *:? *([^{;]+?);|([^;}{]*?) *{)|(}\s*)/g, a = /\/\*[^]*?\*\/|  +/g, n = /\n+/g, o = (e2, t2) => {
    let r = "", l2 = "", a2 = "";
    for (let n2 in e2) {
      let c2 = e2[n2];
      "@" == n2[0] ? "i" == n2[1] ? r = n2 + " " + c2 + ";" : l2 += "f" == n2[1] ? o(c2, n2) : n2 + "{" + o(c2, "k" == n2[1] ? "" : t2) + "}" : "object" == typeof c2 ? l2 += o(c2, t2 ? t2.replace(/([^,])+/g, (e3) => n2.replace(/(^:.*)|([^,])+/g, (t3) => /&/.test(t3) ? t3.replace(/&/g, e3) : e3 ? e3 + " " + t3 : t3)) : n2) : null != c2 && (n2 = /^--/.test(n2) ? n2 : n2.replace(/[A-Z]/g, "-$&").toLowerCase(), a2 += o.p ? o.p(n2, c2) : n2 + ":" + c2 + ";");
    }
    return r + (t2 && a2 ? t2 + "{" + a2 + "}" : a2) + l2;
  }, c = {}, s = (e2) => {
    if ("object" == typeof e2) {
      let t2 = "";
      for (let r in e2)
        t2 += r + s(e2[r]);
      return t2;
    }
    return e2;
  }, i = (e2, t2, r, i2, p2) => {
    let u2 = s(e2), d = c[u2] || (c[u2] = ((e3) => {
      let t3 = 0, r2 = 11;
      for (; t3 < e3.length; )
        r2 = 101 * r2 + e3.charCodeAt(t3++) >>> 0;
      return "go" + r2;
    })(u2));
    if (!c[d]) {
      let t3 = u2 !== e2 ? e2 : ((e3) => {
        let t4, r2, o2 = [{}];
        for (; t4 = l.exec(e3.replace(a, "")); )
          t4[4] ? o2.shift() : t4[3] ? (r2 = t4[3].replace(n, " ").trim(), o2.unshift(o2[0][r2] = o2[0][r2] || {})) : o2[0][t4[1]] = t4[2].replace(n, " ").trim();
        return o2[0];
      })(e2);
      c[d] = o(p2 ? { ["@keyframes " + d]: t3 } : t3, r ? "" : "." + d);
    }
    let f = r && c.g ? c.g : null;
    return r && (c.g = c[d]), ((e3, t3, r2, l2) => {
      l2 ? t3.data = t3.data.replace(l2, e3) : -1 === t3.data.indexOf(e3) && (t3.data = r2 ? e3 + t3.data : t3.data + e3);
    })(c[d], t2, i2, f), d;
  }, p = (e2, t2, r) => e2.reduce((e3, l2, a2) => {
    let n2 = t2[a2];
    if (n2 && n2.call) {
      let e4 = n2(r), t3 = e4 && e4.props && e4.props.className || /^go/.test(e4) && e4;
      n2 = t3 ? "." + t3 : e4 && "object" == typeof e4 ? e4.props ? "" : o(e4, "") : false === e4 ? "" : e4;
    }
    return e3 + l2 + (null == n2 ? "" : n2);
  }, "");
  function u(e2) {
    let r = this || {}, l2 = e2.call ? e2(r.p) : e2;
    return i(l2.unshift ? l2.raw ? p(l2, [].slice.call(arguments, 1), r.p) : l2.reduce((e3, t2) => Object.assign(e3, t2 && t2.call ? t2(r.p) : t2), {}) : l2, t(r.target), r.g, r.o, r.k);
  }
  u.bind({ g: 1 });
  let h = u.bind({ k: 1 });
  const ThemeContext = createContext();
  function ThemeProvider(props) {
    return createComponent(ThemeContext.Provider, {
      value: props.theme,
      get children() {
        return props.children;
      }
    });
  }
  function useTheme() {
    return useContext(ThemeContext);
  }
  function makeStyled(tag) {
    let _ctx = this || {};
    return (...args) => {
      const Styled = (props) => {
        const theme = useContext(ThemeContext);
        const withTheme = mergeProps(props, { theme });
        const clone = mergeProps(withTheme, {
          get class() {
            const pClass = withTheme.class, append = "class" in withTheme && /^go[0-9]+/.test(pClass);
            let className2 = u.apply(
              { target: _ctx.target, o: append, p: withTheme, g: _ctx.g },
              args
            );
            return [pClass, className2].filter(Boolean).join(" ");
          }
        });
        const [local, newProps] = splitProps(clone, ["as", "theme"]);
        const htmlProps = newProps;
        const createTag = local.as || tag;
        let el;
        if (typeof createTag === "function") {
          el = createTag(htmlProps);
        } else {
          {
            if (_ctx.g == 1) {
              el = document.createElement(createTag);
              spread(el, htmlProps);
            } else {
              el = Dynamic(mergeProps({ component: createTag }, htmlProps));
            }
          }
        }
        return el;
      };
      Styled.class = (props) => {
        return untrack(() => {
          return u.apply({ target: _ctx.target, p: props, g: _ctx.g }, args);
        });
      };
      return Styled;
    };
  }
  const styled = new Proxy(makeStyled, {
    get(target, tag) {
      return target(tag);
    }
  });
  function createGlobalStyles() {
    const fn = makeStyled.call({ g: 1 }, "div").apply(null, arguments);
    return function GlobalStyles2(props) {
      fn(props);
      return null;
    };
  }
  const common$1 = {
    close: "Close",
    openWallet: "Open wallet",
    get: "GET",
    learnMore: "Learn more",
    openExtension: "Open Extension",
    copyLink: "Copy Link",
    copied: "Copied!",
    yourWallet: "your wallet"
  };
  const button$1 = {
    connectWallet: "Connect Wallet",
    dropdown: {
      copy: "Copy address",
      copied: "Address copied!",
      disconnect: "Disconnect"
    }
  };
  const notifications$1 = {
    confirm: {
      header: "Open {{ name }} to\xA0confirm the\xA0transaction."
    },
    transactionSent: {
      header: "Transaction sent",
      text: "Your transaction\xA0will be\xA0processed in\xA0a\xA0few seconds."
    },
    transactionCanceled: {
      header: "Transaction canceled",
      text: "There will be no changes to your account."
    }
  };
  const walletModal$1 = {
    loading: "Loading wallets",
    qrCode: "QR Code",
    wallets: "Wallets",
    universalQRModal: {
      scanQR: "Scan the\xA0code below with a camera in your TON wallet.",
      openWallet: "Open Wallet",
      openInstalledWallet: "Open Wallet",
      dontHave: "Explore TON wallets"
    },
    desktopSelectWalletModal: {
      selectWallet: "Select a\xA0wallet to\xA0connect."
    },
    mobileSelectWalletModal: {
      connectWallet: "Connect a\xA0Wallet",
      selectWallet: "$walletModal.desktopSelectWalletModal.selectWallet",
      installedWallet: "Installed Wallet"
    },
    qrCodeModal: {
      connectWith: "Connect with\xA0{{ name }}",
      scan: "Scan the\xA0code below.",
      openWallet: "Open {{ name }}",
      openExtension: "Open Extension",
      dontHave: "Don't have {{ name }}?"
    }
  };
  const actionModal$1 = {
    confirmTransaction: {
      header: "Confirm the\xA0transaction in\xA0{{ name }}",
      text: "It will only take a\xA0moment."
    },
    transactionSent: "$notifications.transactionSent",
    transactionCanceled: "$notifications.transactionCanceled"
  };
  const en = {
    common: common$1,
    button: button$1,
    notifications: notifications$1,
    walletModal: walletModal$1,
    actionModal: actionModal$1
  };
  const common = {
    close: "\u0417\u0430\u043A\u0440\u044B\u0442\u044C",
    openWallet: "\u041E\u0442\u043A\u0440\u044B\u0442\u044C \u043A\u043E\u0448\u0435\u043B\u0435\u043A",
    get: "\u0421\u043A\u0430\u0447\u0430\u0442\u044C",
    learnMore: "\u041F\u043E\u0434\u0440\u043E\u0431\u043D\u0435\u0435",
    openExtension: "\u0420\u0430\u0441\u0448\u0438\u0440\u0435\u043D\u0438\u0435",
    copyLink: "\u041A\u043E\u043F\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u0441\u0441\u044B\u043B\u043A\u0443",
    copied: "\u0421\u043A\u043E\u043F\u0438\u0440\u043E\u0432\u0430\u043D\u043E!",
    yourWallet: "\u0432\u0430\u0448\u0435\u043C \u043A\u043E\u0448\u0435\u043B\u044C\u043A\u0435"
  };
  const button = {
    connectWallet: "\u041F\u043E\u0434\u043A\u043B\u044E\u0447\u0438\u0442\u044C \u043A\u043E\u0448\u0435\u043B\u0451\u043A",
    dropdown: {
      copy: "\u0421\u043A\u043E\u043F\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u0430\u0434\u0440\u0435\u0441",
      copied: "\u0410\u0434\u0440\u0435\u0441 \u0441\u043A\u043E\u043F\u0438\u0440\u043E\u0432\u0430\u043D!",
      disconnect: "\u041E\u0442\u043A\u043B\u044E\u0447\u0438\u0442\u044C \u043A\u043E\u0448\u0435\u043B\u0451\u043A"
    }
  };
  const notifications = {
    confirm: {
      header: "\u041E\u0442\u043A\u0440\u043E\u0439\u0442\u0435 {{ name }}, \u0447\u0442\u043E\u0431\u044B \u043F\u043E\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u0442\u044C \u0442\u0440\u0430\u043D\u0437\u0430\u043A\u0446\u0438\u044E."
    },
    transactionSent: {
      header: "\u0422\u0440\u0430\u043D\u0437\u0430\u043A\u0446\u0438\u044F \u043E\u0442\u043F\u0440\u0430\u0432\u043B\u0435\u043D\u0430",
      text: "\u0412\u0430\u0448\u0430 \u0442\u0440\u0430\u043D\u0437\u0430\u043A\u0446\u0438\u044F\xA0\u0431\u0443\u0434\u0435\u0442 \u043E\u0431\u0440\u0430\u0431\u043E\u0442\u0430\u043D\u0430 \u0447\u0435\u0440\u0435\u0437\xA0\u043D\u0435\u0441\u043A\u043E\u043B\u044C\u043A\u043E \u0441\u0435\u043A\u0443\u043D\u0434."
    },
    transactionCanceled: {
      header: "\u0422\u0440\u0430\u043D\u0437\u0430\u043A\u0446\u0438\u044F \u043E\u0442\u043C\u0435\u043D\u0435\u043D\u0430",
      text: "\u0421\u043E\u0441\u0442\u043E\u044F\u043D\u0438\u0435 \u0432\u0430\u0448\u0435\u0433\u043E \u0441\u0447\u0451\u0442\u0430 \u043D\u0435 \u0438\u0437\u043C\u0435\u043D\u0438\u0442\u0441\u044F."
    }
  };
  const walletModal = {
    loading: "\u0421\u043F\u0438\u0441\u043E\u043A \u043A\u043E\u0448\u0435\u043B\u044C\u043A\u043E\u0432 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442\u0441\u044F",
    qrCode: "QR-\u043A\u043E\u0434",
    wallets: "\u041A\u043E\u0448\u0435\u043B\u044C\u043A\u0438",
    universalQRModal: {
      scanQR: "\u041E\u0442\u0441\u043A\u0430\u043D\u0438\u0440\u0443\u0439\u0442\u0435 \u043A\u043E\u0434 \u043D\u0438\u0436\u0435 \u0441\xA0\u043F\u043E\u043C\u043E\u0449\u044C\u044E \u043A\u0430\u043C\u0435\u0440\u044B \u0432 \u0432\u0430\u0448\u0435\u043C TON-\u043A\u043E\u0448\u0435\u043B\u044C\u043A\u0435.",
      openWallet: "\u041E\u0442\u043A\u0440\u044B\u0442\u044C \u043A\u043E\u0448\u0435\u043B\u0451\u043A",
      openInstalledWallet: "\u041E\u0442\u043A\u0440\u044B\u0442\u044C \u043A\u043E\u0448\u0435\u043B\u0451\u043A",
      dontHave: "\u041F\u043E\u0434\u0440\u043E\u0431\u043D\u0435\u0435 \u043E\xA0TON\xA0\u043A\u043E\u0448\u0435\u043B\u044C\u043A\u0430\u0445"
    },
    desktopSelectWalletModal: {
      selectWallet: "\u0412\u044B\u0431\u0435\u0440\u0438\u0442\u0435 \u043A\u043E\u0448\u0435\u043B\u0451\u043A \u0434\u043B\u044F\xA0\u043F\u043E\u0434\u043A\u043B\u044E\u0447\u0435\u043D\u0438\u044F."
    },
    mobileSelectWalletModal: {
      connectWallet: "\u041F\u043E\u0434\u043A\u043B\u044E\u0447\u0438\u0442\u0435 \u043A\u043E\u0448\u0435\u043B\u0451\u043A",
      selectWallet: "$walletModal.desktopSelectWalletModal.selectWallet",
      installedWallet: "\u041E\u0442\u043A\u0440\u044B\u0442\u044C \u043A\u043E\u0448\u0435\u043B\u0451\u043A"
    },
    qrCodeModal: {
      connectWith: "\u041F\u043E\u0434\u043A\u043B\u044E\u0447\u0438\u0442\u044C\u0441\u044F \u0447\u0435\u0440\u0435\u0437\xA0{{ name }}",
      scan: "\u041E\u0442\u0441\u043A\u0430\u043D\u0438\u0440\u0443\u0439\u0442\u0435 \u043A\u043E\u0434 \u043D\u0438\u0436\u0435.",
      openWallet: "\u041E\u0442\u043A\u0440\u044B\u0442\u044C {{ name }}",
      openExtension: "\u0420\u0430\u0441\u0448\u0438\u0440\u0435\u043D\u0438\u0435",
      dontHave: "\u0423 \u0432\u0430\u0441 \u043D\u0435\u0442 {{ name }}?"
    }
  };
  const actionModal = {
    confirmTransaction: {
      header: "\u041F\u043E\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u0442\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0432\xA0{{ name }}",
      text: "\u042D\u0442\u043E \u0437\u0430\u0439\u043C\u0435\u0442 \u043F\u0430\u0440\u0443 \u0441\u0435\u043A\u0443\u043D\u0434."
    },
    transactionSent: "$notifications.transactionSent",
    transactionCanceled: "$notifications.transactionCanceled"
  };
  const ru = {
    common,
    button,
    notifications,
    walletModal,
    actionModal
  };
  const i18nDictionary = {
    en: parseDictionary(en),
    ru: parseDictionary(ru)
  };
  function parseDictionary(dictionary) {
    const refSymbol = "$";
    const iterate = (subDictionary) => {
      Object.entries(subDictionary).forEach(([key, value]) => {
        if (typeof value === "object" && value) {
          return iterate(value);
        }
        if (typeof value === "string") {
          if (value[0] === refSymbol) {
            const path = value.slice(1).split(".");
            let obj = dictionary;
            path.forEach((item) => {
              if (item in obj) {
                obj = obj[item];
              } else {
                throw new Error(
                  `Cannot parse translations: there is no property ${item} in translation`
                );
              }
            });
            subDictionary[key] = obj;
          }
          if (value.slice(0, 2) === `\\${refSymbol}`) {
            subDictionary[key] = value.slice(1);
          }
        }
      });
    };
    iterate(dictionary);
    return dictionary;
  }
  const ConnectorContext = createContext();
  const $RAW = Symbol("store-raw"), $NODE = Symbol("store-node"), $NAME = Symbol("store-name");
  function wrap$1(value, name) {
    let p2 = value[$PROXY];
    if (!p2) {
      Object.defineProperty(value, $PROXY, {
        value: p2 = new Proxy(value, proxyTraps$1)
      });
      if (!Array.isArray(value)) {
        const keys = Object.keys(value), desc = Object.getOwnPropertyDescriptors(value);
        for (let i2 = 0, l2 = keys.length; i2 < l2; i2++) {
          const prop = keys[i2];
          if (desc[prop].get) {
            Object.defineProperty(value, prop, {
              enumerable: desc[prop].enumerable,
              get: desc[prop].get.bind(p2)
            });
          }
        }
      }
    }
    return p2;
  }
  function isWrappable(obj) {
    let proto;
    return obj != null && typeof obj === "object" && (obj[$PROXY] || !(proto = Object.getPrototypeOf(obj)) || proto === Object.prototype || Array.isArray(obj));
  }
  function unwrap(item, set = /* @__PURE__ */ new Set()) {
    let result, unwrapped, v, prop;
    if (result = item != null && item[$RAW])
      return result;
    if (!isWrappable(item) || set.has(item))
      return item;
    if (Array.isArray(item)) {
      if (Object.isFrozen(item))
        item = item.slice(0);
      else
        set.add(item);
      for (let i2 = 0, l2 = item.length; i2 < l2; i2++) {
        v = item[i2];
        if ((unwrapped = unwrap(v, set)) !== v)
          item[i2] = unwrapped;
      }
    } else {
      if (Object.isFrozen(item))
        item = Object.assign({}, item);
      else
        set.add(item);
      const keys = Object.keys(item), desc = Object.getOwnPropertyDescriptors(item);
      for (let i2 = 0, l2 = keys.length; i2 < l2; i2++) {
        prop = keys[i2];
        if (desc[prop].get)
          continue;
        v = item[prop];
        if ((unwrapped = unwrap(v, set)) !== v)
          item[prop] = unwrapped;
      }
    }
    return item;
  }
  function getDataNodes(target) {
    let nodes = target[$NODE];
    if (!nodes)
      Object.defineProperty(target, $NODE, {
        value: nodes = {}
      });
    return nodes;
  }
  function getDataNode(nodes, property, value) {
    return nodes[property] || (nodes[property] = createDataNode(value));
  }
  function proxyDescriptor$1(target, property) {
    const desc = Reflect.getOwnPropertyDescriptor(target, property);
    if (!desc || desc.get || !desc.configurable || property === $PROXY || property === $NODE || property === $NAME)
      return desc;
    delete desc.value;
    delete desc.writable;
    desc.get = () => target[$PROXY][property];
    return desc;
  }
  function trackSelf(target) {
    if (getListener()) {
      const nodes = getDataNodes(target);
      (nodes._ || (nodes._ = createDataNode()))();
    }
  }
  function ownKeys(target) {
    trackSelf(target);
    return Reflect.ownKeys(target);
  }
  function createDataNode(value) {
    const [s2, set] = createSignal(value, {
      equals: false,
      internal: true
    });
    s2.$ = set;
    return s2;
  }
  const proxyTraps$1 = {
    get(target, property, receiver) {
      if (property === $RAW)
        return target;
      if (property === $PROXY)
        return receiver;
      if (property === $TRACK) {
        trackSelf(target);
        return receiver;
      }
      const nodes = getDataNodes(target);
      const tracked = nodes.hasOwnProperty(property);
      let value = tracked ? nodes[property]() : target[property];
      if (property === $NODE || property === "__proto__")
        return value;
      if (!tracked) {
        const desc = Object.getOwnPropertyDescriptor(target, property);
        if (getListener() && (typeof value !== "function" || target.hasOwnProperty(property)) && !(desc && desc.get))
          value = getDataNode(nodes, property, value)();
      }
      return isWrappable(value) ? wrap$1(value) : value;
    },
    has(target, property) {
      if (property === $RAW || property === $PROXY || property === $TRACK || property === $NODE || property === "__proto__")
        return true;
      this.get(target, property, target);
      return property in target;
    },
    set() {
      return true;
    },
    deleteProperty() {
      return true;
    },
    ownKeys,
    getOwnPropertyDescriptor: proxyDescriptor$1
  };
  function setProperty(state, property, value, deleting = false) {
    if (!deleting && state[property] === value)
      return;
    const prev = state[property], len = state.length;
    if (value === void 0)
      delete state[property];
    else
      state[property] = value;
    let nodes = getDataNodes(state), node;
    if (node = getDataNode(nodes, property, prev))
      node.$(() => value);
    if (Array.isArray(state) && state.length !== len)
      (node = getDataNode(nodes, "length", len)) && node.$(state.length);
    (node = nodes._) && node.$();
  }
  function mergeStoreNode(state, value) {
    const keys = Object.keys(value);
    for (let i2 = 0; i2 < keys.length; i2 += 1) {
      const key = keys[i2];
      setProperty(state, key, value[key]);
    }
  }
  function updateArray(current, next) {
    if (typeof next === "function")
      next = next(current);
    next = unwrap(next);
    if (Array.isArray(next)) {
      if (current === next)
        return;
      let i2 = 0, len = next.length;
      for (; i2 < len; i2++) {
        const value = next[i2];
        if (current[i2] !== value)
          setProperty(current, i2, value);
      }
      setProperty(current, "length", len);
    } else
      mergeStoreNode(current, next);
  }
  function updatePath(current, path, traversed = []) {
    let part, prev = current;
    if (path.length > 1) {
      part = path.shift();
      const partType = typeof part, isArray = Array.isArray(current);
      if (Array.isArray(part)) {
        for (let i2 = 0; i2 < part.length; i2++) {
          updatePath(current, [part[i2]].concat(path), traversed);
        }
        return;
      } else if (isArray && partType === "function") {
        for (let i2 = 0; i2 < current.length; i2++) {
          if (part(current[i2], i2))
            updatePath(current, [i2].concat(path), traversed);
        }
        return;
      } else if (isArray && partType === "object") {
        const {
          from = 0,
          to = current.length - 1,
          by = 1
        } = part;
        for (let i2 = from; i2 <= to; i2 += by) {
          updatePath(current, [i2].concat(path), traversed);
        }
        return;
      } else if (path.length > 1) {
        updatePath(current[part], path, [part].concat(traversed));
        return;
      }
      prev = current[part];
      traversed = [part].concat(traversed);
    }
    let value = path[0];
    if (typeof value === "function") {
      value = value(prev, traversed);
      if (value === prev)
        return;
    }
    if (part === void 0 && value == void 0)
      return;
    value = unwrap(value);
    if (part === void 0 || isWrappable(prev) && isWrappable(value) && !Array.isArray(value)) {
      mergeStoreNode(prev, value);
    } else
      setProperty(current, part, value);
  }
  function createStore(...[store, options]) {
    const unwrappedStore = unwrap(store || {});
    const isArray = Array.isArray(unwrappedStore);
    const wrappedStore = wrap$1(unwrappedStore);
    function setStore(...args) {
      batch(() => {
        isArray && args.length === 1 ? updateArray(unwrappedStore, args[0]) : updatePath(unwrappedStore, args);
      });
    }
    return [wrappedStore, setStore];
  }
  var THEME = /* @__PURE__ */ ((THEME2) => {
    THEME2["DARK"] = "DARK";
    THEME2["LIGHT"] = "LIGHT";
    return THEME2;
  })(THEME || {});
  const defaultLightColorsSet = {
    constant: {
      black: "#000000",
      white: "#FFFFFF"
    },
    connectButton: {
      background: "#31A6F5",
      foreground: "#FFFFFF"
    },
    accent: "#31A6F5",
    icon: {
      primary: "#0F0F0F",
      secondary: "#7A8999",
      tertiary: "#C1CAD2",
      success: "#29CC6A",
      error: "#F5A73B"
    },
    background: {
      primary: "#FFFFFF",
      secondary: "#F1F3F5",
      segment: "#FFFFFF"
    },
    text: {
      primary: "#0F0F0F",
      secondary: "#6A7785"
    }
  };
  const defaultDarkColorsSet = {
    constant: {
      black: "#000000",
      white: "#FFFFFF"
    },
    connectButton: {
      background: "#31A6F5",
      foreground: "#FFFFFF"
    },
    accent: "#E5E5EA",
    icon: {
      primary: "#E5E5EA",
      secondary: "#909099",
      tertiary: "#434347",
      success: "#29CC6A",
      error: "#F5A73B"
    },
    background: {
      primary: "#121214",
      secondary: "#18181A",
      segment: "#262629"
    },
    text: {
      primary: "#E5E5EA",
      secondary: "#7D7D85"
    }
  };
  /*!
   * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
   *
   * Copyright (c) 2014-2017, Jon Schlinkert.
   * Released under the MIT License.
   */
  function isObject(o2) {
    return Object.prototype.toString.call(o2) === "[object Object]";
  }
  function isPlainObject(o2) {
    var ctor, prot;
    if (isObject(o2) === false)
      return false;
    ctor = o2.constructor;
    if (ctor === void 0)
      return true;
    prot = ctor.prototype;
    if (isObject(prot) === false)
      return false;
    if (prot.hasOwnProperty("isPrototypeOf") === false) {
      return false;
    }
    return true;
  }
  function mergeOptions(options, defaultOptions) {
    if (!options) {
      return defaultOptions;
    }
    const overwriteMerge = (_, sourceArray, __) => sourceArray;
    return deepmerge__default.default(defaultOptions, options, {
      arrayMerge: overwriteMerge,
      isMergeableObject: isPlainObject
    });
  }
  const [themeState, setThemeState] = createStore({
    theme: THEME.LIGHT,
    colors: defaultLightColorsSet,
    borderRadius: "m"
  });
  const themeColorsMappingDefault = {
    [THEME.LIGHT]: defaultLightColorsSet,
    [THEME.DARK]: defaultDarkColorsSet
  };
  const themeCustomColors = {
    [THEME.LIGHT]: void 0,
    [THEME.DARK]: void 0
  };
  function setTheme(theme, colorsSet) {
    if (colorsSet) {
      themeCustomColors[THEME.DARK] = mergeOptions(
        colorsSet[THEME.DARK],
        themeCustomColors[THEME.DARK]
      );
      themeCustomColors[THEME.LIGHT] = mergeOptions(
        colorsSet[THEME.LIGHT],
        themeCustomColors[THEME.LIGHT]
      );
    }
    setThemeState({
      theme,
      colors: mergeOptions(themeCustomColors[theme], themeColorsMappingDefault[theme])
    });
  }
  function setBorderRadius(borderRadius) {
    setThemeState({ borderRadius });
  }
  function setColors(colorsSet) {
    themeCustomColors[THEME.DARK] = mergeOptions(
      colorsSet[THEME.DARK],
      themeCustomColors[THEME.DARK]
    );
    themeCustomColors[THEME.LIGHT] = mergeOptions(
      colorsSet[THEME.LIGHT],
      themeCustomColors[THEME.LIGHT]
    );
    setThemeState((state) => ({
      colors: mergeOptions(
        themeCustomColors[state.theme],
        themeColorsMappingDefault[state.theme]
      )
    }));
  }
  const globalStylesTag = "tc-root";
  const disableScrollClass = "tc-disable-scroll";
  const usingMouseClass = "tc-using-mouse";
  const GlobalStyles = () => {
    document.body.addEventListener("mousedown", () => document.body.classList.add(usingMouseClass));
    document.body.addEventListener("keydown", (event) => {
      if (event.key === "Tab") {
        document.body.classList.remove(usingMouseClass);
      }
    });
    const Styles = createGlobalStyles`
    ${globalStylesTag} * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        
        font-family: -apple-system, BlinkMacSystemFont, 'Roboto', 'Helvetica Neue', Arial, Tahoma, Verdana, sans-serif;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;        
        -webkit-tap-highlight-color: transparent;
    }
    
    ${globalStylesTag} img {
      -webkit-user-select: none;
      -webkit-touch-callout: none;
    }   
 
    ${globalStylesTag} *:focus {
        outline: #08f auto 2px;
    }
    
    ${globalStylesTag} li {
        list-style: none;
    }
    
    ${globalStylesTag} button {
        outline: none;
    }
    
    body.${disableScrollClass} {
        position: fixed; 
        overflow-y: scroll;
        right: 0;
        left: 0;
    }
    
    body.${usingMouseClass} ${globalStylesTag} *:focus {
        outline: none;
    }
`;
    return createComponent(Styles, {});
  };
  const ImagePlaceholder = styled.div`
    background-color: ${(props) => props.theme.colors.background.secondary};
`;
  const Image = (props) => {
    let imgRef;
    const [image, setImage] = createSignal(null);
    createEffect(() => {
      const img = new window.Image();
      img.src = props.src;
      img.alt = props.alt || "";
      img.setAttribute("draggable", "false");
      if (props.class) {
        img.classList.add(props.class);
      }
      if (img.complete) {
        return setImage(img);
      }
      img.addEventListener("load", () => setImage(img));
      return () => img.removeEventListener("load", () => setImage(img));
    });
    return [createComponent(Show, {
      get when() {
        return image();
      },
      get children() {
        return image();
      }
    }), createComponent(Show, {
      get when() {
        return !image();
      },
      get children() {
        return createComponent(ImagePlaceholder, {
          get ["class"]() {
            return props.class;
          },
          ref(r$) {
            const _ref$ = imgRef;
            typeof _ref$ === "function" ? _ref$(r$) : imgRef = r$;
          }
        });
      }
    })];
  };
  function hexToRgb(hex) {
    if (hex[0] === "#") {
      hex = hex.slice(1);
    }
    const bigint = parseInt(hex, 16);
    const r = bigint >> 16 & 255;
    const g = bigint >> 8 & 255;
    const b = bigint & 255;
    return [r, g, b].join(",");
  }
  function rgba(color, opacity) {
    if (color[0] === "#") {
      color = hexToRgb(color);
    }
    return `rgba(${color}, ${opacity})`;
  }
  function toPx(value) {
    return value.toString() + "px";
  }
  class TonConnectUIError extends sdk.TonConnectError {
    constructor(...args) {
      super(...args);
      Object.setPrototypeOf(this, TonConnectUIError.prototype);
    }
  }
  function openLink(href, target = "_self") {
    return window.open(href, target, "noreferrer noopener");
  }
  function openLinkBlank(href) {
    openLink(href, "_blank");
  }
  function getSystemTheme() {
    if (window.matchMedia && window.matchMedia("(prefers-color-scheme: light)").matches) {
      return THEME.LIGHT;
    }
    return THEME.DARK;
  }
  function subscribeToThemeChange(callback) {
    const handler = (event) => callback(event.matches ? THEME.DARK : THEME.LIGHT);
    window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change", handler);
    return () => window.matchMedia("(prefers-color-scheme: dark)").removeEventListener("change", handler);
  }
  function addQueryParameter(url, key, value) {
    const parsed = new URL(url);
    parsed.searchParams.append(key, value);
    return parsed.toString();
  }
  function addReturnStrategy(url, returnStrategy) {
    return addQueryParameter(url, "ret", returnStrategy);
  }
  function disableScroll() {
    if (document.documentElement.scrollHeight === document.documentElement.clientHeight) {
      return;
    }
    document.body.style.top = toPx(-document.documentElement.scrollTop);
    document.body.classList.add(disableScrollClass);
  }
  function enableScroll() {
    document.body.classList.remove(disableScrollClass);
    document.documentElement.scrollTo({ top: -parseFloat(getComputedStyle(document.body).top) });
    document.body.style.top = "auto";
  }
  function fixMobileSafariActiveTransition() {
    if (!document.body.hasAttribute("ontouchstart")) {
      document.body.setAttribute("ontouchstart", "");
    }
  }
  function defineStylesRoot() {
    customElements.define(globalStylesTag, class TcRootElement extends HTMLDivElement {
    }, {
      extends: "div"
    });
  }
  function preloadImages(images) {
    images.forEach((img) => {
      const node = new window.Image();
      node.src = img;
    });
  }
  function checkLocalStorageExists() {
    if (typeof localStorage === "undefined") {
      throw new TonConnectUIError(
        "window.localStorage is undefined. localStorage is required for TonConnectUI"
      );
    }
  }
  function getWindow$1() {
    if (typeof window !== "undefined") {
      return window;
    }
    return void 0;
  }
  function isMobileUserAgent() {
    let check = false;
    (function(a2) {
      if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(
        a2
      ) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(
        a2.slice(0, 4)
      ))
        check = true;
    })(navigator.userAgent || navigator.vendor || window.opera);
    return check;
  }
  function getUserAgent() {
    var _a2, _b;
    const results = new UAParser__default.default().getResult();
    const osName = (_a2 = results.os.name) == null ? void 0 : _a2.toLowerCase();
    let os;
    switch (true) {
      case osName === "ios":
        os = "ios";
        break;
      case osName === "android":
        os = "android";
        break;
      case osName === "mac os":
        os = "macos";
        break;
      case osName === "linux":
        os = "linux";
        break;
      case (osName == null ? void 0 : osName.includes("windows")):
        os = "windows";
        break;
    }
    const browserName = (_b = results.browser.name) == null ? void 0 : _b.toLowerCase();
    let browser;
    switch (true) {
      case browserName === "chrome":
        browser = "chrome";
        break;
      case browserName === "firefox":
        browser = "firefox";
        break;
      case (browserName == null ? void 0 : browserName.includes("safari")):
        browser = "safari";
        break;
    }
    return {
      os,
      browser
    };
  }
  const maxWidth = {
    mobile: 440,
    tablet: 1020
  };
  function isDevice(device) {
    const window2 = getWindow$1();
    if (!window2) {
      return device === "desktop";
    }
    const width = window2.innerWidth;
    switch (device) {
      case "desktop":
        return width > maxWidth.tablet;
      case "tablet":
        return width > maxWidth.mobile;
      default:
      case "mobile":
        return width <= maxWidth.mobile;
    }
  }
  function media(device) {
    switch (device) {
      case "mobile":
        return `@media (max-width: ${maxWidth.mobile}px)`;
      case "tablet":
        return `@media (max-width: ${maxWidth.tablet}px) (min-width: ${maxWidth.mobile}px)`;
      default:
      case "desktop":
        return `@media (min-width: ${maxWidth.tablet}px)`;
    }
  }
  const mediaTouch = "@media (hover: none)";
  const mediaNotTouch = "@media not all and (hover: none)";
  const borders$5 = {
    m: "100vh",
    s: "8px",
    none: "0"
  };
  const scaleValues = {
    s: 0.02,
    m: 0.04
  };
  const ButtonStyled$3 = styled.button`
    background-color: ${(props) => props.appearance === "flat" ? "transparent" : rgba(props.theme.colors.accent, 0.12)};
    color: ${(props) => props.theme.colors.accent};

    padding: ${(props) => props.appearance === "flat" ? "0" : "9px 16px"};
    border: none;
    border-radius: ${(props) => borders$5[props.theme.borderRadius]};
    cursor: ${(props) => props.disabled ? "not-allowed" : "pointer"};

    font-size: 14px;
    font-weight: 590;
    line-height: 18px;

    transition: transform 0.125s ease-in-out;

    ${mediaNotTouch} {
        &:hover {
            transform: ${(props) => props.disabled ? "unset" : `scale(${1 + scaleValues[props.scale]})`};
        }
    }

    &:active {
        transform: ${(props) => props.disabled ? "unset" : `scale(${1 - scaleValues[props.scale]})`};
    }

    ${mediaTouch} {
        &:active {
            transform: ${(props) => props.disabled ? "unset" : `scale(${1 - scaleValues[props.scale] * 2})`};
        }
    }
`;
  function useDataAttributes(props) {
    const keys = untrack(() => Object.keys(props).filter((key) => key.startsWith("data-")));
    const [dataAttrs] = splitProps(props, keys);
    return dataAttrs;
  }
  const Button = (props) => {
    const dataAttrs = useDataAttributes(props);
    return createComponent(ButtonStyled$3, mergeProps({
      get appearance() {
        return props.appearance || "primary";
      },
      get ["class"]() {
        return props.class;
      },
      onClick: (e2) => {
        var _a2;
        return (_a2 = props.onClick) == null ? void 0 : _a2.call(props, e2);
      },
      onMouseEnter: (e2) => {
        var _a2;
        return (_a2 = props.onMouseEnter) == null ? void 0 : _a2.call(props, e2);
      },
      onMouseLeave: (e2) => {
        var _a2;
        return (_a2 = props.onMouseLeave) == null ? void 0 : _a2.call(props, e2);
      },
      ref(r$) {
        const _ref$ = props.ref;
        typeof _ref$ === "function" ? _ref$(r$) : props.ref = r$;
      },
      get disabled() {
        return props.disabled;
      },
      get scale() {
        return props.scale || "m";
      },
      "data-tc-button": "true"
    }, dataAttrs, {
      get children() {
        return props.children;
      }
    }));
  };
  function nextFrame(fn) {
    requestAnimationFrame(() => {
      requestAnimationFrame(fn);
    });
  }
  const Transition = (props) => {
    let el;
    let first = true;
    const [s1, set1] = createSignal();
    const [s2, set2] = createSignal();
    const resolved = children(() => props.children);
    const {
      onBeforeEnter,
      onEnter,
      onAfterEnter,
      onBeforeExit,
      onExit,
      onAfterExit
    } = props;
    const classnames = createMemo(() => {
      const name = props.name || "s";
      return {
        enterActiveClass: props.enterActiveClass || name + "-enter-active",
        enterClass: props.enterClass || name + "-enter",
        enterToClass: props.enterToClass || name + "-enter-to",
        exitActiveClass: props.exitActiveClass || name + "-exit-active",
        exitClass: props.exitClass || name + "-exit",
        exitToClass: props.exitToClass || name + "-exit-to"
      };
    });
    function enterTransition(el2, prev) {
      if (!first || props.appear) {
        let endTransition = function(e2) {
          if (el2 && (!e2 || e2.target === el2)) {
            el2.removeEventListener("transitionend", endTransition);
            el2.removeEventListener("animationend", endTransition);
            el2.classList.remove(...enterActiveClasses);
            el2.classList.remove(...enterToClasses);
            batch(() => {
              s1() !== el2 && set1(el2);
              s2() === el2 && set2(void 0);
            });
            onAfterEnter && onAfterEnter(el2);
            if (props.mode === "inout")
              exitTransition(el2, prev);
          }
        };
        const enterClasses = classnames().enterClass.split(" ");
        const enterActiveClasses = classnames().enterActiveClass.split(" ");
        const enterToClasses = classnames().enterToClass.split(" ");
        onBeforeEnter && onBeforeEnter(el2);
        el2.classList.add(...enterClasses);
        el2.classList.add(...enterActiveClasses);
        nextFrame(() => {
          el2.classList.remove(...enterClasses);
          el2.classList.add(...enterToClasses);
          onEnter && onEnter(el2, () => endTransition());
          if (!onEnter || onEnter.length < 2) {
            el2.addEventListener("transitionend", endTransition);
            el2.addEventListener("animationend", endTransition);
          }
        });
      }
      prev && !props.mode ? set2(el2) : set1(el2);
    }
    function exitTransition(el2, prev) {
      const exitClasses = classnames().exitClass.split(" ");
      const exitActiveClasses = classnames().exitActiveClass.split(" ");
      const exitToClasses = classnames().exitToClass.split(" ");
      if (!prev.parentNode)
        return endTransition();
      onBeforeExit && onBeforeExit(prev);
      prev.classList.add(...exitClasses);
      prev.classList.add(...exitActiveClasses);
      nextFrame(() => {
        prev.classList.remove(...exitClasses);
        prev.classList.add(...exitToClasses);
      });
      onExit && onExit(prev, () => endTransition());
      if (!onExit || onExit.length < 2) {
        prev.addEventListener("transitionend", endTransition);
        prev.addEventListener("animationend", endTransition);
      }
      function endTransition(e2) {
        if (!e2 || e2.target === prev) {
          prev.removeEventListener("transitionend", endTransition);
          prev.removeEventListener("animationend", endTransition);
          prev.classList.remove(...exitActiveClasses);
          prev.classList.remove(...exitToClasses);
          s1() === prev && set1(void 0);
          onAfterExit && onAfterExit(prev);
          if (props.mode === "outin")
            enterTransition(el2, prev);
        }
      }
    }
    createComputed((prev) => {
      el = resolved();
      while (typeof el === "function")
        el = el();
      return untrack(() => {
        if (el && el !== prev) {
          if (props.mode !== "outin")
            enterTransition(el, prev);
          else if (first)
            set1(el);
        }
        if (prev && prev !== el && props.mode !== "inout")
          exitTransition(el, prev);
        first = false;
        return el;
      });
    });
    return [s1, s2];
  };
  function getRect(element) {
    const {
      top,
      bottom,
      left,
      right,
      width,
      height
    } = element.getBoundingClientRect();
    const parentRect = element.parentNode.getBoundingClientRect();
    return {
      top: top - parentRect.top,
      bottom,
      left: left - parentRect.left,
      right,
      width,
      height
    };
  }
  const TransitionGroup = (props) => {
    const resolved = children(() => props.children);
    const classnames = createMemo(() => {
      const name = props.name || "s";
      return {
        enterActiveClass: props.enterActiveClass || name + "-enter-active",
        enterClass: props.enterClass || name + "-enter",
        enterToClass: props.enterToClass || name + "-enter-to",
        exitActiveClass: props.exitActiveClass || name + "-exit-active",
        exitClass: props.exitClass || name + "-exit",
        exitToClass: props.exitToClass || name + "-exit-to",
        moveClass: props.moveClass || name + "-move"
      };
    });
    const {
      onBeforeEnter,
      onEnter,
      onAfterEnter,
      onBeforeExit,
      onExit,
      onAfterExit
    } = props;
    const [combined, setCombined] = createSignal();
    let p2 = [];
    let first = true;
    createComputed(() => {
      const c2 = resolved();
      const comb = [...c2];
      const next = new Set(c2);
      const prev = new Set(p2);
      const enterClasses = classnames().enterClass.split(" ");
      const enterActiveClasses = classnames().enterActiveClass.split(" ");
      const enterToClasses = classnames().enterToClass.split(" ");
      const exitClasses = classnames().exitClass.split(" ");
      const exitActiveClasses = classnames().exitActiveClass.split(" ");
      const exitToClasses = classnames().exitToClass.split(" ");
      for (let i2 = 0; i2 < c2.length; i2++) {
        const el = c2[i2];
        if (!first && !prev.has(el)) {
          let endTransition = function(e2) {
            if (el && (!e2 || e2.target === el)) {
              el.removeEventListener("transitionend", endTransition);
              el.removeEventListener("animationend", endTransition);
              el.classList.remove(...enterActiveClasses);
              el.classList.remove(...enterToClasses);
              onAfterEnter && onAfterEnter(el);
            }
          };
          onBeforeEnter && onBeforeEnter(el);
          el.classList.add(...enterClasses);
          el.classList.add(...enterActiveClasses);
          nextFrame(() => {
            el.classList.remove(...enterClasses);
            el.classList.add(...enterToClasses);
            onEnter && onEnter(el, () => endTransition());
            if (!onEnter || onEnter.length < 2) {
              el.addEventListener("transitionend", endTransition);
              el.addEventListener("animationend", endTransition);
            }
          });
        }
      }
      for (let i2 = 0; i2 < p2.length; i2++) {
        const old = p2[i2];
        if (!next.has(old) && old.parentNode) {
          let endTransition = function(e2) {
            if (!e2 || e2.target === old) {
              old.removeEventListener("transitionend", endTransition);
              old.removeEventListener("animationend", endTransition);
              old.classList.remove(...exitActiveClasses);
              old.classList.remove(...exitToClasses);
              onAfterExit && onAfterExit(old);
              p2 = p2.filter((i3) => i3 !== old);
              setCombined(p2);
            }
          };
          comb.splice(i2, 0, old);
          onBeforeExit && onBeforeExit(old);
          old.classList.add(...exitClasses);
          old.classList.add(...exitActiveClasses);
          nextFrame(() => {
            old.classList.remove(...exitClasses);
            old.classList.add(...exitToClasses);
          });
          onExit && onExit(old, () => endTransition());
          if (!onExit || onExit.length < 2) {
            old.addEventListener("transitionend", endTransition);
            old.addEventListener("animationend", endTransition);
          }
        }
      }
      p2 = comb;
      setCombined(comb);
    });
    createEffect((nodes) => {
      const c2 = combined();
      c2.forEach((child) => {
        let n2;
        if (!(n2 = nodes.get(child))) {
          nodes.set(child, n2 = {
            pos: getRect(child),
            new: !first
          });
        } else if (n2.new) {
          n2.new = false;
          n2.newPos = getRect(child);
        }
        if (n2.new) {
          child.addEventListener("transitionend", () => {
            n2.new = false;
            child.parentNode && (n2.newPos = getRect(child));
          }, {
            once: true
          });
        }
        n2.newPos && (n2.pos = n2.newPos);
        n2.newPos = getRect(child);
      });
      if (first) {
        first = false;
        return nodes;
      }
      c2.forEach((child) => {
        const c3 = nodes.get(child);
        const oldPos = c3.pos;
        const newPos = c3.newPos;
        const dx = oldPos.left - newPos.left;
        const dy = oldPos.top - newPos.top;
        if (dx || dy) {
          c3.moved = true;
          const s2 = child.style;
          s2.transform = `translate(${dx}px,${dy}px)`;
          s2.transitionDuration = "0s";
        }
      });
      document.body.offsetHeight;
      c2.forEach((child) => {
        const c3 = nodes.get(child);
        if (c3.moved) {
          let endTransition = function(e2) {
            if (e2 && e2.target !== child || !child.parentNode)
              return;
            if (!e2 || /transform$/.test(e2.propertyName)) {
              child.removeEventListener("transitionend", endTransition);
              child.classList.remove(...moveClasses);
            }
          };
          c3.moved = false;
          const s2 = child.style;
          const moveClasses = classnames().moveClass.split(" ");
          child.classList.add(...moveClasses);
          s2.transform = s2.transitionDuration = "";
          child.addEventListener("transitionend", endTransition);
        }
      });
      return nodes;
    }, /* @__PURE__ */ new Map());
    return combined;
  };
  function clickOutside$1(el, accessor) {
    const onClick = (e2) => {
      var _a2;
      return !el.contains(e2.target) && ((_a2 = accessor()) == null ? void 0 : _a2());
    };
    document.body.addEventListener("click", onClick);
    onCleanup(() => document.body.removeEventListener("click", onClick));
  }
  function escPressed(_, accessor) {
    const onKeyPress = (e2) => {
      var _a2, _b;
      if (e2.key === "Escape") {
        (_a2 = document.activeElement) == null ? void 0 : _a2.blur();
        (_b = accessor()) == null ? void 0 : _b();
      }
    };
    document.body.addEventListener("keydown", onKeyPress);
    onCleanup(() => document.body.removeEventListener("keydown", onKeyPress));
  }
  const _tmpl$$g = /* @__PURE__ */ template$1(`<svg><path d="M9.1 3.40012L5.5 8.0001L9.1 12.6001" stroke-width="1.8" stroke-linecap="round" stroke-linejoin="round"></path></svg>`, 4, true);
  const rotationDegrees = {
    left: 0,
    top: 90,
    right: 180,
    bottom: 270
  };
  const ArrowIcon = (props) => {
    const theme = useTheme();
    const fill = () => props.fill || theme.colors.icon.secondary;
    const direction = () => props.direction || "left";
    const Svg = styled("svg")`
        transform: rotate(${(props2) => rotationDegrees[props2.svgDirection]}deg);
        transition: transform 0.1s ease-in-out;
    `;
    return createComponent(Svg, {
      width: "16",
      height: "16",
      viewBox: "0 0 16 16",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      get svgDirection() {
        return direction();
      },
      get children() {
        const _el$ = _tmpl$$g.cloneNode(true);
        createRenderEffect(() => setAttribute(_el$, "stroke", fill()));
        return _el$;
      }
    });
  };
  const _tmpl$$f = /* @__PURE__ */ template$1(`<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M3.90003 3.89991L8.00002 7.9999M8.00002 7.9999L12.1 12.0999M8.00002 7.9999L12.1 3.8999M8.00002 7.9999L3.90002 12.0999" stroke-width="1.8" stroke-linecap="round" stroke-linejoin="round"></path></svg>`);
  const CloseIcon = (props) => {
    const theme = useTheme();
    const fill = () => props.fill || theme.colors.icon.secondary;
    return (() => {
      const _el$ = _tmpl$$f.cloneNode(true), _el$2 = _el$.firstChild;
      createRenderEffect(() => setAttribute(_el$2, "stroke", fill()));
      return _el$;
    })();
  };
  const IconButtonStyled = styled.button`
    padding: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    width: 32px;
    height: 32px;
    border-radius: 50%;
    background-color: ${(props) => props.theme.colors.background.secondary};
    border: none;
    cursor: pointer;

    transition: transform 0.125s ease-in-out;

    ${mediaNotTouch} {
        &:hover {
            transform: scale(1.04);
        }
    }

    &:active {
        transform: scale(0.96);
    }

    ${mediaTouch} {
        &:active {
            transform: scale(0.92);
        }
    }
`;
  const IconButton = (props) => {
    const dataAttrs = useDataAttributes(props);
    const icon = () => props.icon || "close";
    return createComponent(IconButtonStyled, mergeProps({
      get ["class"]() {
        return props.class;
      },
      onClick: () => props.onClick(),
      "data-tc-icon-button": "true"
    }, dataAttrs, {
      get children() {
        return [createComponent(Show, {
          get when() {
            return !!props.children;
          },
          get children() {
            return props.children;
          }
        }), createComponent(Show, {
          get when() {
            return !props.children;
          },
          get children() {
            return createComponent(Switch, {
              get children() {
                return [createComponent(Match, {
                  get when() {
                    return icon() === "close";
                  },
                  get children() {
                    return createComponent(CloseIcon, {
                      get fill() {
                        return props.fill;
                      }
                    });
                  }
                }), createComponent(Match, {
                  get when() {
                    return icon() === "arrow";
                  },
                  get children() {
                    return createComponent(ArrowIcon, {
                      get fill() {
                        return props.fill;
                      }
                    });
                  }
                })];
              }
            });
          }
        })];
      }
    }));
  };
  const ModalBackgroundStyled = styled.div`
    display: flex;
    align-items: center;
    justify-content: center;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.4);

    ${media("mobile")} {
        align-items: flex-end;
    }

    @media (min-width: ${maxWidth.mobile.toString()}px) and (max-height: 600px) {
        padding: 48px 0;
        align-items: flex-start;
        overflow: scroll;
    }
`;
  const ModalWrapperClass = u`
    position: relative;
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08), 0 16px 64px rgba(0, 0, 0, 0.16);
    min-height: 100px;
    width: 440px;
    padding: 44px 56px 24px;

    ${media("mobile")} {
        width: 100%;
    }
`;
  const CloseButtonStyled = styled(IconButton)`
    position: absolute;
    right: 16px;
    top: 16px;
`;
  const _tmpl$$e = /* @__PURE__ */ template$1(`<div></div>`);
  const clickOutside = clickOutside$1;
  const keyPressed = escPressed;
  const borders$4 = {
    m: "24px",
    s: "16px",
    none: "0"
  };
  const Modal = (props) => {
    const theme = useTheme();
    const dataAttrs = useDataAttributes(props);
    createEffect(() => {
      if (props.opened) {
        disableScroll();
      } else {
        enableScroll();
      }
    });
    return createComponent(Transition, {
      onBeforeEnter: (el) => {
        const duration = isDevice("mobile") ? 200 : 100;
        el.animate([{
          opacity: 0
        }, {
          opacity: 1
        }], {
          duration
        });
        if (isDevice("mobile")) {
          el.firstElementChild.animate([{
            transform: "translateY(390px)"
          }, {
            transform: "translateY(0)"
          }], {
            duration
          });
        }
      },
      onExit: (el, done) => {
        const duration = isDevice("mobile") ? 200 : 100;
        const backgroundAnimation = el.animate([{
          opacity: 1
        }, {
          opacity: 0
        }], {
          duration
        });
        if (isDevice("mobile")) {
          const contentAnimation = el.firstElementChild.animate([{
            transform: "translateY(0)"
          }, {
            transform: "translateY(390px)"
          }], {
            duration
          });
          Promise.all([backgroundAnimation.finished, contentAnimation.finished]).then(done);
        } else {
          backgroundAnimation.finished.then(done);
        }
      },
      get children() {
        return createComponent(Show, {
          get when() {
            return props.opened;
          },
          get children() {
            return createComponent(ModalBackgroundStyled, mergeProps({
              "data-tc-modal": "true"
            }, dataAttrs, {
              get children() {
                const _el$ = _tmpl$$e.cloneNode(true);
                use(keyPressed, _el$, () => () => props.onClose());
                use(clickOutside, _el$, () => () => props.onClose());
                insert(_el$, createComponent(CloseButtonStyled, {
                  icon: "close",
                  onClick: () => props.onClose()
                }), null);
                insert(_el$, () => props.children, null);
                createRenderEffect(() => className(_el$, cn__default.default(ModalWrapperClass, props.class, u`
                                background-color: ${theme.colors.background.primary};
                                border-radius: ${borders$4[theme.borderRadius]};

                                ${media("mobile")} {
                                    border-radius: ${borders$4[theme.borderRadius]}
                                        ${borders$4[theme.borderRadius]} 0 0;
                                }
                            `)));
                return _el$;
              }
            }));
          }
        });
      }
    });
  };
  const wrapperBorderRadius = {
    m: "22px",
    s: "12px",
    none: "0"
  };
  const sliderBorderRadius = {
    m: "18px",
    s: "8px",
    none: "0"
  };
  const TabBarStyled$1 = styled.div`
    display: grid;
    grid-template: 1fr / 1fr 1fr;
    width: fit-content;
    justify-items: center;
    gap: 4px;

    position: relative;
    padding: 4px;
    border-radius: ${(props) => wrapperBorderRadius[props.theme.borderRadius]};

    background-color: ${(props) => props.theme.colors.background.secondary};
`;
  const SliderStyled = styled.div`
    position: absolute;
    top: 4px;
    left: 4px;

    height: calc(100% - 8px);
    width: calc(50% - 4px);

    border-radius: ${(props) => sliderBorderRadius[props.theme.borderRadius]};
    background-color: ${(props) => props.theme.colors.background.segment};

    transform: ${(props) => props.right ? "translateX(100%)" : "translateX(0)"};

    transition: transform 0.13s ease-in-out;
`;
  const InputStyled = styled.input`
    display: none;
`;
  const LabelStyled = styled.label`
    padding: 9px 12px;
    z-index: 1;

    cursor: ${(props) => props.isActive ? "default" : "pointer"};

    transition: transform 0.13s ease-in-out;

    &:hover {
        transform: ${(props) => props.isActive ? "none" : "scale(1.025)"};
    }

    > * {
        ${(props) => !props.isActive ? `color: ${props.theme.colors.text.secondary};` : ""}
    }
`;
  const TabBar = (props) => {
    const groupName = "tabBar" + Math.floor(Math.random() * 1e4);
    return createComponent(TabBarStyled$1, {
      get ["class"]() {
        return props.class;
      },
      "data-tc-tab-bar": "true",
      get children() {
        return [createComponent(SliderStyled, {
          get right() {
            return props.selectedTabIndex === 1;
          }
        }), createComponent(LabelStyled, {
          get isActive() {
            return props.selectedTabIndex === 0;
          },
          get children() {
            return [createComponent(InputStyled, {
              type: "radio",
              name: groupName,
              get checked() {
                return props.selectedTabIndex === 0;
              },
              onInput: () => {
                var _a2;
                return (_a2 = props.onSelectedTabIndexChange) == null ? void 0 : _a2.call(props, 0);
              }
            }), createMemo(() => props.tab1)];
          }
        }), createComponent(LabelStyled, {
          get isActive() {
            return props.selectedTabIndex === 1;
          },
          get children() {
            return [createComponent(InputStyled, {
              type: "radio",
              get checked() {
                return props.selectedTabIndex === 1;
              },
              name: groupName,
              onInput: () => {
                var _a2;
                return (_a2 = props.onSelectedTabIndexChange) == null ? void 0 : _a2.call(props, 1);
              }
            }), createMemo(() => props.tab2)];
          }
        })];
      }
    });
  };
  const borders$3 = {
    m: "16px",
    s: "8px",
    none: "0"
  };
  const qrNormalSize = 256;
  const imgSizeDefault = 60;
  const picSizeDefault = 48;
  const qrPaddingTop = 24;
  const QrCodeBackground = styled.div`
    display: flex;
    align-items: center;
    position: relative;
    background-color: ${(props) => props.theme.colors.background.secondary};
    border-radius: ${(props) => borders$3[props.theme.borderRadius]};
    padding: ${toPx(qrPaddingTop)} 0;
    height: ${toPx(qrNormalSize + qrPaddingTop * 2)};
    width: 100%;

    overflow: hidden;
`;
  const QrCodeWrapper = styled.div`
    position: relative;

    width: fit-content;
    margin: 0 auto;

    > div:first-child {
        display: flex;
        align-items: center;
        justify-content: center;
    }

    rect {
        fill: transparent;
    }

    path {
        fill: ${(props) => props.theme.colors.text.primary};
    }
`;
  const ImageBackground = styled.div`
    position: absolute;
    width: ${toPx(imgSizeDefault)};
    height: ${toPx(imgSizeDefault)};
    background: ${(props) => props.theme.colors.background.secondary};

    display: flex;
    align-items: center;
    justify-content: center;
`;
  const ImageStyled$2 = styled(Image)`
    width: ${(props) => toPx(props.size)};
    height: ${(props) => toPx(props.size)};
    border-radius: 12px;
`;
  const CopyButtonStyled = styled(Button)`
    filter: drop-shadow(0px 2px 8px rgba(0, 0, 0, 0.08));
    position: absolute;
    bottom: 14px;
    left: 50%;

    transform: translate(-50%, 0);

    background-color: ${(props) => props.theme.colors.background.segment};
    color: ${(props) => props.theme.colors.text.primary};

    &:hover {
        transform: translate(-50%, 0) scale(1.04);
    }

    &:active {
        transform: translate(-50%, 0) scale(0.96);
    }
`;
  var qrcode$1 = { exports: {} };
  (function(module2, exports3) {
    var qrcode2 = function() {
      var qrcode3 = function(typeNumber, errorCorrectionLevel) {
        var PAD0 = 236;
        var PAD1 = 17;
        var _typeNumber = typeNumber;
        var _errorCorrectionLevel = QRErrorCorrectionLevel[errorCorrectionLevel];
        var _modules = null;
        var _moduleCount = 0;
        var _dataCache = null;
        var _dataList = [];
        var _this = {};
        var makeImpl = function(test, maskPattern) {
          _moduleCount = _typeNumber * 4 + 17;
          _modules = function(moduleCount) {
            var modules = new Array(moduleCount);
            for (var row = 0; row < moduleCount; row += 1) {
              modules[row] = new Array(moduleCount);
              for (var col = 0; col < moduleCount; col += 1) {
                modules[row][col] = null;
              }
            }
            return modules;
          }(_moduleCount);
          setupPositionProbePattern(0, 0);
          setupPositionProbePattern(_moduleCount - 7, 0);
          setupPositionProbePattern(0, _moduleCount - 7);
          setupPositionAdjustPattern();
          setupTimingPattern();
          setupTypeInfo(test, maskPattern);
          if (_typeNumber >= 7) {
            setupTypeNumber(test);
          }
          if (_dataCache == null) {
            _dataCache = createData(_typeNumber, _errorCorrectionLevel, _dataList);
          }
          mapData(_dataCache, maskPattern);
        };
        var setupPositionProbePattern = function(row, col) {
          for (var r = -1; r <= 7; r += 1) {
            if (row + r <= -1 || _moduleCount <= row + r)
              continue;
            for (var c2 = -1; c2 <= 7; c2 += 1) {
              if (col + c2 <= -1 || _moduleCount <= col + c2)
                continue;
              if (0 <= r && r <= 6 && (c2 == 0 || c2 == 6) || 0 <= c2 && c2 <= 6 && (r == 0 || r == 6) || 2 <= r && r <= 4 && 2 <= c2 && c2 <= 4) {
                _modules[row + r][col + c2] = true;
              } else {
                _modules[row + r][col + c2] = false;
              }
            }
          }
        };
        var getBestMaskPattern = function() {
          var minLostPoint = 0;
          var pattern = 0;
          for (var i2 = 0; i2 < 8; i2 += 1) {
            makeImpl(true, i2);
            var lostPoint = QRUtil.getLostPoint(_this);
            if (i2 == 0 || minLostPoint > lostPoint) {
              minLostPoint = lostPoint;
              pattern = i2;
            }
          }
          return pattern;
        };
        var setupTimingPattern = function() {
          for (var r = 8; r < _moduleCount - 8; r += 1) {
            if (_modules[r][6] != null) {
              continue;
            }
            _modules[r][6] = r % 2 == 0;
          }
          for (var c2 = 8; c2 < _moduleCount - 8; c2 += 1) {
            if (_modules[6][c2] != null) {
              continue;
            }
            _modules[6][c2] = c2 % 2 == 0;
          }
        };
        var setupPositionAdjustPattern = function() {
          var pos = QRUtil.getPatternPosition(_typeNumber);
          for (var i2 = 0; i2 < pos.length; i2 += 1) {
            for (var j = 0; j < pos.length; j += 1) {
              var row = pos[i2];
              var col = pos[j];
              if (_modules[row][col] != null) {
                continue;
              }
              for (var r = -2; r <= 2; r += 1) {
                for (var c2 = -2; c2 <= 2; c2 += 1) {
                  if (r == -2 || r == 2 || c2 == -2 || c2 == 2 || r == 0 && c2 == 0) {
                    _modules[row + r][col + c2] = true;
                  } else {
                    _modules[row + r][col + c2] = false;
                  }
                }
              }
            }
          }
        };
        var setupTypeNumber = function(test) {
          var bits = QRUtil.getBCHTypeNumber(_typeNumber);
          for (var i2 = 0; i2 < 18; i2 += 1) {
            var mod = !test && (bits >> i2 & 1) == 1;
            _modules[Math.floor(i2 / 3)][i2 % 3 + _moduleCount - 8 - 3] = mod;
          }
          for (var i2 = 0; i2 < 18; i2 += 1) {
            var mod = !test && (bits >> i2 & 1) == 1;
            _modules[i2 % 3 + _moduleCount - 8 - 3][Math.floor(i2 / 3)] = mod;
          }
        };
        var setupTypeInfo = function(test, maskPattern) {
          var data = _errorCorrectionLevel << 3 | maskPattern;
          var bits = QRUtil.getBCHTypeInfo(data);
          for (var i2 = 0; i2 < 15; i2 += 1) {
            var mod = !test && (bits >> i2 & 1) == 1;
            if (i2 < 6) {
              _modules[i2][8] = mod;
            } else if (i2 < 8) {
              _modules[i2 + 1][8] = mod;
            } else {
              _modules[_moduleCount - 15 + i2][8] = mod;
            }
          }
          for (var i2 = 0; i2 < 15; i2 += 1) {
            var mod = !test && (bits >> i2 & 1) == 1;
            if (i2 < 8) {
              _modules[8][_moduleCount - i2 - 1] = mod;
            } else if (i2 < 9) {
              _modules[8][15 - i2 - 1 + 1] = mod;
            } else {
              _modules[8][15 - i2 - 1] = mod;
            }
          }
          _modules[_moduleCount - 8][8] = !test;
        };
        var mapData = function(data, maskPattern) {
          var inc = -1;
          var row = _moduleCount - 1;
          var bitIndex = 7;
          var byteIndex = 0;
          var maskFunc = QRUtil.getMaskFunction(maskPattern);
          for (var col = _moduleCount - 1; col > 0; col -= 2) {
            if (col == 6)
              col -= 1;
            while (true) {
              for (var c2 = 0; c2 < 2; c2 += 1) {
                if (_modules[row][col - c2] == null) {
                  var dark = false;
                  if (byteIndex < data.length) {
                    dark = (data[byteIndex] >>> bitIndex & 1) == 1;
                  }
                  var mask = maskFunc(row, col - c2);
                  if (mask) {
                    dark = !dark;
                  }
                  _modules[row][col - c2] = dark;
                  bitIndex -= 1;
                  if (bitIndex == -1) {
                    byteIndex += 1;
                    bitIndex = 7;
                  }
                }
              }
              row += inc;
              if (row < 0 || _moduleCount <= row) {
                row -= inc;
                inc = -inc;
                break;
              }
            }
          }
        };
        var createBytes = function(buffer, rsBlocks) {
          var offset = 0;
          var maxDcCount = 0;
          var maxEcCount = 0;
          var dcdata = new Array(rsBlocks.length);
          var ecdata = new Array(rsBlocks.length);
          for (var r = 0; r < rsBlocks.length; r += 1) {
            var dcCount = rsBlocks[r].dataCount;
            var ecCount = rsBlocks[r].totalCount - dcCount;
            maxDcCount = Math.max(maxDcCount, dcCount);
            maxEcCount = Math.max(maxEcCount, ecCount);
            dcdata[r] = new Array(dcCount);
            for (var i2 = 0; i2 < dcdata[r].length; i2 += 1) {
              dcdata[r][i2] = 255 & buffer.getBuffer()[i2 + offset];
            }
            offset += dcCount;
            var rsPoly = QRUtil.getErrorCorrectPolynomial(ecCount);
            var rawPoly = qrPolynomial(dcdata[r], rsPoly.getLength() - 1);
            var modPoly = rawPoly.mod(rsPoly);
            ecdata[r] = new Array(rsPoly.getLength() - 1);
            for (var i2 = 0; i2 < ecdata[r].length; i2 += 1) {
              var modIndex = i2 + modPoly.getLength() - ecdata[r].length;
              ecdata[r][i2] = modIndex >= 0 ? modPoly.getAt(modIndex) : 0;
            }
          }
          var totalCodeCount = 0;
          for (var i2 = 0; i2 < rsBlocks.length; i2 += 1) {
            totalCodeCount += rsBlocks[i2].totalCount;
          }
          var data = new Array(totalCodeCount);
          var index = 0;
          for (var i2 = 0; i2 < maxDcCount; i2 += 1) {
            for (var r = 0; r < rsBlocks.length; r += 1) {
              if (i2 < dcdata[r].length) {
                data[index] = dcdata[r][i2];
                index += 1;
              }
            }
          }
          for (var i2 = 0; i2 < maxEcCount; i2 += 1) {
            for (var r = 0; r < rsBlocks.length; r += 1) {
              if (i2 < ecdata[r].length) {
                data[index] = ecdata[r][i2];
                index += 1;
              }
            }
          }
          return data;
        };
        var createData = function(typeNumber2, errorCorrectionLevel2, dataList) {
          var rsBlocks = QRRSBlock.getRSBlocks(typeNumber2, errorCorrectionLevel2);
          var buffer = qrBitBuffer();
          for (var i2 = 0; i2 < dataList.length; i2 += 1) {
            var data = dataList[i2];
            buffer.put(data.getMode(), 4);
            buffer.put(data.getLength(), QRUtil.getLengthInBits(data.getMode(), typeNumber2));
            data.write(buffer);
          }
          var totalDataCount = 0;
          for (var i2 = 0; i2 < rsBlocks.length; i2 += 1) {
            totalDataCount += rsBlocks[i2].dataCount;
          }
          if (buffer.getLengthInBits() > totalDataCount * 8) {
            throw "code length overflow. (" + buffer.getLengthInBits() + ">" + totalDataCount * 8 + ")";
          }
          if (buffer.getLengthInBits() + 4 <= totalDataCount * 8) {
            buffer.put(0, 4);
          }
          while (buffer.getLengthInBits() % 8 != 0) {
            buffer.putBit(false);
          }
          while (true) {
            if (buffer.getLengthInBits() >= totalDataCount * 8) {
              break;
            }
            buffer.put(PAD0, 8);
            if (buffer.getLengthInBits() >= totalDataCount * 8) {
              break;
            }
            buffer.put(PAD1, 8);
          }
          return createBytes(buffer, rsBlocks);
        };
        _this.addData = function(data, mode) {
          mode = mode || "Byte";
          var newData = null;
          switch (mode) {
            case "Numeric":
              newData = qrNumber(data);
              break;
            case "Alphanumeric":
              newData = qrAlphaNum(data);
              break;
            case "Byte":
              newData = qr8BitByte(data);
              break;
            case "Kanji":
              newData = qrKanji(data);
              break;
            default:
              throw "mode:" + mode;
          }
          _dataList.push(newData);
          _dataCache = null;
        };
        _this.isDark = function(row, col) {
          if (row < 0 || _moduleCount <= row || col < 0 || _moduleCount <= col) {
            throw row + "," + col;
          }
          return _modules[row][col];
        };
        _this.getModuleCount = function() {
          return _moduleCount;
        };
        _this.make = function() {
          if (_typeNumber < 1) {
            var typeNumber2 = 1;
            for (; typeNumber2 < 40; typeNumber2++) {
              var rsBlocks = QRRSBlock.getRSBlocks(typeNumber2, _errorCorrectionLevel);
              var buffer = qrBitBuffer();
              for (var i2 = 0; i2 < _dataList.length; i2++) {
                var data = _dataList[i2];
                buffer.put(data.getMode(), 4);
                buffer.put(data.getLength(), QRUtil.getLengthInBits(data.getMode(), typeNumber2));
                data.write(buffer);
              }
              var totalDataCount = 0;
              for (var i2 = 0; i2 < rsBlocks.length; i2++) {
                totalDataCount += rsBlocks[i2].dataCount;
              }
              if (buffer.getLengthInBits() <= totalDataCount * 8) {
                break;
              }
            }
            _typeNumber = typeNumber2;
          }
          makeImpl(false, getBestMaskPattern());
        };
        _this.createTableTag = function(cellSize, margin) {
          cellSize = cellSize || 2;
          margin = typeof margin == "undefined" ? cellSize * 4 : margin;
          var qrHtml = "";
          qrHtml += '<table style="';
          qrHtml += " border-width: 0px; border-style: none;";
          qrHtml += " border-collapse: collapse;";
          qrHtml += " padding: 0px; margin: " + margin + "px;";
          qrHtml += '">';
          qrHtml += "<tbody>";
          for (var r = 0; r < _this.getModuleCount(); r += 1) {
            qrHtml += "<tr>";
            for (var c2 = 0; c2 < _this.getModuleCount(); c2 += 1) {
              qrHtml += '<td style="';
              qrHtml += " border-width: 0px; border-style: none;";
              qrHtml += " border-collapse: collapse;";
              qrHtml += " padding: 0px; margin: 0px;";
              qrHtml += " width: " + cellSize + "px;";
              qrHtml += " height: " + cellSize + "px;";
              qrHtml += " background-color: ";
              qrHtml += _this.isDark(r, c2) ? "#000000" : "#ffffff";
              qrHtml += ";";
              qrHtml += '"/>';
            }
            qrHtml += "</tr>";
          }
          qrHtml += "</tbody>";
          qrHtml += "</table>";
          return qrHtml;
        };
        _this.createSvgTag = function(cellSize, margin, alt, title) {
          var opts = {};
          if (typeof arguments[0] == "object") {
            opts = arguments[0];
            cellSize = opts.cellSize;
            margin = opts.margin;
            alt = opts.alt;
            title = opts.title;
          }
          cellSize = cellSize || 2;
          margin = typeof margin == "undefined" ? cellSize * 4 : margin;
          alt = typeof alt === "string" ? { text: alt } : alt || {};
          alt.text = alt.text || null;
          alt.id = alt.text ? alt.id || "qrcode-description" : null;
          title = typeof title === "string" ? { text: title } : title || {};
          title.text = title.text || null;
          title.id = title.text ? title.id || "qrcode-title" : null;
          var size = _this.getModuleCount() * cellSize + margin * 2;
          var c2, mc, r, mr, qrSvg = "", rect;
          rect = "l" + cellSize + ",0 0," + cellSize + " -" + cellSize + ",0 0,-" + cellSize + "z ";
          qrSvg += '<svg version="1.1" xmlns="http://www.w3.org/2000/svg"';
          qrSvg += !opts.scalable ? ' width="' + size + 'px" height="' + size + 'px"' : "";
          qrSvg += ' viewBox="0 0 ' + size + " " + size + '" ';
          qrSvg += ' preserveAspectRatio="xMinYMin meet"';
          qrSvg += title.text || alt.text ? ' role="img" aria-labelledby="' + escapeXml([title.id, alt.id].join(" ").trim()) + '"' : "";
          qrSvg += ">";
          qrSvg += title.text ? '<title id="' + escapeXml(title.id) + '">' + escapeXml(title.text) + "</title>" : "";
          qrSvg += alt.text ? '<description id="' + escapeXml(alt.id) + '">' + escapeXml(alt.text) + "</description>" : "";
          qrSvg += '<rect width="100%" height="100%" fill="white" cx="0" cy="0"/>';
          qrSvg += '<path d="';
          for (r = 0; r < _this.getModuleCount(); r += 1) {
            mr = r * cellSize + margin;
            for (c2 = 0; c2 < _this.getModuleCount(); c2 += 1) {
              if (_this.isDark(r, c2)) {
                mc = c2 * cellSize + margin;
                qrSvg += "M" + mc + "," + mr + rect;
              }
            }
          }
          qrSvg += '" stroke="transparent" fill="black"/>';
          qrSvg += "</svg>";
          return qrSvg;
        };
        _this.createDataURL = function(cellSize, margin) {
          cellSize = cellSize || 2;
          margin = typeof margin == "undefined" ? cellSize * 4 : margin;
          var size = _this.getModuleCount() * cellSize + margin * 2;
          var min2 = margin;
          var max2 = size - margin;
          return createDataURL(size, size, function(x, y) {
            if (min2 <= x && x < max2 && min2 <= y && y < max2) {
              var c2 = Math.floor((x - min2) / cellSize);
              var r = Math.floor((y - min2) / cellSize);
              return _this.isDark(r, c2) ? 0 : 1;
            } else {
              return 1;
            }
          });
        };
        _this.createImgTag = function(cellSize, margin, alt) {
          cellSize = cellSize || 2;
          margin = typeof margin == "undefined" ? cellSize * 4 : margin;
          var size = _this.getModuleCount() * cellSize + margin * 2;
          var img = "";
          img += "<img";
          img += ' src="';
          img += _this.createDataURL(cellSize, margin);
          img += '"';
          img += ' width="';
          img += size;
          img += '"';
          img += ' height="';
          img += size;
          img += '"';
          if (alt) {
            img += ' alt="';
            img += escapeXml(alt);
            img += '"';
          }
          img += "/>";
          return img;
        };
        var escapeXml = function(s2) {
          var escaped = "";
          for (var i2 = 0; i2 < s2.length; i2 += 1) {
            var c2 = s2.charAt(i2);
            switch (c2) {
              case "<":
                escaped += "&lt;";
                break;
              case ">":
                escaped += "&gt;";
                break;
              case "&":
                escaped += "&amp;";
                break;
              case '"':
                escaped += "&quot;";
                break;
              default:
                escaped += c2;
                break;
            }
          }
          return escaped;
        };
        var _createHalfASCII = function(margin) {
          var cellSize = 1;
          margin = typeof margin == "undefined" ? cellSize * 2 : margin;
          var size = _this.getModuleCount() * cellSize + margin * 2;
          var min2 = margin;
          var max2 = size - margin;
          var y, x, r1, r2, p2;
          var blocks = {
            "\u2588\u2588": "\u2588",
            "\u2588 ": "\u2580",
            " \u2588": "\u2584",
            "  ": " "
          };
          var blocksLastLineNoMargin = {
            "\u2588\u2588": "\u2580",
            "\u2588 ": "\u2580",
            " \u2588": " ",
            "  ": " "
          };
          var ascii = "";
          for (y = 0; y < size; y += 2) {
            r1 = Math.floor((y - min2) / cellSize);
            r2 = Math.floor((y + 1 - min2) / cellSize);
            for (x = 0; x < size; x += 1) {
              p2 = "\u2588";
              if (min2 <= x && x < max2 && min2 <= y && y < max2 && _this.isDark(r1, Math.floor((x - min2) / cellSize))) {
                p2 = " ";
              }
              if (min2 <= x && x < max2 && min2 <= y + 1 && y + 1 < max2 && _this.isDark(r2, Math.floor((x - min2) / cellSize))) {
                p2 += " ";
              } else {
                p2 += "\u2588";
              }
              ascii += margin < 1 && y + 1 >= max2 ? blocksLastLineNoMargin[p2] : blocks[p2];
            }
            ascii += "\n";
          }
          if (size % 2 && margin > 0) {
            return ascii.substring(0, ascii.length - size - 1) + Array(size + 1).join("\u2580");
          }
          return ascii.substring(0, ascii.length - 1);
        };
        _this.createASCII = function(cellSize, margin) {
          cellSize = cellSize || 1;
          if (cellSize < 2) {
            return _createHalfASCII(margin);
          }
          cellSize -= 1;
          margin = typeof margin == "undefined" ? cellSize * 2 : margin;
          var size = _this.getModuleCount() * cellSize + margin * 2;
          var min2 = margin;
          var max2 = size - margin;
          var y, x, r, p2;
          var white = Array(cellSize + 1).join("\u2588\u2588");
          var black = Array(cellSize + 1).join("  ");
          var ascii = "";
          var line = "";
          for (y = 0; y < size; y += 1) {
            r = Math.floor((y - min2) / cellSize);
            line = "";
            for (x = 0; x < size; x += 1) {
              p2 = 1;
              if (min2 <= x && x < max2 && min2 <= y && y < max2 && _this.isDark(r, Math.floor((x - min2) / cellSize))) {
                p2 = 0;
              }
              line += p2 ? white : black;
            }
            for (r = 0; r < cellSize; r += 1) {
              ascii += line + "\n";
            }
          }
          return ascii.substring(0, ascii.length - 1);
        };
        _this.renderTo2dContext = function(context, cellSize) {
          cellSize = cellSize || 2;
          var length = _this.getModuleCount();
          for (var row = 0; row < length; row++) {
            for (var col = 0; col < length; col++) {
              context.fillStyle = _this.isDark(row, col) ? "black" : "white";
              context.fillRect(row * cellSize, col * cellSize, cellSize, cellSize);
            }
          }
        };
        return _this;
      };
      qrcode3.stringToBytesFuncs = {
        "default": function(s2) {
          var bytes = [];
          for (var i2 = 0; i2 < s2.length; i2 += 1) {
            var c2 = s2.charCodeAt(i2);
            bytes.push(c2 & 255);
          }
          return bytes;
        }
      };
      qrcode3.stringToBytes = qrcode3.stringToBytesFuncs["default"];
      qrcode3.createStringToBytes = function(unicodeData, numChars) {
        var unicodeMap = function() {
          var bin = base64DecodeInputStream(unicodeData);
          var read = function() {
            var b = bin.read();
            if (b == -1)
              throw "eof";
            return b;
          };
          var count = 0;
          var unicodeMap2 = {};
          while (true) {
            var b0 = bin.read();
            if (b0 == -1)
              break;
            var b1 = read();
            var b2 = read();
            var b3 = read();
            var k = String.fromCharCode(b0 << 8 | b1);
            var v = b2 << 8 | b3;
            unicodeMap2[k] = v;
            count += 1;
          }
          if (count != numChars) {
            throw count + " != " + numChars;
          }
          return unicodeMap2;
        }();
        var unknownChar = "?".charCodeAt(0);
        return function(s2) {
          var bytes = [];
          for (var i2 = 0; i2 < s2.length; i2 += 1) {
            var c2 = s2.charCodeAt(i2);
            if (c2 < 128) {
              bytes.push(c2);
            } else {
              var b = unicodeMap[s2.charAt(i2)];
              if (typeof b == "number") {
                if ((b & 255) == b) {
                  bytes.push(b);
                } else {
                  bytes.push(b >>> 8);
                  bytes.push(b & 255);
                }
              } else {
                bytes.push(unknownChar);
              }
            }
          }
          return bytes;
        };
      };
      var QRMode = {
        MODE_NUMBER: 1 << 0,
        MODE_ALPHA_NUM: 1 << 1,
        MODE_8BIT_BYTE: 1 << 2,
        MODE_KANJI: 1 << 3
      };
      var QRErrorCorrectionLevel = {
        L: 1,
        M: 0,
        Q: 3,
        H: 2
      };
      var QRMaskPattern = {
        PATTERN000: 0,
        PATTERN001: 1,
        PATTERN010: 2,
        PATTERN011: 3,
        PATTERN100: 4,
        PATTERN101: 5,
        PATTERN110: 6,
        PATTERN111: 7
      };
      var QRUtil = function() {
        var PATTERN_POSITION_TABLE = [
          [],
          [6, 18],
          [6, 22],
          [6, 26],
          [6, 30],
          [6, 34],
          [6, 22, 38],
          [6, 24, 42],
          [6, 26, 46],
          [6, 28, 50],
          [6, 30, 54],
          [6, 32, 58],
          [6, 34, 62],
          [6, 26, 46, 66],
          [6, 26, 48, 70],
          [6, 26, 50, 74],
          [6, 30, 54, 78],
          [6, 30, 56, 82],
          [6, 30, 58, 86],
          [6, 34, 62, 90],
          [6, 28, 50, 72, 94],
          [6, 26, 50, 74, 98],
          [6, 30, 54, 78, 102],
          [6, 28, 54, 80, 106],
          [6, 32, 58, 84, 110],
          [6, 30, 58, 86, 114],
          [6, 34, 62, 90, 118],
          [6, 26, 50, 74, 98, 122],
          [6, 30, 54, 78, 102, 126],
          [6, 26, 52, 78, 104, 130],
          [6, 30, 56, 82, 108, 134],
          [6, 34, 60, 86, 112, 138],
          [6, 30, 58, 86, 114, 142],
          [6, 34, 62, 90, 118, 146],
          [6, 30, 54, 78, 102, 126, 150],
          [6, 24, 50, 76, 102, 128, 154],
          [6, 28, 54, 80, 106, 132, 158],
          [6, 32, 58, 84, 110, 136, 162],
          [6, 26, 54, 82, 110, 138, 166],
          [6, 30, 58, 86, 114, 142, 170]
        ];
        var G15 = 1 << 10 | 1 << 8 | 1 << 5 | 1 << 4 | 1 << 2 | 1 << 1 | 1 << 0;
        var G18 = 1 << 12 | 1 << 11 | 1 << 10 | 1 << 9 | 1 << 8 | 1 << 5 | 1 << 2 | 1 << 0;
        var G15_MASK = 1 << 14 | 1 << 12 | 1 << 10 | 1 << 4 | 1 << 1;
        var _this = {};
        var getBCHDigit = function(data) {
          var digit = 0;
          while (data != 0) {
            digit += 1;
            data >>>= 1;
          }
          return digit;
        };
        _this.getBCHTypeInfo = function(data) {
          var d = data << 10;
          while (getBCHDigit(d) - getBCHDigit(G15) >= 0) {
            d ^= G15 << getBCHDigit(d) - getBCHDigit(G15);
          }
          return (data << 10 | d) ^ G15_MASK;
        };
        _this.getBCHTypeNumber = function(data) {
          var d = data << 12;
          while (getBCHDigit(d) - getBCHDigit(G18) >= 0) {
            d ^= G18 << getBCHDigit(d) - getBCHDigit(G18);
          }
          return data << 12 | d;
        };
        _this.getPatternPosition = function(typeNumber) {
          return PATTERN_POSITION_TABLE[typeNumber - 1];
        };
        _this.getMaskFunction = function(maskPattern) {
          switch (maskPattern) {
            case QRMaskPattern.PATTERN000:
              return function(i2, j) {
                return (i2 + j) % 2 == 0;
              };
            case QRMaskPattern.PATTERN001:
              return function(i2, j) {
                return i2 % 2 == 0;
              };
            case QRMaskPattern.PATTERN010:
              return function(i2, j) {
                return j % 3 == 0;
              };
            case QRMaskPattern.PATTERN011:
              return function(i2, j) {
                return (i2 + j) % 3 == 0;
              };
            case QRMaskPattern.PATTERN100:
              return function(i2, j) {
                return (Math.floor(i2 / 2) + Math.floor(j / 3)) % 2 == 0;
              };
            case QRMaskPattern.PATTERN101:
              return function(i2, j) {
                return i2 * j % 2 + i2 * j % 3 == 0;
              };
            case QRMaskPattern.PATTERN110:
              return function(i2, j) {
                return (i2 * j % 2 + i2 * j % 3) % 2 == 0;
              };
            case QRMaskPattern.PATTERN111:
              return function(i2, j) {
                return (i2 * j % 3 + (i2 + j) % 2) % 2 == 0;
              };
            default:
              throw "bad maskPattern:" + maskPattern;
          }
        };
        _this.getErrorCorrectPolynomial = function(errorCorrectLength) {
          var a2 = qrPolynomial([1], 0);
          for (var i2 = 0; i2 < errorCorrectLength; i2 += 1) {
            a2 = a2.multiply(qrPolynomial([1, QRMath.gexp(i2)], 0));
          }
          return a2;
        };
        _this.getLengthInBits = function(mode, type) {
          if (1 <= type && type < 10) {
            switch (mode) {
              case QRMode.MODE_NUMBER:
                return 10;
              case QRMode.MODE_ALPHA_NUM:
                return 9;
              case QRMode.MODE_8BIT_BYTE:
                return 8;
              case QRMode.MODE_KANJI:
                return 8;
              default:
                throw "mode:" + mode;
            }
          } else if (type < 27) {
            switch (mode) {
              case QRMode.MODE_NUMBER:
                return 12;
              case QRMode.MODE_ALPHA_NUM:
                return 11;
              case QRMode.MODE_8BIT_BYTE:
                return 16;
              case QRMode.MODE_KANJI:
                return 10;
              default:
                throw "mode:" + mode;
            }
          } else if (type < 41) {
            switch (mode) {
              case QRMode.MODE_NUMBER:
                return 14;
              case QRMode.MODE_ALPHA_NUM:
                return 13;
              case QRMode.MODE_8BIT_BYTE:
                return 16;
              case QRMode.MODE_KANJI:
                return 12;
              default:
                throw "mode:" + mode;
            }
          } else {
            throw "type:" + type;
          }
        };
        _this.getLostPoint = function(qrcode4) {
          var moduleCount = qrcode4.getModuleCount();
          var lostPoint = 0;
          for (var row = 0; row < moduleCount; row += 1) {
            for (var col = 0; col < moduleCount; col += 1) {
              var sameCount = 0;
              var dark = qrcode4.isDark(row, col);
              for (var r = -1; r <= 1; r += 1) {
                if (row + r < 0 || moduleCount <= row + r) {
                  continue;
                }
                for (var c2 = -1; c2 <= 1; c2 += 1) {
                  if (col + c2 < 0 || moduleCount <= col + c2) {
                    continue;
                  }
                  if (r == 0 && c2 == 0) {
                    continue;
                  }
                  if (dark == qrcode4.isDark(row + r, col + c2)) {
                    sameCount += 1;
                  }
                }
              }
              if (sameCount > 5) {
                lostPoint += 3 + sameCount - 5;
              }
            }
          }
          for (var row = 0; row < moduleCount - 1; row += 1) {
            for (var col = 0; col < moduleCount - 1; col += 1) {
              var count = 0;
              if (qrcode4.isDark(row, col))
                count += 1;
              if (qrcode4.isDark(row + 1, col))
                count += 1;
              if (qrcode4.isDark(row, col + 1))
                count += 1;
              if (qrcode4.isDark(row + 1, col + 1))
                count += 1;
              if (count == 0 || count == 4) {
                lostPoint += 3;
              }
            }
          }
          for (var row = 0; row < moduleCount; row += 1) {
            for (var col = 0; col < moduleCount - 6; col += 1) {
              if (qrcode4.isDark(row, col) && !qrcode4.isDark(row, col + 1) && qrcode4.isDark(row, col + 2) && qrcode4.isDark(row, col + 3) && qrcode4.isDark(row, col + 4) && !qrcode4.isDark(row, col + 5) && qrcode4.isDark(row, col + 6)) {
                lostPoint += 40;
              }
            }
          }
          for (var col = 0; col < moduleCount; col += 1) {
            for (var row = 0; row < moduleCount - 6; row += 1) {
              if (qrcode4.isDark(row, col) && !qrcode4.isDark(row + 1, col) && qrcode4.isDark(row + 2, col) && qrcode4.isDark(row + 3, col) && qrcode4.isDark(row + 4, col) && !qrcode4.isDark(row + 5, col) && qrcode4.isDark(row + 6, col)) {
                lostPoint += 40;
              }
            }
          }
          var darkCount = 0;
          for (var col = 0; col < moduleCount; col += 1) {
            for (var row = 0; row < moduleCount; row += 1) {
              if (qrcode4.isDark(row, col)) {
                darkCount += 1;
              }
            }
          }
          var ratio = Math.abs(100 * darkCount / moduleCount / moduleCount - 50) / 5;
          lostPoint += ratio * 10;
          return lostPoint;
        };
        return _this;
      }();
      var QRMath = function() {
        var EXP_TABLE = new Array(256);
        var LOG_TABLE = new Array(256);
        for (var i2 = 0; i2 < 8; i2 += 1) {
          EXP_TABLE[i2] = 1 << i2;
        }
        for (var i2 = 8; i2 < 256; i2 += 1) {
          EXP_TABLE[i2] = EXP_TABLE[i2 - 4] ^ EXP_TABLE[i2 - 5] ^ EXP_TABLE[i2 - 6] ^ EXP_TABLE[i2 - 8];
        }
        for (var i2 = 0; i2 < 255; i2 += 1) {
          LOG_TABLE[EXP_TABLE[i2]] = i2;
        }
        var _this = {};
        _this.glog = function(n2) {
          if (n2 < 1) {
            throw "glog(" + n2 + ")";
          }
          return LOG_TABLE[n2];
        };
        _this.gexp = function(n2) {
          while (n2 < 0) {
            n2 += 255;
          }
          while (n2 >= 256) {
            n2 -= 255;
          }
          return EXP_TABLE[n2];
        };
        return _this;
      }();
      function qrPolynomial(num, shift) {
        if (typeof num.length == "undefined") {
          throw num.length + "/" + shift;
        }
        var _num = function() {
          var offset = 0;
          while (offset < num.length && num[offset] == 0) {
            offset += 1;
          }
          var _num2 = new Array(num.length - offset + shift);
          for (var i2 = 0; i2 < num.length - offset; i2 += 1) {
            _num2[i2] = num[i2 + offset];
          }
          return _num2;
        }();
        var _this = {};
        _this.getAt = function(index) {
          return _num[index];
        };
        _this.getLength = function() {
          return _num.length;
        };
        _this.multiply = function(e2) {
          var num2 = new Array(_this.getLength() + e2.getLength() - 1);
          for (var i2 = 0; i2 < _this.getLength(); i2 += 1) {
            for (var j = 0; j < e2.getLength(); j += 1) {
              num2[i2 + j] ^= QRMath.gexp(QRMath.glog(_this.getAt(i2)) + QRMath.glog(e2.getAt(j)));
            }
          }
          return qrPolynomial(num2, 0);
        };
        _this.mod = function(e2) {
          if (_this.getLength() - e2.getLength() < 0) {
            return _this;
          }
          var ratio = QRMath.glog(_this.getAt(0)) - QRMath.glog(e2.getAt(0));
          var num2 = new Array(_this.getLength());
          for (var i2 = 0; i2 < _this.getLength(); i2 += 1) {
            num2[i2] = _this.getAt(i2);
          }
          for (var i2 = 0; i2 < e2.getLength(); i2 += 1) {
            num2[i2] ^= QRMath.gexp(QRMath.glog(e2.getAt(i2)) + ratio);
          }
          return qrPolynomial(num2, 0).mod(e2);
        };
        return _this;
      }
      var QRRSBlock = function() {
        var RS_BLOCK_TABLE = [
          [1, 26, 19],
          [1, 26, 16],
          [1, 26, 13],
          [1, 26, 9],
          [1, 44, 34],
          [1, 44, 28],
          [1, 44, 22],
          [1, 44, 16],
          [1, 70, 55],
          [1, 70, 44],
          [2, 35, 17],
          [2, 35, 13],
          [1, 100, 80],
          [2, 50, 32],
          [2, 50, 24],
          [4, 25, 9],
          [1, 134, 108],
          [2, 67, 43],
          [2, 33, 15, 2, 34, 16],
          [2, 33, 11, 2, 34, 12],
          [2, 86, 68],
          [4, 43, 27],
          [4, 43, 19],
          [4, 43, 15],
          [2, 98, 78],
          [4, 49, 31],
          [2, 32, 14, 4, 33, 15],
          [4, 39, 13, 1, 40, 14],
          [2, 121, 97],
          [2, 60, 38, 2, 61, 39],
          [4, 40, 18, 2, 41, 19],
          [4, 40, 14, 2, 41, 15],
          [2, 146, 116],
          [3, 58, 36, 2, 59, 37],
          [4, 36, 16, 4, 37, 17],
          [4, 36, 12, 4, 37, 13],
          [2, 86, 68, 2, 87, 69],
          [4, 69, 43, 1, 70, 44],
          [6, 43, 19, 2, 44, 20],
          [6, 43, 15, 2, 44, 16],
          [4, 101, 81],
          [1, 80, 50, 4, 81, 51],
          [4, 50, 22, 4, 51, 23],
          [3, 36, 12, 8, 37, 13],
          [2, 116, 92, 2, 117, 93],
          [6, 58, 36, 2, 59, 37],
          [4, 46, 20, 6, 47, 21],
          [7, 42, 14, 4, 43, 15],
          [4, 133, 107],
          [8, 59, 37, 1, 60, 38],
          [8, 44, 20, 4, 45, 21],
          [12, 33, 11, 4, 34, 12],
          [3, 145, 115, 1, 146, 116],
          [4, 64, 40, 5, 65, 41],
          [11, 36, 16, 5, 37, 17],
          [11, 36, 12, 5, 37, 13],
          [5, 109, 87, 1, 110, 88],
          [5, 65, 41, 5, 66, 42],
          [5, 54, 24, 7, 55, 25],
          [11, 36, 12, 7, 37, 13],
          [5, 122, 98, 1, 123, 99],
          [7, 73, 45, 3, 74, 46],
          [15, 43, 19, 2, 44, 20],
          [3, 45, 15, 13, 46, 16],
          [1, 135, 107, 5, 136, 108],
          [10, 74, 46, 1, 75, 47],
          [1, 50, 22, 15, 51, 23],
          [2, 42, 14, 17, 43, 15],
          [5, 150, 120, 1, 151, 121],
          [9, 69, 43, 4, 70, 44],
          [17, 50, 22, 1, 51, 23],
          [2, 42, 14, 19, 43, 15],
          [3, 141, 113, 4, 142, 114],
          [3, 70, 44, 11, 71, 45],
          [17, 47, 21, 4, 48, 22],
          [9, 39, 13, 16, 40, 14],
          [3, 135, 107, 5, 136, 108],
          [3, 67, 41, 13, 68, 42],
          [15, 54, 24, 5, 55, 25],
          [15, 43, 15, 10, 44, 16],
          [4, 144, 116, 4, 145, 117],
          [17, 68, 42],
          [17, 50, 22, 6, 51, 23],
          [19, 46, 16, 6, 47, 17],
          [2, 139, 111, 7, 140, 112],
          [17, 74, 46],
          [7, 54, 24, 16, 55, 25],
          [34, 37, 13],
          [4, 151, 121, 5, 152, 122],
          [4, 75, 47, 14, 76, 48],
          [11, 54, 24, 14, 55, 25],
          [16, 45, 15, 14, 46, 16],
          [6, 147, 117, 4, 148, 118],
          [6, 73, 45, 14, 74, 46],
          [11, 54, 24, 16, 55, 25],
          [30, 46, 16, 2, 47, 17],
          [8, 132, 106, 4, 133, 107],
          [8, 75, 47, 13, 76, 48],
          [7, 54, 24, 22, 55, 25],
          [22, 45, 15, 13, 46, 16],
          [10, 142, 114, 2, 143, 115],
          [19, 74, 46, 4, 75, 47],
          [28, 50, 22, 6, 51, 23],
          [33, 46, 16, 4, 47, 17],
          [8, 152, 122, 4, 153, 123],
          [22, 73, 45, 3, 74, 46],
          [8, 53, 23, 26, 54, 24],
          [12, 45, 15, 28, 46, 16],
          [3, 147, 117, 10, 148, 118],
          [3, 73, 45, 23, 74, 46],
          [4, 54, 24, 31, 55, 25],
          [11, 45, 15, 31, 46, 16],
          [7, 146, 116, 7, 147, 117],
          [21, 73, 45, 7, 74, 46],
          [1, 53, 23, 37, 54, 24],
          [19, 45, 15, 26, 46, 16],
          [5, 145, 115, 10, 146, 116],
          [19, 75, 47, 10, 76, 48],
          [15, 54, 24, 25, 55, 25],
          [23, 45, 15, 25, 46, 16],
          [13, 145, 115, 3, 146, 116],
          [2, 74, 46, 29, 75, 47],
          [42, 54, 24, 1, 55, 25],
          [23, 45, 15, 28, 46, 16],
          [17, 145, 115],
          [10, 74, 46, 23, 75, 47],
          [10, 54, 24, 35, 55, 25],
          [19, 45, 15, 35, 46, 16],
          [17, 145, 115, 1, 146, 116],
          [14, 74, 46, 21, 75, 47],
          [29, 54, 24, 19, 55, 25],
          [11, 45, 15, 46, 46, 16],
          [13, 145, 115, 6, 146, 116],
          [14, 74, 46, 23, 75, 47],
          [44, 54, 24, 7, 55, 25],
          [59, 46, 16, 1, 47, 17],
          [12, 151, 121, 7, 152, 122],
          [12, 75, 47, 26, 76, 48],
          [39, 54, 24, 14, 55, 25],
          [22, 45, 15, 41, 46, 16],
          [6, 151, 121, 14, 152, 122],
          [6, 75, 47, 34, 76, 48],
          [46, 54, 24, 10, 55, 25],
          [2, 45, 15, 64, 46, 16],
          [17, 152, 122, 4, 153, 123],
          [29, 74, 46, 14, 75, 47],
          [49, 54, 24, 10, 55, 25],
          [24, 45, 15, 46, 46, 16],
          [4, 152, 122, 18, 153, 123],
          [13, 74, 46, 32, 75, 47],
          [48, 54, 24, 14, 55, 25],
          [42, 45, 15, 32, 46, 16],
          [20, 147, 117, 4, 148, 118],
          [40, 75, 47, 7, 76, 48],
          [43, 54, 24, 22, 55, 25],
          [10, 45, 15, 67, 46, 16],
          [19, 148, 118, 6, 149, 119],
          [18, 75, 47, 31, 76, 48],
          [34, 54, 24, 34, 55, 25],
          [20, 45, 15, 61, 46, 16]
        ];
        var qrRSBlock = function(totalCount, dataCount) {
          var _this2 = {};
          _this2.totalCount = totalCount;
          _this2.dataCount = dataCount;
          return _this2;
        };
        var _this = {};
        var getRsBlockTable = function(typeNumber, errorCorrectionLevel) {
          switch (errorCorrectionLevel) {
            case QRErrorCorrectionLevel.L:
              return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 0];
            case QRErrorCorrectionLevel.M:
              return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 1];
            case QRErrorCorrectionLevel.Q:
              return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 2];
            case QRErrorCorrectionLevel.H:
              return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 3];
            default:
              return void 0;
          }
        };
        _this.getRSBlocks = function(typeNumber, errorCorrectionLevel) {
          var rsBlock = getRsBlockTable(typeNumber, errorCorrectionLevel);
          if (typeof rsBlock == "undefined") {
            throw "bad rs block @ typeNumber:" + typeNumber + "/errorCorrectionLevel:" + errorCorrectionLevel;
          }
          var length = rsBlock.length / 3;
          var list = [];
          for (var i2 = 0; i2 < length; i2 += 1) {
            var count = rsBlock[i2 * 3 + 0];
            var totalCount = rsBlock[i2 * 3 + 1];
            var dataCount = rsBlock[i2 * 3 + 2];
            for (var j = 0; j < count; j += 1) {
              list.push(qrRSBlock(totalCount, dataCount));
            }
          }
          return list;
        };
        return _this;
      }();
      var qrBitBuffer = function() {
        var _buffer = [];
        var _length = 0;
        var _this = {};
        _this.getBuffer = function() {
          return _buffer;
        };
        _this.getAt = function(index) {
          var bufIndex = Math.floor(index / 8);
          return (_buffer[bufIndex] >>> 7 - index % 8 & 1) == 1;
        };
        _this.put = function(num, length) {
          for (var i2 = 0; i2 < length; i2 += 1) {
            _this.putBit((num >>> length - i2 - 1 & 1) == 1);
          }
        };
        _this.getLengthInBits = function() {
          return _length;
        };
        _this.putBit = function(bit) {
          var bufIndex = Math.floor(_length / 8);
          if (_buffer.length <= bufIndex) {
            _buffer.push(0);
          }
          if (bit) {
            _buffer[bufIndex] |= 128 >>> _length % 8;
          }
          _length += 1;
        };
        return _this;
      };
      var qrNumber = function(data) {
        var _mode = QRMode.MODE_NUMBER;
        var _data = data;
        var _this = {};
        _this.getMode = function() {
          return _mode;
        };
        _this.getLength = function(buffer) {
          return _data.length;
        };
        _this.write = function(buffer) {
          var data2 = _data;
          var i2 = 0;
          while (i2 + 2 < data2.length) {
            buffer.put(strToNum(data2.substring(i2, i2 + 3)), 10);
            i2 += 3;
          }
          if (i2 < data2.length) {
            if (data2.length - i2 == 1) {
              buffer.put(strToNum(data2.substring(i2, i2 + 1)), 4);
            } else if (data2.length - i2 == 2) {
              buffer.put(strToNum(data2.substring(i2, i2 + 2)), 7);
            }
          }
        };
        var strToNum = function(s2) {
          var num = 0;
          for (var i2 = 0; i2 < s2.length; i2 += 1) {
            num = num * 10 + chatToNum(s2.charAt(i2));
          }
          return num;
        };
        var chatToNum = function(c2) {
          if ("0" <= c2 && c2 <= "9") {
            return c2.charCodeAt(0) - "0".charCodeAt(0);
          }
          throw "illegal char :" + c2;
        };
        return _this;
      };
      var qrAlphaNum = function(data) {
        var _mode = QRMode.MODE_ALPHA_NUM;
        var _data = data;
        var _this = {};
        _this.getMode = function() {
          return _mode;
        };
        _this.getLength = function(buffer) {
          return _data.length;
        };
        _this.write = function(buffer) {
          var s2 = _data;
          var i2 = 0;
          while (i2 + 1 < s2.length) {
            buffer.put(
              getCode(s2.charAt(i2)) * 45 + getCode(s2.charAt(i2 + 1)),
              11
            );
            i2 += 2;
          }
          if (i2 < s2.length) {
            buffer.put(getCode(s2.charAt(i2)), 6);
          }
        };
        var getCode = function(c2) {
          if ("0" <= c2 && c2 <= "9") {
            return c2.charCodeAt(0) - "0".charCodeAt(0);
          } else if ("A" <= c2 && c2 <= "Z") {
            return c2.charCodeAt(0) - "A".charCodeAt(0) + 10;
          } else {
            switch (c2) {
              case " ":
                return 36;
              case "$":
                return 37;
              case "%":
                return 38;
              case "*":
                return 39;
              case "+":
                return 40;
              case "-":
                return 41;
              case ".":
                return 42;
              case "/":
                return 43;
              case ":":
                return 44;
              default:
                throw "illegal char :" + c2;
            }
          }
        };
        return _this;
      };
      var qr8BitByte = function(data) {
        var _mode = QRMode.MODE_8BIT_BYTE;
        var _bytes = qrcode3.stringToBytes(data);
        var _this = {};
        _this.getMode = function() {
          return _mode;
        };
        _this.getLength = function(buffer) {
          return _bytes.length;
        };
        _this.write = function(buffer) {
          for (var i2 = 0; i2 < _bytes.length; i2 += 1) {
            buffer.put(_bytes[i2], 8);
          }
        };
        return _this;
      };
      var qrKanji = function(data) {
        var _mode = QRMode.MODE_KANJI;
        var stringToBytes = qrcode3.stringToBytesFuncs["SJIS"];
        if (!stringToBytes) {
          throw "sjis not supported.";
        }
        !function(c2, code) {
          var test = stringToBytes(c2);
          if (test.length != 2 || (test[0] << 8 | test[1]) != code) {
            throw "sjis not supported.";
          }
        }("\u53CB", 38726);
        var _bytes = stringToBytes(data);
        var _this = {};
        _this.getMode = function() {
          return _mode;
        };
        _this.getLength = function(buffer) {
          return ~~(_bytes.length / 2);
        };
        _this.write = function(buffer) {
          var data2 = _bytes;
          var i2 = 0;
          while (i2 + 1 < data2.length) {
            var c2 = (255 & data2[i2]) << 8 | 255 & data2[i2 + 1];
            if (33088 <= c2 && c2 <= 40956) {
              c2 -= 33088;
            } else if (57408 <= c2 && c2 <= 60351) {
              c2 -= 49472;
            } else {
              throw "illegal char at " + (i2 + 1) + "/" + c2;
            }
            c2 = (c2 >>> 8 & 255) * 192 + (c2 & 255);
            buffer.put(c2, 13);
            i2 += 2;
          }
          if (i2 < data2.length) {
            throw "illegal char at " + (i2 + 1);
          }
        };
        return _this;
      };
      var byteArrayOutputStream = function() {
        var _bytes = [];
        var _this = {};
        _this.writeByte = function(b) {
          _bytes.push(b & 255);
        };
        _this.writeShort = function(i2) {
          _this.writeByte(i2);
          _this.writeByte(i2 >>> 8);
        };
        _this.writeBytes = function(b, off, len) {
          off = off || 0;
          len = len || b.length;
          for (var i2 = 0; i2 < len; i2 += 1) {
            _this.writeByte(b[i2 + off]);
          }
        };
        _this.writeString = function(s2) {
          for (var i2 = 0; i2 < s2.length; i2 += 1) {
            _this.writeByte(s2.charCodeAt(i2));
          }
        };
        _this.toByteArray = function() {
          return _bytes;
        };
        _this.toString = function() {
          var s2 = "";
          s2 += "[";
          for (var i2 = 0; i2 < _bytes.length; i2 += 1) {
            if (i2 > 0) {
              s2 += ",";
            }
            s2 += _bytes[i2];
          }
          s2 += "]";
          return s2;
        };
        return _this;
      };
      var base64EncodeOutputStream = function() {
        var _buffer = 0;
        var _buflen = 0;
        var _length = 0;
        var _base64 = "";
        var _this = {};
        var writeEncoded = function(b) {
          _base64 += String.fromCharCode(encode(b & 63));
        };
        var encode = function(n2) {
          if (n2 < 0)
            ;
          else if (n2 < 26) {
            return 65 + n2;
          } else if (n2 < 52) {
            return 97 + (n2 - 26);
          } else if (n2 < 62) {
            return 48 + (n2 - 52);
          } else if (n2 == 62) {
            return 43;
          } else if (n2 == 63) {
            return 47;
          }
          throw "n:" + n2;
        };
        _this.writeByte = function(n2) {
          _buffer = _buffer << 8 | n2 & 255;
          _buflen += 8;
          _length += 1;
          while (_buflen >= 6) {
            writeEncoded(_buffer >>> _buflen - 6);
            _buflen -= 6;
          }
        };
        _this.flush = function() {
          if (_buflen > 0) {
            writeEncoded(_buffer << 6 - _buflen);
            _buffer = 0;
            _buflen = 0;
          }
          if (_length % 3 != 0) {
            var padlen = 3 - _length % 3;
            for (var i2 = 0; i2 < padlen; i2 += 1) {
              _base64 += "=";
            }
          }
        };
        _this.toString = function() {
          return _base64;
        };
        return _this;
      };
      var base64DecodeInputStream = function(str) {
        var _str = str;
        var _pos = 0;
        var _buffer = 0;
        var _buflen = 0;
        var _this = {};
        _this.read = function() {
          while (_buflen < 8) {
            if (_pos >= _str.length) {
              if (_buflen == 0) {
                return -1;
              }
              throw "unexpected end of file./" + _buflen;
            }
            var c2 = _str.charAt(_pos);
            _pos += 1;
            if (c2 == "=") {
              _buflen = 0;
              return -1;
            } else if (c2.match(/^\s$/)) {
              continue;
            }
            _buffer = _buffer << 6 | decode(c2.charCodeAt(0));
            _buflen += 6;
          }
          var n2 = _buffer >>> _buflen - 8 & 255;
          _buflen -= 8;
          return n2;
        };
        var decode = function(c2) {
          if (65 <= c2 && c2 <= 90) {
            return c2 - 65;
          } else if (97 <= c2 && c2 <= 122) {
            return c2 - 97 + 26;
          } else if (48 <= c2 && c2 <= 57) {
            return c2 - 48 + 52;
          } else if (c2 == 43) {
            return 62;
          } else if (c2 == 47) {
            return 63;
          } else {
            throw "c:" + c2;
          }
        };
        return _this;
      };
      var gifImage = function(width, height) {
        var _width = width;
        var _height = height;
        var _data = new Array(width * height);
        var _this = {};
        _this.setPixel = function(x, y, pixel) {
          _data[y * _width + x] = pixel;
        };
        _this.write = function(out) {
          out.writeString("GIF87a");
          out.writeShort(_width);
          out.writeShort(_height);
          out.writeByte(128);
          out.writeByte(0);
          out.writeByte(0);
          out.writeByte(0);
          out.writeByte(0);
          out.writeByte(0);
          out.writeByte(255);
          out.writeByte(255);
          out.writeByte(255);
          out.writeString(",");
          out.writeShort(0);
          out.writeShort(0);
          out.writeShort(_width);
          out.writeShort(_height);
          out.writeByte(0);
          var lzwMinCodeSize = 2;
          var raster = getLZWRaster(lzwMinCodeSize);
          out.writeByte(lzwMinCodeSize);
          var offset = 0;
          while (raster.length - offset > 255) {
            out.writeByte(255);
            out.writeBytes(raster, offset, 255);
            offset += 255;
          }
          out.writeByte(raster.length - offset);
          out.writeBytes(raster, offset, raster.length - offset);
          out.writeByte(0);
          out.writeString(";");
        };
        var bitOutputStream = function(out) {
          var _out = out;
          var _bitLength = 0;
          var _bitBuffer = 0;
          var _this2 = {};
          _this2.write = function(data, length) {
            if (data >>> length != 0) {
              throw "length over";
            }
            while (_bitLength + length >= 8) {
              _out.writeByte(255 & (data << _bitLength | _bitBuffer));
              length -= 8 - _bitLength;
              data >>>= 8 - _bitLength;
              _bitBuffer = 0;
              _bitLength = 0;
            }
            _bitBuffer = data << _bitLength | _bitBuffer;
            _bitLength = _bitLength + length;
          };
          _this2.flush = function() {
            if (_bitLength > 0) {
              _out.writeByte(_bitBuffer);
            }
          };
          return _this2;
        };
        var getLZWRaster = function(lzwMinCodeSize) {
          var clearCode = 1 << lzwMinCodeSize;
          var endCode = (1 << lzwMinCodeSize) + 1;
          var bitLength = lzwMinCodeSize + 1;
          var table = lzwTable();
          for (var i2 = 0; i2 < clearCode; i2 += 1) {
            table.add(String.fromCharCode(i2));
          }
          table.add(String.fromCharCode(clearCode));
          table.add(String.fromCharCode(endCode));
          var byteOut = byteArrayOutputStream();
          var bitOut = bitOutputStream(byteOut);
          bitOut.write(clearCode, bitLength);
          var dataIndex = 0;
          var s2 = String.fromCharCode(_data[dataIndex]);
          dataIndex += 1;
          while (dataIndex < _data.length) {
            var c2 = String.fromCharCode(_data[dataIndex]);
            dataIndex += 1;
            if (table.contains(s2 + c2)) {
              s2 = s2 + c2;
            } else {
              bitOut.write(table.indexOf(s2), bitLength);
              if (table.size() < 4095) {
                if (table.size() == 1 << bitLength) {
                  bitLength += 1;
                }
                table.add(s2 + c2);
              }
              s2 = c2;
            }
          }
          bitOut.write(table.indexOf(s2), bitLength);
          bitOut.write(endCode, bitLength);
          bitOut.flush();
          return byteOut.toByteArray();
        };
        var lzwTable = function() {
          var _map = {};
          var _size = 0;
          var _this2 = {};
          _this2.add = function(key) {
            if (_this2.contains(key)) {
              throw "dup key:" + key;
            }
            _map[key] = _size;
            _size += 1;
          };
          _this2.size = function() {
            return _size;
          };
          _this2.indexOf = function(key) {
            return _map[key];
          };
          _this2.contains = function(key) {
            return typeof _map[key] != "undefined";
          };
          return _this2;
        };
        return _this;
      };
      var createDataURL = function(width, height, getPixel) {
        var gif = gifImage(width, height);
        for (var y = 0; y < height; y += 1) {
          for (var x = 0; x < width; x += 1) {
            gif.setPixel(x, y, getPixel(x, y));
          }
        }
        var b = byteArrayOutputStream();
        gif.write(b);
        var base64 = base64EncodeOutputStream();
        var bytes = b.toByteArray();
        for (var i2 = 0; i2 < bytes.length; i2 += 1) {
          base64.writeByte(bytes[i2]);
        }
        base64.flush();
        return "data:image/gif;base64," + base64;
      };
      return qrcode3;
    }();
    !function() {
      qrcode2.stringToBytesFuncs["UTF-8"] = function(s2) {
        function toUTF8Array(str) {
          var utf8 = [];
          for (var i2 = 0; i2 < str.length; i2++) {
            var charcode = str.charCodeAt(i2);
            if (charcode < 128)
              utf8.push(charcode);
            else if (charcode < 2048) {
              utf8.push(
                192 | charcode >> 6,
                128 | charcode & 63
              );
            } else if (charcode < 55296 || charcode >= 57344) {
              utf8.push(
                224 | charcode >> 12,
                128 | charcode >> 6 & 63,
                128 | charcode & 63
              );
            } else {
              i2++;
              charcode = 65536 + ((charcode & 1023) << 10 | str.charCodeAt(i2) & 1023);
              utf8.push(
                240 | charcode >> 18,
                128 | charcode >> 12 & 63,
                128 | charcode >> 6 & 63,
                128 | charcode & 63
              );
            }
          }
          return utf8;
        }
        return toUTF8Array(s2);
      };
    }();
    (function(factory) {
      {
        module2.exports = factory();
      }
    })(function() {
      return qrcode2;
    });
  })(qrcode$1);
  const qrcode = qrcode$1.exports;
  function copyToClipboard(text) {
    if (navigator == null ? void 0 : navigator.clipboard) {
      return navigator.clipboard.writeText(text);
    }
    fallbackCopyTextToClipboard(text);
    return Promise.resolve();
  }
  function fallbackCopyTextToClipboard(text) {
    const textArea = document.createElement("textarea");
    textArea.value = text;
    textArea.style.top = "0";
    textArea.style.left = "0";
    textArea.style.position = "fixed";
    document.body.appendChild(textArea);
    textArea.focus();
    textArea.select();
    try {
      document.execCommand("copy");
    } finally {
      document.body.removeChild(textArea);
    }
  }
  var deepReadObject = (obj, path, defaultValue) => {
    const value = path.trim().split(".").reduce((a2, b) => a2 ? a2[b] : void 0, obj);
    return value !== void 0 ? value : defaultValue;
  };
  var template = (str, params, reg = /{{(.*?)}}/g) => str.replace(reg, (_, key) => deepReadObject(params, key, ""));
  var createI18nContext = (init = {}, lang = navigator.language in init ? navigator.language : Object.keys(init)[0]) => {
    const [locale, setLocale] = createSignal(lang);
    const [dict, setDict] = createStore(init);
    const translate = (key, params, defaultValue) => {
      const val = deepReadObject(dict[locale()], key, defaultValue || "");
      if (typeof val === "function")
        return val(params);
      if (typeof val === "string")
        return template(val, params || {});
      return val;
    };
    const actions = {
      add(lang2, table) {
        setDict(lang2, (t2) => Object.assign(t2 || {}, table));
      },
      locale: (lang2) => lang2 ? setLocale(lang2) : locale(),
      dict: (lang2) => deepReadObject(dict, lang2)
    };
    return [translate, actions];
  };
  var I18nContext = createContext({});
  var useI18n = () => useContext(I18nContext);
  const Translation = (props) => {
    const [t2] = useI18n();
    return createMemo(() => {
      var _a2;
      return t2(props.translationKey, props.translationValues, (_a2 = props.children) == null ? void 0 : _a2.toString());
    });
  };
  const _tmpl$$d = /* @__PURE__ */ template$1(`<div></div>`);
  const copyText = {
    translationKey: "common.copyLink",
    text: "Copy Link"
  };
  const copiedText = {
    translationKey: "common.copied",
    text: "Copied!"
  };
  const QRCode = (props) => {
    let qrCodeCanvasRef;
    let qrCodeWrapperRef;
    let imageRef;
    const [copyButtonOpened, setCopyButtonOpened] = createSignal(false);
    const [copyButtonHovered, setCopyButtonHovered] = createSignal(false);
    const [qrHovered, setQrHovered] = createSignal(false);
    const [copyButtonText, setCopyButtonText] = createSignal(copyText);
    const [picSize, setPicSize] = createSignal(picSizeDefault);
    createEffect(() => setCopyButtonOpened(copyButtonHovered() || qrHovered()));
    createEffect(() => !copyButtonOpened() && setCopyButtonText(copyText));
    createEffect(() => {
      const errorCorrectionLevel = "L";
      const cellSize = 4;
      const qr = qrcode(0, errorCorrectionLevel);
      qr.addData(props.sourceUrl);
      qr.make();
      qrCodeCanvasRef.innerHTML = qr.createSvgTag(cellSize, 0);
      const qrSize = qrCodeCanvasRef.firstElementChild.clientWidth;
      const scale = Math.round(qrNormalSize / qrSize * 1e5) / 1e5;
      if (imageRef) {
        const imgSize = Math.ceil(imgSizeDefault / (scale * cellSize)) * cellSize;
        const imgOffset = toPx(Math.ceil((qrSize - imgSize) / (2 * cellSize)) * cellSize);
        imageRef.style.top = imgOffset;
        imageRef.style.left = imgOffset;
        imageRef.style.height = toPx(imgSize);
        imageRef.style.width = toPx(imgSize);
        setPicSize(Math.round(picSizeDefault / scale));
      }
      qrCodeWrapperRef.style.transform = `scale(${scale})`;
    });
    let timeoutId = null;
    const onCopyClick = () => {
      copyToClipboard(props.sourceUrl);
      setCopyButtonText(copiedText);
      if (timeoutId != null) {
        clearTimeout(timeoutId);
      }
      timeoutId = setTimeout(() => setCopyButtonText(copyText), 3e3);
    };
    return createComponent(QrCodeBackground, {
      get ["class"]() {
        return props.class;
      },
      get children() {
        return [createComponent(QrCodeWrapper, {
          ref(r$) {
            const _ref$ = qrCodeWrapperRef;
            typeof _ref$ === "function" ? _ref$(r$) : qrCodeWrapperRef = r$;
          },
          onMouseEnter: () => setQrHovered(true),
          onMouseLeave: () => setTimeout(() => setQrHovered(false)),
          get children() {
            return [(() => {
              const _el$ = _tmpl$$d.cloneNode(true);
              const _ref$2 = qrCodeCanvasRef;
              typeof _ref$2 === "function" ? use(_ref$2, _el$) : qrCodeCanvasRef = _el$;
              return _el$;
            })(), createComponent(Show, {
              get when() {
                return props.imageUrl;
              },
              get children() {
                return createComponent(ImageBackground, {
                  ref(r$) {
                    const _ref$3 = imageRef;
                    typeof _ref$3 === "function" ? _ref$3(r$) : imageRef = r$;
                  },
                  get children() {
                    return createComponent(ImageStyled$2, {
                      get src() {
                        return props.imageUrl;
                      },
                      alt: "",
                      get size() {
                        return picSize();
                      }
                    });
                  }
                });
              }
            })];
          }
        }), createComponent(Transition, {
          onBeforeEnter: (el) => {
            el.animate([{
              opacity: 0,
              transform: "translate(-50%, 44px)"
            }, {
              opacity: 1,
              transform: "translate(-50%, 0)"
            }], {
              duration: 200
            });
          },
          onExit: (el, done) => {
            el.animate([{
              opacity: 1,
              transform: "translate(-50%, 0)"
            }, {
              opacity: 0,
              transform: "translate(-50%, 44px)"
            }], {
              duration: 200
            }).finished.then(() => {
              done();
            });
          },
          get children() {
            return createComponent(Show, {
              get when() {
                return copyButtonOpened() && !props.disableCopy;
              },
              get children() {
                return createComponent(CopyButtonStyled, {
                  onClick: onCopyClick,
                  onMouseEnter: () => copyButtonOpened() && setCopyButtonHovered(true),
                  onMouseLeave: () => setTimeout(() => setCopyButtonHovered(false)),
                  get children() {
                    return createComponent(Translation, {
                      get translationKey() {
                        return copyButtonText().translationKey;
                      },
                      get children() {
                        return copyButtonText().text;
                      }
                    });
                  }
                });
              }
            });
          }
        })];
      }
    });
  };
  const TextStyled$3 = styled.div`
    font-style: normal;
    font-weight: ${(props) => props.fontWeight};
    font-size: ${(props) => props.fontSize};
    line-height: ${(props) => props.lineHeight};

    color: ${(props) => props.color};
`;
  const Text = (inputs) => {
    const theme = useTheme();
    const [t2] = useI18n();
    let textRef;
    const color = () => inputs.color || theme.colors.text.primary;
    const props = mergeProps({
      fontSize: "14px",
      fontWeight: "510",
      lineHeight: "130%"
    }, inputs);
    createEffect(() => {
      if (!textRef) {
        return;
      }
      if (props.cursor === "unset") {
        return;
      }
      if (getComputedStyle(textRef).cursor !== "pointer") {
        textRef.style.cursor = "default";
      }
    });
    return createComponent(TextStyled$3, {
      get fontSize() {
        return props.fontSize;
      },
      get fontWeight() {
        return props.fontWeight;
      },
      get lineHeight() {
        return props.lineHeight;
      },
      get color() {
        return color();
      },
      get ["class"]() {
        return props.class;
      },
      ref(r$) {
        const _ref$ = textRef;
        typeof _ref$ === "function" ? _ref$(r$) : textRef = r$;
      },
      "data-tc-text": "true",
      get children() {
        var _a2;
        return createMemo(() => !!props.translationKey)() ? t2(props.translationKey, props.translationValues, (_a2 = props.children) == null ? void 0 : _a2.toString()) : props.children;
      }
    });
  };
  const WalletItemStyled = styled.button`
    cursor: pointer;
    border: none;
    background-color: unset;
    padding: 12px 8px 8px;
    height: 94px;
    width: 92px;
    display: flex;
    flex-direction: column;
    align-items: center;

    transition: transform 0.125s ease-in-out;

    ${mediaNotTouch} {
        &:hover {
            transform: scale(1.04);
        }
    }

    &:active {
        transform: scale(0.96);
    }

    ${media("mobile")} {
        padding: 8px 4px;
        height: 124px;
        width: 82px;
    }

    ${mediaTouch} {
        &:active {
            transform: scale(0.92);
        }
    }
`;
  const ImageStyled$1 = styled(Image)`
    width: 48px;
    height: 48px;
    border-radius: 12px;

    margin-bottom: 8px;

    ${media("mobile")} {
        width: 64px;
        height: 64px;
        border-radius: 16px;
    }
`;
  const StyledText = styled(Text)`
    font-weight: 590;
    max-width: 76px;
    white-space: nowrap;
    text-overflow: ellipsis;
    overflow: hidden;
`;
  const WalletItem = (props) => {
    return createComponent(WalletItemStyled, {
      get ["class"]() {
        return props.class;
      },
      onClick: () => props.onClick(),
      "data-tc-wallet-item": "true",
      get children() {
        return [createComponent(ImageStyled$1, {
          get src() {
            return props.iconUrl;
          },
          alt: ""
        }), createComponent(StyledText, {
          get children() {
            return props.name;
          }
        })];
      }
    });
  };
  const H1Styled$3 = styled.h1`
    font-style: normal;
    font-weight: 700;
    font-size: 24px;
    line-height: 30px;

    text-align: center;

    color: ${(props) => props.theme.colors.text.primary};

    margin-top: 0;
    margin-bottom: 6px;

    cursor: default;
`;
  const H1 = (props) => {
    const [t2] = useI18n();
    return createComponent(H1Styled$3, {
      get ["class"]() {
        return props.class;
      },
      "data-tc-h1": "true",
      get children() {
        var _a2;
        return createMemo(() => !!props.translationKey)() ? t2(props.translationKey, props.translationValues, (_a2 = props.children) == null ? void 0 : _a2.toString()) : props.children;
      }
    });
  };
  const H2Styled$3 = styled.h2`
    font-style: normal;
    font-weight: 510;
    font-size: 16px;
    line-height: 20px;

    text-align: center;

    color: ${(props) => props.theme.colors.text.secondary};

    margin-top: 0;
    margin-bottom: 32px;

    cursor: default;
`;
  const H2 = (props) => {
    const [t2] = useI18n();
    return createComponent(H2Styled$3, {
      get ["class"]() {
        return props.class;
      },
      "data-tc-h2": "true",
      get children() {
        var _a2;
        return createMemo(() => !!props.translationKey)() ? t2(props.translationKey, props.translationValues, (_a2 = props.children) == null ? void 0 : _a2.toString()) : props.children;
      }
    });
  };
  const H3Styled = styled.h3`
    font-style: normal;
    font-weight: 590;
    font-size: 15px;
    line-height: 20px;

    color: ${(props) => props.theme.colors.text.primary};

    margin-top: 0;
    margin-bottom: 0;

    cursor: default;
`;
  const H3 = (props) => {
    const [t2] = useI18n();
    return createComponent(H3Styled, {
      "data-tc-h3": "true",
      get children() {
        var _a2;
        return createMemo(() => !!props.translationKey)() ? t2(props.translationKey, props.translationValues, (_a2 = props.children) == null ? void 0 : _a2.toString()) : props.children;
      }
    });
  };
  const _tmpl$$c = /* @__PURE__ */ template$1(`<svg width="18" height="17" viewBox="0 0 18 17" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M1.5 15.999L16.5 0.999023M16.5 0.999023V12.999M16.5 0.999023H4.5" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path></svg>`);
  const LongArrowIcon = (props) => {
    const theme = useTheme();
    const fill = () => props.fill || theme.colors.icon.secondary;
    return (() => {
      const _el$ = _tmpl$$c.cloneNode(true), _el$2 = _el$.firstChild;
      createRenderEffect(() => setAttribute(_el$2, "stroke", fill()));
      return _el$;
    })();
  };
  const _tmpl$$b = /* @__PURE__ */ template$1(`<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M14.1839 17.7069C13.6405 18.6507 13.3688 19.1226 13.0591 19.348C12.4278 19.8074 11.5723 19.8074 10.941 19.348C10.6312 19.1226 10.3595 18.6507 9.81613 17.7069L5.52066 10.2464C4.76864 8.94024 4.39263 8.28717 4.33762 7.75894C4.2255 6.68236 4.81894 5.65591 5.80788 5.21589C6.29309 5 7.04667 5 8.55383 5H15.4462C16.9534 5 17.7069 5 18.1922 5.21589C19.1811 5.65591 19.7745 6.68236 19.6624 7.75894C19.6074 8.28717 19.2314 8.94024 18.4794 10.2464L14.1839 17.7069ZM11.1 16.3412L6.56139 8.48002C6.31995 8.06185 6.19924 7.85276 6.18146 7.68365C6.14523 7.33896 6.33507 7.01015 6.65169 6.86919C6.80703 6.80002 7.04847 6.80002 7.53133 6.80002H7.53134L11.1 6.80002V16.3412ZM12.9 16.3412L17.4387 8.48002C17.6801 8.06185 17.8008 7.85276 17.8186 7.68365C17.8548 7.33896 17.665 7.01015 17.3484 6.86919C17.193 6.80002 16.9516 6.80002 16.4687 6.80002L12.9 6.80002V16.3412Z"></path></svg>`);
  const TonIcon = (props) => {
    const theme = useTheme();
    const fill = () => props.fill || theme.colors.icon.primary;
    return (() => {
      const _el$ = _tmpl$$b.cloneNode(true), _el$2 = _el$.firstChild;
      createRenderEffect(() => setAttribute(_el$2, "fill", fill()));
      return _el$;
    })();
  };
  const _tmpl$$a = /* @__PURE__ */ template$1(`<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><circle cx="12" cy="12" r="11"></circle><path d="M17.1364 9.6364C17.4879 9.28493 17.4879 8.71508 17.1364 8.36361C16.7849 8.01214 16.2151 8.01214 15.8636 8.36361L10 14.2272L8.1364 12.3636C7.78493 12.0121 7.21508 12.0121 6.86361 12.3636C6.51214 12.7151 6.51214 13.2849 6.86361 13.6364L9.36361 16.1364C9.71508 16.4879 10.2849 16.4879 10.6364 16.1364L17.1364 9.6364Z"></path></svg>`), _tmpl$2$3 = /* @__PURE__ */ template$1(`<svg width="72" height="72" viewBox="0 0 72 72" fill="none" xmlns="http://www.w3.org/2000/svg"><circle cx="36" cy="36" r="33"></circle><path d="M50.9142 28.4142C51.6953 27.6332 51.6953 26.3668 50.9142 25.5858C50.1332 24.8047 48.8668 24.8047 48.0858 25.5858L30 43.6716L23.9142 37.5858C23.1332 36.8047 21.8668 36.8047 21.0858 37.5858C20.3047 38.3668 20.3047 39.6332 21.0858 40.4142L28.5858 47.9142C29.3668 48.6953 30.6332 48.6953 31.4142 47.9142L50.9142 28.4142Z"></path></svg>`);
  const SuccessIcon = (props) => {
    const theme = useTheme();
    const size = () => props.size || "s";
    const fill = () => props.fill || theme.colors.icon.success;
    return createMemo((() => {
      const _c$ = createMemo(() => size() === "s");
      return () => _c$() ? (() => {
        const _el$ = _tmpl$$a.cloneNode(true), _el$2 = _el$.firstChild, _el$3 = _el$2.nextSibling;
        createRenderEffect((_p$) => {
          const _v$ = props.class, _v$2 = fill(), _v$3 = theme.colors.constant.white;
          _v$ !== _p$._v$ && setAttribute(_el$, "class", _p$._v$ = _v$);
          _v$2 !== _p$._v$2 && setAttribute(_el$2, "fill", _p$._v$2 = _v$2);
          _v$3 !== _p$._v$3 && setAttribute(_el$3, "fill", _p$._v$3 = _v$3);
          return _p$;
        }, {
          _v$: void 0,
          _v$2: void 0,
          _v$3: void 0
        });
        return _el$;
      })() : (() => {
        const _el$4 = _tmpl$2$3.cloneNode(true), _el$5 = _el$4.firstChild, _el$6 = _el$5.nextSibling;
        createRenderEffect((_p$) => {
          const _v$4 = props.class, _v$5 = fill(), _v$6 = theme.colors.constant.white;
          _v$4 !== _p$._v$4 && setAttribute(_el$4, "class", _p$._v$4 = _v$4);
          _v$5 !== _p$._v$5 && setAttribute(_el$5, "fill", _p$._v$5 = _v$5);
          _v$6 !== _p$._v$6 && setAttribute(_el$6, "fill", _p$._v$6 = _v$6);
          return _p$;
        }, {
          _v$4: void 0,
          _v$5: void 0,
          _v$6: void 0
        });
        return _el$4;
      })();
    })());
  };
  const _tmpl$$9 = /* @__PURE__ */ template$1(`<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><circle cx="12" cy="12" r="11"></circle><path d="M7.86361 9.1364C7.51214 8.78493 7.51214 8.21508 7.86361 7.86361C8.21508 7.51214 8.78493 7.51214 9.1364 7.86361L12 10.7272L14.8636 7.86361C15.2151 7.51214 15.7849 7.51214 16.1364 7.86361C16.4879 8.21508 16.4879 8.78493 16.1364 9.1364L13.2728 12L16.1364 14.8636C16.4879 15.2151 16.4879 15.7849 16.1364 16.1364C15.7849 16.4879 15.2151 16.4879 14.8636 16.1364L12 13.2728L9.1364 16.1364C8.78493 16.4879 8.21508 16.4879 7.86361 16.1364C7.51214 15.7849 7.51214 15.2151 7.86361 14.8636L10.7272 12L7.86361 9.1364Z"></path></svg>`), _tmpl$2$2 = /* @__PURE__ */ template$1(`<svg width="72" height="72" viewBox="0 0 72 72" fill="none" xmlns="http://www.w3.org/2000/svg"><circle cx="36" cy="36" r="33"></circle><path d="M24.0858 26.9142C23.3047 26.1332 23.3047 24.8668 24.0858 24.0858C24.8668 23.3047 26.1332 23.3047 26.9142 24.0858L36 33.1716L45.0858 24.0858C45.8668 23.3047 47.1332 23.3047 47.9142 24.0858C48.6953 24.8668 48.6953 26.1332 47.9142 26.9142L38.8284 36L47.9142 45.0858C48.6953 45.8668 48.6953 47.1332 47.9142 47.9142C47.1332 48.6953 45.8668 48.6953 45.0858 47.9142L36 38.8284L26.9142 47.9142C26.1332 48.6953 24.8668 48.6953 24.0858 47.9142C23.3047 47.1332 23.3047 45.8668 24.0858 45.0858L33.1716 36L24.0858 26.9142Z"></path></svg>`);
  const ErrorIcon = (props) => {
    const theme = useTheme();
    const size = () => props.size || "s";
    const fill = () => props.fill || theme.colors.icon.error;
    return createMemo((() => {
      const _c$ = createMemo(() => size() === "s");
      return () => _c$() ? (() => {
        const _el$ = _tmpl$$9.cloneNode(true), _el$2 = _el$.firstChild, _el$3 = _el$2.nextSibling;
        createRenderEffect((_p$) => {
          const _v$ = props.class, _v$2 = fill(), _v$3 = theme.colors.constant.white;
          _v$ !== _p$._v$ && setAttribute(_el$, "class", _p$._v$ = _v$);
          _v$2 !== _p$._v$2 && setAttribute(_el$2, "fill", _p$._v$2 = _v$2);
          _v$3 !== _p$._v$3 && setAttribute(_el$3, "fill", _p$._v$3 = _v$3);
          return _p$;
        }, {
          _v$: void 0,
          _v$2: void 0,
          _v$3: void 0
        });
        return _el$;
      })() : (() => {
        const _el$4 = _tmpl$2$2.cloneNode(true), _el$5 = _el$4.firstChild, _el$6 = _el$5.nextSibling;
        createRenderEffect((_p$) => {
          const _v$4 = props.class, _v$5 = fill(), _v$6 = theme.colors.constant.white;
          _v$4 !== _p$._v$4 && setAttribute(_el$4, "class", _p$._v$4 = _v$4);
          _v$5 !== _p$._v$5 && setAttribute(_el$5, "fill", _p$._v$5 = _v$5);
          _v$6 !== _p$._v$6 && setAttribute(_el$6, "fill", _p$._v$6 = _v$6);
          return _p$;
        }, {
          _v$4: void 0,
          _v$5: void 0,
          _v$6: void 0
        });
        return _el$4;
      })();
    })());
  };
  const _tmpl$$8 = /* @__PURE__ */ template$1(`<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M15.55 5.85123C18.9459 7.81184 20.1094 12.1541 18.1488 15.55C16.1882 18.9459 11.8459 20.1094 8.44998 18.1488C8.01952 17.9003 7.46909 18.0478 7.22056 18.4782C6.97203 18.9087 7.11952 19.4591 7.54998 19.7076C11.8068 22.1653 17.2499 20.7068 19.7076 16.45C22.1653 12.1932 20.7068 6.75005 16.45 4.29239C12.1932 1.83472 6.75003 3.29321 4.29236 7.55001C4.04383 7.98047 4.19132 8.53091 4.62178 8.77943C5.05224 9.02796 5.60268 8.88048 5.8512 8.45001C7.81181 5.05413 12.1541 3.89062 15.55 5.85123Z"></path></svg>`), _tmpl$2$1 = /* @__PURE__ */ template$1(`<svg width="72" height="72" viewBox="0 0 72 72" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M24 56.7846C35.479 63.412 50.1572 59.479 56.7846 47.9999C63.412 36.5209 59.479 21.8427 48 15.2153C36.521 8.58791 21.8428 12.5209 15.2154 23.9999" stroke-width="4" stroke-linecap="round" stroke-linejoin="round"></path></svg>`);
  const LoaderIcon = (props) => {
    const theme = useTheme();
    const size = () => props.size || "s";
    const fill = () => props.fill || theme.colors.icon.tertiary;
    const rotateAnimation = h`
        0% {
          transform: rotate(0deg);
        }
        100% {
          transform: rotate(360deg);
        }
    `;
    const svgClass = u`
        animation: ${rotateAnimation} 1s linear infinite;
    `;
    return createMemo((() => {
      const _c$ = createMemo(() => size() === "s");
      return () => _c$() ? (() => {
        const _el$ = _tmpl$$8.cloneNode(true), _el$2 = _el$.firstChild;
        createRenderEffect((_p$) => {
          const _v$ = cn__default.default(svgClass, props.class), _v$2 = fill();
          _v$ !== _p$._v$ && setAttribute(_el$, "class", _p$._v$ = _v$);
          _v$2 !== _p$._v$2 && setAttribute(_el$2, "fill", _p$._v$2 = _v$2);
          return _p$;
        }, {
          _v$: void 0,
          _v$2: void 0
        });
        return _el$;
      })() : (() => {
        const _el$3 = _tmpl$2$1.cloneNode(true), _el$4 = _el$3.firstChild;
        createRenderEffect((_p$) => {
          const _v$3 = cn__default.default(svgClass, props.class), _v$4 = fill();
          _v$3 !== _p$._v$3 && setAttribute(_el$3, "class", _p$._v$3 = _v$3);
          _v$4 !== _p$._v$4 && setAttribute(_el$4, "stroke", _p$._v$4 = _v$4);
          return _p$;
        }, {
          _v$3: void 0,
          _v$4: void 0
        });
        return _el$3;
      })();
    })());
  };
  const TonConnectUiContext = createContext();
  const _tmpl$$7 = /* @__PURE__ */ template$1(`<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M7.76228 2.09998H10.2378C11.0458 2.09997 11.7067 2.09996 12.2438 2.14384C12.7997 2.18926 13.3017 2.28614 13.7706 2.52505C14.5045 2.89896 15.1011 3.49558 15.475 4.22941C15.7139 4.6983 15.8108 5.20038 15.8562 5.75629C15.9001 6.29337 15.9001 6.95422 15.9001 7.76227V8.1H16.2377C17.0457 8.09999 17.7066 8.09998 18.2437 8.14386C18.7996 8.18928 19.3017 8.28616 19.7705 8.52507C20.5044 8.89898 21.101 9.4956 21.4749 10.2294C21.7138 10.6983 21.8107 11.2004 21.8561 11.7563C21.9 12.2934 21.9 12.9542 21.9 13.7623V16.2377C21.9 17.0458 21.9 17.7066 21.8561 18.2437C21.8107 18.7996 21.7138 19.3017 21.4749 19.7706C21.101 20.5044 20.5044 21.101 19.7705 21.4749C19.3017 21.7138 18.7996 21.8107 18.2437 21.8561C17.7066 21.9 17.0458 21.9 16.2378 21.9H13.7623C12.9543 21.9 12.2934 21.9 11.7563 21.8561C11.2004 21.8107 10.6983 21.7138 10.2294 21.4749C9.49561 21.101 8.89898 20.5044 8.52508 19.7706C8.28616 19.3017 8.18928 18.7996 8.14386 18.2437C8.09998 17.7066 8.09999 17.0458 8.1 16.2377V15.9H7.76227C6.95426 15.9 6.29335 15.9 5.75629 15.8561C5.20038 15.8107 4.6983 15.7138 4.22941 15.4749C3.49558 15.101 2.89896 14.5044 2.52505 13.7705C2.28614 13.3017 2.18926 12.7996 2.14384 12.2437C2.09996 11.7066 2.09997 11.0458 2.09998 10.2377V7.76228C2.09997 6.95424 2.09996 6.29336 2.14384 5.75629C2.18926 5.20038 2.28614 4.6983 2.52505 4.22941C2.89896 3.49558 3.49558 2.89896 4.22941 2.52505C4.6983 2.28614 5.20038 2.18926 5.75629 2.14384C6.29336 2.09996 6.95425 2.09997 7.76228 2.09998ZM8.1 14.1V13.7623C8.09999 12.9542 8.09998 12.2934 8.14386 11.7563C8.18928 11.2004 8.28616 10.6983 8.52508 10.2294C8.89898 9.4956 9.49561 8.89898 10.2294 8.52507C10.6983 8.28616 11.2004 8.18928 11.7563 8.14386C12.2934 8.09998 12.9542 8.09999 13.7623 8.1H14.1001V7.79998C14.1001 6.94505 14.0994 6.35798 14.0622 5.90287C14.0259 5.45827 13.9593 5.21944 13.8712 5.0466C13.6699 4.65146 13.3486 4.3302 12.9535 4.12886C12.7806 4.04079 12.5418 3.97419 12.0972 3.93786C11.6421 3.90068 11.055 3.89998 10.2001 3.89998H7.79998C6.94505 3.89998 6.35798 3.90068 5.90287 3.93786C5.45827 3.97419 5.21944 4.04079 5.0466 4.12886C4.65146 4.3302 4.3302 4.65146 4.12886 5.0466C4.04079 5.21944 3.97419 5.45827 3.93786 5.90287C3.90068 6.35798 3.89998 6.94505 3.89998 7.79998V10.2C3.89998 11.0549 3.90068 11.642 3.93786 12.0971C3.97419 12.5417 4.04079 12.7805 4.12886 12.9534C4.3302 13.3485 4.65146 13.6698 5.0466 13.8711C5.21944 13.9592 5.45827 14.0258 5.90287 14.0621C6.35798 14.0993 6.94505 14.1 7.79998 14.1H8.1ZM11.0466 10.1289C11.2195 10.0408 11.4583 9.97421 11.9029 9.93788C12.358 9.9007 12.9451 9.9 13.8 9.9H16.2C17.0549 9.9 17.642 9.9007 18.0971 9.93788C18.5417 9.97421 18.7805 10.0408 18.9534 10.1289C19.3485 10.3302 19.6698 10.6515 19.8711 11.0466C19.9592 11.2195 20.0258 11.4583 20.0621 11.9029C20.0993 12.358 20.1 12.9451 20.1 13.8V16.2C20.1 17.0549 20.0993 17.642 20.0621 18.0971C20.0258 18.5417 19.9592 18.7805 19.8711 18.9534C19.6698 19.3485 19.3485 19.6698 18.9534 19.8711C18.7805 19.9592 18.5417 20.0258 18.0971 20.0621C17.642 20.0993 17.0549 20.1 16.2 20.1H13.8C12.9451 20.1 12.358 20.0993 11.9029 20.0621C11.4583 20.0258 11.2195 19.9592 11.0466 19.8711C10.6515 19.6698 10.3302 19.3485 10.1289 18.9534C10.0408 18.7805 9.97421 18.5417 9.93788 18.0971C9.9007 17.642 9.9 17.0549 9.9 16.2V13.8C9.9 12.9451 9.9007 12.358 9.93788 11.9029C9.97421 11.4583 10.0408 11.2195 10.1289 11.0466C10.3302 10.6515 10.6515 10.3302 11.0466 10.1289Z"></path></svg>`);
  const CopyIcon = (props) => {
    const theme = useTheme();
    const fill = () => props.fill || theme.colors.icon.primary;
    return (() => {
      const _el$ = _tmpl$$7.cloneNode(true), _el$2 = _el$.firstChild;
      createRenderEffect(() => setAttribute(_el$2, "fill", fill()));
      return _el$;
    })();
  };
  const _tmpl$$6 = /* @__PURE__ */ template$1(`<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M8.7624 3.10001C7.95435 3.1 7.29349 3.09999 6.75642 3.14387C6.2005 3.18929 5.69842 3.28617 5.22954 3.52508C4.4957 3.89899 3.89908 4.49561 3.52517 5.22944C3.28626 5.69833 3.18938 6.20041 3.14396 6.75632C3.10008 7.2934 3.10009 7.95424 3.1001 8.76229V15.2377C3.10009 16.0458 3.10008 16.7066 3.14396 17.2437C3.18938 17.7996 3.28626 18.3017 3.52517 18.7706C3.89908 19.5044 4.4957 20.101 5.22954 20.4749C5.69842 20.7138 6.2005 20.8107 6.75642 20.8561C7.29349 20.9 7.95434 20.9 8.76239 20.9H12.0001C12.4972 20.9 12.9001 20.4971 12.9001 20C12.9001 19.503 12.4972 19.1 12.0001 19.1H8.8001C7.94517 19.1 7.3581 19.0993 6.90299 19.0621C6.45839 19.0258 6.21956 18.9592 6.04672 18.8711C5.65158 18.6698 5.33032 18.3485 5.12898 17.9534C5.04092 17.7805 4.97431 17.5417 4.93798 17.0971C4.9008 16.642 4.9001 16.0549 4.9001 15.2V8.80001C4.9001 7.94508 4.9008 7.35801 4.93798 6.9029C4.97431 6.4583 5.04092 6.21947 5.12898 6.04663C5.33032 5.65149 5.65158 5.33023 6.04672 5.12889C6.21956 5.04082 6.45839 4.97422 6.90299 4.93789C7.3581 4.90071 7.94517 4.90001 8.8001 4.90001H12.0001C12.4972 4.90001 12.9001 4.49706 12.9001 4.00001C12.9001 3.50295 12.4972 3.10001 12.0001 3.10001H8.7624Z"></path><path d="M17.6364 7.3636C17.2849 7.01212 16.7151 7.01212 16.3636 7.3636C16.0121 7.71507 16.0121 8.28492 16.3636 8.63639L18.8272 11.1H9.00001C8.50295 11.1 8.10001 11.5029 8.10001 12C8.10001 12.497 8.50295 12.9 9.00001 12.9H18.8272L16.3636 15.3636C16.0121 15.7151 16.0121 16.2849 16.3636 16.6364C16.7151 16.9879 17.2849 16.9879 17.6364 16.6364L21.6364 12.6364C21.9879 12.2849 21.9879 11.7151 21.6364 11.3636L17.6364 7.3636Z"></path></svg>`);
  const DisconnectIcon = (props) => {
    const theme = useTheme();
    const fill = () => props.fill || theme.colors.icon.primary;
    return (() => {
      const _el$ = _tmpl$$6.cloneNode(true), _el$2 = _el$.firstChild, _el$3 = _el$2.nextSibling;
      createRenderEffect((_p$) => {
        const _v$ = fill(), _v$2 = fill();
        _v$ !== _p$._v$ && setAttribute(_el$2, "fill", _p$._v$ = _v$);
        _v$2 !== _p$._v$2 && setAttribute(_el$3, "fill", _p$._v$2 = _v$2);
        return _p$;
      }, {
        _v$: void 0,
        _v$2: void 0
      });
      return _el$;
    })();
  };
  const hoverBorders$1 = {
    m: "8px",
    s: "4px",
    none: "0"
  };
  const dropdownBorders = {
    m: "16px",
    s: "8px",
    none: "0"
  };
  const AccountButtonDropdownStyled = styled.div`
    width: 256px;
    box-shadow: 0 4px 24px rgba(0, 0, 0, 0.16);
    border-radius: ${(props) => dropdownBorders[props.theme.borderRadius]};

    background-color: ${(props) => props.theme.colors.background.primary}
           
    color: ${(props) => props.theme.colors.text.primary}
`;
  const UlStyled$1 = styled.ul`
    background-color: ${(props) => props.theme.colors.background.primary};
    padding: 8px;
`;
  const MenuButtonStyled = styled.button`
    display: flex;
    align-items: center;
    gap: 8px;
    height: 40px;
    padding-left: 8px;
    width: 100%;

    background-color: ${(props) => props.theme.colors.background.primary};
    border: none;
    border-radius: ${(props) => hoverBorders$1[props.theme.borderRadius]};
    cursor: pointer;

    transition: background-color, transform 0.1s ease-in-out;

    &:hover {
        background-color: ${(props) => props.theme.colors.background.secondary};
    }

    &:active {
        transform: scale(0.96);
    }
`;
  const _tmpl$$5 = /* @__PURE__ */ template$1(`<li></li>`);
  const MenuItemText = (props) => createComponent(Text, {
    get translationKey() {
      return props.translationKey;
    },
    fontSize: "15px",
    fontWeight: "590",
    get children() {
      return props.children;
    }
  });
  const AccountButtonDropdown = (props) => {
    const tonConnectUi = useContext(TonConnectUiContext);
    const [isCopiedShown, setIsCopiedShown] = createSignal(false);
    const onCopy = () => __async(this, null, function* () {
      const userFriendlyAddress = sdk.toUserFriendlyAddress(tonConnectUi.account.address, tonConnectUi.account.chain === sdk.CHAIN.TESTNET);
      yield copyToClipboard(userFriendlyAddress);
      setIsCopiedShown(true);
      setTimeout(() => setIsCopiedShown(false), 1e3);
    });
    const onDisconnect = () => {
      tonConnectUi.disconnect();
      props.onClose();
    };
    return createComponent(AccountButtonDropdownStyled, {
      ref(r$) {
        const _ref$ = props.ref;
        typeof _ref$ === "function" ? _ref$(r$) : props.ref = r$;
      },
      get ["class"]() {
        return props.class;
      },
      "data-tc-dropdown": "true",
      get children() {
        return createComponent(UlStyled$1, {
          get children() {
            return [(() => {
              const _el$ = _tmpl$$5.cloneNode(true);
              insert(_el$, createComponent(MenuButtonStyled, {
                onClick: () => onCopy(),
                get children() {
                  return [createComponent(CopyIcon, {}), createComponent(Show, {
                    get when() {
                      return !isCopiedShown();
                    },
                    get children() {
                      return createComponent(MenuItemText, {
                        translationKey: "button.dropdown.copy",
                        children: "Copy address"
                      });
                    }
                  }), createComponent(Show, {
                    get when() {
                      return isCopiedShown();
                    },
                    get children() {
                      return createComponent(MenuItemText, {
                        translationKey: "button.dropdown.copied",
                        children: "Address copied!"
                      });
                    }
                  })];
                }
              }));
              return _el$;
            })(), (() => {
              const _el$2 = _tmpl$$5.cloneNode(true);
              insert(_el$2, createComponent(MenuButtonStyled, {
                onClick: () => onDisconnect(),
                get children() {
                  return [createComponent(DisconnectIcon, {}), createComponent(MenuItemText, {
                    translationKey: "button.dropdown.disconnect",
                    children: "Disconnect"
                  })];
                }
              }));
              return _el$2;
            })()];
          }
        });
      }
    });
  };
  const borders$2 = {
    m: "16px",
    s: "8px",
    none: "0"
  };
  const NotificationStyled = styled.div`
    width: 256px;
    padding: 12px 16px;
    display: flex;
    gap: 9px;

    background-color: ${(props) => props.theme.colors.background.primary};
    box-shadow: 0 4px 24px rgba(0, 0, 0, 0.16);
    border-radius: ${(props) => borders$2[props.theme.borderRadius]};
`;
  const NotificationContentStyled = styled.div`
    width: 192px;
`;
  const TextStyled$2 = styled(Text)`
    margin-top: 4px;
    color: ${(props) => props.theme.colors.text.secondary};
`;
  const Notification = (props) => {
    const dataAttrs = useDataAttributes(props);
    return createComponent(NotificationStyled, mergeProps({
      get ["class"]() {
        return props.class;
      },
      "data-tc-notification": "true"
    }, dataAttrs, {
      get children() {
        return [createComponent(NotificationContentStyled, {
          get children() {
            return [createComponent(H3, {
              get translationKey() {
                return props.header.translationKey;
              },
              get translationValues() {
                return props.header.translationValues;
              },
              get children() {
                return props.children;
              }
            }), createComponent(Show, {
              get when() {
                return props.text;
              },
              get children() {
                return createComponent(TextStyled$2, {
                  get translationKey() {
                    return props.text.translationKey;
                  },
                  get translationValues() {
                    return props.text.translationValues;
                  }
                });
              }
            })];
          }
        }), createMemo(() => props.icon)];
      }
    }));
  };
  const LoaderIconStyled$1 = styled(LoaderIcon)`
    align-self: center;
`;
  const ConfirmOperationNotification = (props) => {
    var _a2;
    const tonConnectUI = useContext(TonConnectUiContext);
    const [t2] = useI18n();
    const name = ((_a2 = tonConnectUI.wallet) == null ? void 0 : _a2.name) || t2("common.yourWallet", {}, "your wallet");
    return createComponent(Notification, {
      header: {
        translationKey: "notifications.confirm.header",
        translationValues: {
          name
        }
      },
      get ["class"]() {
        return props.class;
      },
      get icon() {
        return createComponent(LoaderIconStyled$1, {});
      },
      "data-tc-notification-confirm": "true",
      children: "Confirm operation in your wallet"
    });
  };
  const ErrorIconStyled = styled(ErrorIcon)`
    margin-top: 2px;
`;
  const ErrorTransactionNotification = (props) => {
    return createComponent(Notification, {
      header: {
        translationKey: "notifications.transactionCanceled.header"
      },
      text: {
        translationKey: "notifications.transactionCanceled.text"
      },
      get icon() {
        return createComponent(ErrorIconStyled, {});
      },
      get ["class"]() {
        return props.class;
      },
      "data-tc-notification-tx-cancelled": "true",
      children: "Transaction cancelled"
    });
  };
  const SuccessIconStyled = styled(SuccessIcon)`
    margin-top: 2px;
`;
  const SuccessTransactionNotification = (props) => {
    return createComponent(Notification, {
      header: {
        translationKey: "notifications.transactionSent.header"
      },
      text: {
        translationKey: "notifications.transactionSent.text"
      },
      get icon() {
        return createComponent(SuccessIconStyled, {});
      },
      get ["class"]() {
        return props.class;
      },
      "data-tc-notification-tx-sent": "true",
      children: "Transaction sent"
    });
  };
  const NotificationClass = u`
    transform: translateY(-8px);
    margin-bottom: 12px;
`;
  const _tmpl$$4 = /* @__PURE__ */ template$1(`<div data-tc-list-notifications="true"></div>`);
  const Notifications = (props) => {
    const timeouts = [];
    const [openedNotifications, setOpenedNotifications] = createSignal([]);
    let lastId = -1;
    const liveTimeoutMs = 4500;
    createEffect(on(action, (action2) => {
      if (action2 && action2.showNotification) {
        lastId++;
        const id = lastId;
        setOpenedNotifications((notifications2) => notifications2.filter((notification) => notification.action !== "confirm-transaction").concat({
          id,
          action: action2.name
        }));
        timeouts.push(setTimeout(() => setOpenedNotifications((notifications2) => notifications2.filter((notification) => notification.id !== id)), liveTimeoutMs));
      }
    }));
    onCleanup(() => {
      timeouts.forEach(clearTimeout);
    });
    return (() => {
      const _el$ = _tmpl$$4.cloneNode(true);
      insert(_el$, createComponent(TransitionGroup, {
        onBeforeEnter: (el) => {
          el.animate([{
            opacity: 0,
            transform: "translateY(0)"
          }, {
            opacity: 1,
            transform: "translateY(-8px)"
          }], {
            duration: 200
          });
        },
        onExit: (el, done) => {
          const a2 = el.animate([{
            opacity: 1,
            transform: "translateY(-8px)"
          }, {
            opacity: 0,
            transform: "translateY(-30px)"
          }], {
            duration: 200
          });
          a2.finished.then(done);
        },
        get children() {
          return createComponent(For, {
            get each() {
              return openedNotifications();
            },
            children: (openedNotification) => createComponent(Switch, {
              get children() {
                return [createComponent(Match, {
                  get when() {
                    return openedNotification.action === "transaction-sent";
                  },
                  get children() {
                    return createComponent(SuccessTransactionNotification, {
                      "class": NotificationClass
                    });
                  }
                }), createComponent(Match, {
                  get when() {
                    return openedNotification.action === "transaction-canceled";
                  },
                  get children() {
                    return createComponent(ErrorTransactionNotification, {
                      "class": NotificationClass
                    });
                  }
                }), createComponent(Match, {
                  get when() {
                    return openedNotification.action === "confirm-transaction";
                  },
                  get children() {
                    return createComponent(ConfirmOperationNotification, {
                      "class": NotificationClass
                    });
                  }
                })];
              }
            })
          });
        }
      }));
      createRenderEffect(() => className(_el$, props.class));
      return _el$;
    })();
  };
  const AccountButtonStyled = styled(Button)`
    background-color: ${(props) => props.theme.colors.connectButton.background};
    color: ${(props) => props.theme.colors.connectButton.foreground};
    box-shadow: ${(props) => `0 4px 24px ${rgba(props.theme.colors.constant.black, 0.16)}`};
    padding: 8px 16px 8px 12px;

    display: flex;
    align-items: center;
    gap: 4px;
    height: 40px;
`;
  const DropdownButtonStyled = styled(AccountButtonStyled)`
    padding: 12px 16px;
    min-width: 148px;
    justify-content: center;
    background-color: ${(props) => props.theme.colors.background.primary};
`;
  const LoaderButtonStyled = styled(Button)`
    min-width: 148px;
    height: 40px;

    background-color: ${(props) => props.theme.colors.background.primary};
    color: ${(props) => props.theme.colors.connectButton.foreground};
    box-shadow: ${(props) => `0 4px 24px ${rgba(props.theme.colors.constant.black, 0.16)}`};

    display: flex;
    align-items: center;
    justify-content: center;
`;
  const LoaderIconStyled = styled(LoaderIcon)`
    height: 18px;
    width: 18px;
`;
  const DropdownContainerStyled = styled.div`
    width: fit-content;
    display: flex;
    flex-direction: column;
    align-items: flex-end;
`;
  const DropdownStyled = styled(AccountButtonDropdown)`
    box-sizing: border-box;
    overflow: hidden;
    margin-top: 12px;
`;
  const NotificationsStyled = styled(Notifications)`
    > div:first-child {
        margin-top: 20px;
    }
`;
  function getSide(placement) {
    return placement.split("-")[0];
  }
  function getAlignment(placement) {
    return placement.split("-")[1];
  }
  function getMainAxisFromPlacement(placement) {
    return ["top", "bottom"].includes(getSide(placement)) ? "x" : "y";
  }
  function getLengthFromAxis(axis) {
    return axis === "y" ? "height" : "width";
  }
  function computeCoordsFromPlacement(_ref, placement, rtl) {
    let {
      reference,
      floating
    } = _ref;
    const commonX = reference.x + reference.width / 2 - floating.width / 2;
    const commonY = reference.y + reference.height / 2 - floating.height / 2;
    const mainAxis = getMainAxisFromPlacement(placement);
    const length = getLengthFromAxis(mainAxis);
    const commonAlign = reference[length] / 2 - floating[length] / 2;
    const side = getSide(placement);
    const isVertical = mainAxis === "x";
    let coords;
    switch (side) {
      case "top":
        coords = {
          x: commonX,
          y: reference.y - floating.height
        };
        break;
      case "bottom":
        coords = {
          x: commonX,
          y: reference.y + reference.height
        };
        break;
      case "right":
        coords = {
          x: reference.x + reference.width,
          y: commonY
        };
        break;
      case "left":
        coords = {
          x: reference.x - floating.width,
          y: commonY
        };
        break;
      default:
        coords = {
          x: reference.x,
          y: reference.y
        };
    }
    switch (getAlignment(placement)) {
      case "start":
        coords[mainAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);
        break;
      case "end":
        coords[mainAxis] += commonAlign * (rtl && isVertical ? -1 : 1);
        break;
    }
    return coords;
  }
  const computePosition$1 = (reference, floating, config) => __async(this, null, function* () {
    const {
      placement = "bottom",
      strategy = "absolute",
      middleware = [],
      platform: platform2
    } = config;
    const validMiddleware = middleware.filter(Boolean);
    const rtl = yield platform2.isRTL == null ? void 0 : platform2.isRTL(floating);
    if ({}.NODE_ENV !== "production") {
      if (platform2 == null) {
        console.error(["Floating UI: `platform` property was not passed to config. If you", "want to use Floating UI on the web, install @floating-ui/dom", "instead of the /core package. Otherwise, you can create your own", "`platform`: https://floating-ui.com/docs/platform"].join(" "));
      }
      if (validMiddleware.filter((_ref) => {
        let {
          name
        } = _ref;
        return name === "autoPlacement" || name === "flip";
      }).length > 1) {
        throw new Error(["Floating UI: duplicate `flip` and/or `autoPlacement` middleware", "detected. This will lead to an infinite loop. Ensure only one of", "either has been passed to the `middleware` array."].join(" "));
      }
      if (!reference || !floating) {
        console.error(["Floating UI: The reference and/or floating element was not defined", "when `computePosition()` was called. Ensure that both elements have", "been created and can be measured."].join(" "));
      }
    }
    let rects = yield platform2.getElementRects({
      reference,
      floating,
      strategy
    });
    let {
      x,
      y
    } = computeCoordsFromPlacement(rects, placement, rtl);
    let statefulPlacement = placement;
    let middlewareData = {};
    let resetCount = 0;
    for (let i2 = 0; i2 < validMiddleware.length; i2++) {
      const {
        name,
        fn
      } = validMiddleware[i2];
      const {
        x: nextX,
        y: nextY,
        data,
        reset
      } = yield fn({
        x,
        y,
        initialPlacement: placement,
        placement: statefulPlacement,
        strategy,
        middlewareData,
        rects,
        platform: platform2,
        elements: {
          reference,
          floating
        }
      });
      x = nextX != null ? nextX : x;
      y = nextY != null ? nextY : y;
      middlewareData = __spreadProps(__spreadValues({}, middlewareData), {
        [name]: __spreadValues(__spreadValues({}, middlewareData[name]), data)
      });
      if ({}.NODE_ENV !== "production") {
        if (resetCount > 50) {
          console.warn(["Floating UI: The middleware lifecycle appears to be running in an", "infinite loop. This is usually caused by a `reset` continually", "being returned without a break condition."].join(" "));
        }
      }
      if (reset && resetCount <= 50) {
        resetCount++;
        if (typeof reset === "object") {
          if (reset.placement) {
            statefulPlacement = reset.placement;
          }
          if (reset.rects) {
            rects = reset.rects === true ? yield platform2.getElementRects({
              reference,
              floating,
              strategy
            }) : reset.rects;
          }
          ({
            x,
            y
          } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));
        }
        i2 = -1;
        continue;
      }
    }
    return {
      x,
      y,
      placement: statefulPlacement,
      strategy,
      middlewareData
    };
  });
  function rectToClientRect(rect) {
    return __spreadProps(__spreadValues({}, rect), {
      top: rect.y,
      left: rect.x,
      right: rect.x + rect.width,
      bottom: rect.y + rect.height
    });
  }
  function getWindow(node) {
    var _node$ownerDocument;
    return ((_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;
  }
  function getComputedStyle$1(element) {
    return getWindow(element).getComputedStyle(element);
  }
  function getNodeName(node) {
    return isNode(node) ? (node.nodeName || "").toLowerCase() : "";
  }
  let uaString;
  function getUAString() {
    if (uaString) {
      return uaString;
    }
    const uaData = navigator.userAgentData;
    if (uaData && Array.isArray(uaData.brands)) {
      uaString = uaData.brands.map((item) => item.brand + "/" + item.version).join(" ");
      return uaString;
    }
    return navigator.userAgent;
  }
  function isHTMLElement(value) {
    return value instanceof getWindow(value).HTMLElement;
  }
  function isElement(value) {
    return value instanceof getWindow(value).Element;
  }
  function isNode(value) {
    return value instanceof getWindow(value).Node;
  }
  function isShadowRoot(node) {
    if (typeof ShadowRoot === "undefined") {
      return false;
    }
    const OwnElement = getWindow(node).ShadowRoot;
    return node instanceof OwnElement || node instanceof ShadowRoot;
  }
  function isOverflowElement(element) {
    const {
      overflow,
      overflowX,
      overflowY,
      display
    } = getComputedStyle$1(element);
    return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX) && !["inline", "contents"].includes(display);
  }
  function isTableElement(element) {
    return ["table", "td", "th"].includes(getNodeName(element));
  }
  function isContainingBlock(element) {
    const isFirefox = /firefox/i.test(getUAString());
    const css = getComputedStyle$1(element);
    const backdropFilter = css.backdropFilter || css.WebkitBackdropFilter;
    return css.transform !== "none" || css.perspective !== "none" || (backdropFilter ? backdropFilter !== "none" : false) || isFirefox && css.willChange === "filter" || isFirefox && (css.filter ? css.filter !== "none" : false) || ["transform", "perspective"].some((value) => css.willChange.includes(value)) || ["paint", "layout", "strict", "content"].some(
      (value) => {
        const contain = css.contain;
        return contain != null ? contain.includes(value) : false;
      }
    );
  }
  function isLayoutViewport() {
    return !/^((?!chrome|android).)*safari/i.test(getUAString());
  }
  function isLastTraversableNode(node) {
    return ["html", "body", "#document"].includes(getNodeName(node));
  }
  const min = Math.min;
  const max = Math.max;
  const round = Math.round;
  const FALLBACK_SCALE = {
    x: 1,
    y: 1
  };
  function getScale(element) {
    const domElement = !isElement(element) && element.contextElement ? element.contextElement : isElement(element) ? element : null;
    if (!domElement) {
      return FALLBACK_SCALE;
    }
    const rect = domElement.getBoundingClientRect();
    const css = getComputedStyle$1(domElement);
    if (css.boxSizing !== "border-box") {
      if (!isHTMLElement(domElement)) {
        return FALLBACK_SCALE;
      }
      return {
        x: domElement.offsetWidth > 0 ? round(rect.width) / domElement.offsetWidth || 1 : 1,
        y: domElement.offsetHeight > 0 ? round(rect.height) / domElement.offsetHeight || 1 : 1
      };
    }
    let x = rect.width / parseFloat(css.width);
    let y = rect.height / parseFloat(css.height);
    if (!x || !Number.isFinite(x)) {
      x = 1;
    }
    if (!y || !Number.isFinite(y)) {
      y = 1;
    }
    return {
      x,
      y
    };
  }
  function getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {
    var _win$visualViewport$o, _win$visualViewport, _win$visualViewport$o2, _win$visualViewport2;
    if (includeScale === void 0) {
      includeScale = false;
    }
    if (isFixedStrategy === void 0) {
      isFixedStrategy = false;
    }
    const clientRect = element.getBoundingClientRect();
    let scale = FALLBACK_SCALE;
    if (includeScale) {
      if (offsetParent) {
        if (isElement(offsetParent)) {
          scale = getScale(offsetParent);
        }
      } else {
        scale = getScale(element);
      }
    }
    const win = isElement(element) ? getWindow(element) : window;
    const addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
    const x = (clientRect.left + (addVisualOffsets ? (_win$visualViewport$o = (_win$visualViewport = win.visualViewport) == null ? void 0 : _win$visualViewport.offsetLeft) != null ? _win$visualViewport$o : 0 : 0)) / scale.x;
    const y = (clientRect.top + (addVisualOffsets ? (_win$visualViewport$o2 = (_win$visualViewport2 = win.visualViewport) == null ? void 0 : _win$visualViewport2.offsetTop) != null ? _win$visualViewport$o2 : 0 : 0)) / scale.y;
    const width = clientRect.width / scale.x;
    const height = clientRect.height / scale.y;
    return {
      width,
      height,
      top: y,
      right: x + width,
      bottom: y + height,
      left: x,
      x,
      y
    };
  }
  function getDocumentElement(node) {
    return ((isNode(node) ? node.ownerDocument : node.document) || window.document).documentElement;
  }
  function getNodeScroll(element) {
    if (isElement(element)) {
      return {
        scrollLeft: element.scrollLeft,
        scrollTop: element.scrollTop
      };
    }
    return {
      scrollLeft: element.pageXOffset,
      scrollTop: element.pageYOffset
    };
  }
  function getWindowScrollBarX(element) {
    return getBoundingClientRect(getDocumentElement(element)).left + getNodeScroll(element).scrollLeft;
  }
  function getRectRelativeToOffsetParent(element, offsetParent, strategy) {
    const isOffsetParentAnElement = isHTMLElement(offsetParent);
    const documentElement = getDocumentElement(offsetParent);
    const rect = getBoundingClientRect(element, true, strategy === "fixed", offsetParent);
    let scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    const offsets = {
      x: 0,
      y: 0
    };
    if (isOffsetParentAnElement || !isOffsetParentAnElement && strategy !== "fixed") {
      if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
        scroll = getNodeScroll(offsetParent);
      }
      if (isHTMLElement(offsetParent)) {
        const offsetRect = getBoundingClientRect(offsetParent, true);
        offsets.x = offsetRect.x + offsetParent.clientLeft;
        offsets.y = offsetRect.y + offsetParent.clientTop;
      } else if (documentElement) {
        offsets.x = getWindowScrollBarX(documentElement);
      }
    }
    return {
      x: rect.left + scroll.scrollLeft - offsets.x,
      y: rect.top + scroll.scrollTop - offsets.y,
      width: rect.width,
      height: rect.height
    };
  }
  function getParentNode(node) {
    if (getNodeName(node) === "html") {
      return node;
    }
    const result = node.assignedSlot || node.parentNode || (isShadowRoot(node) ? node.host : null) || getDocumentElement(node);
    return isShadowRoot(result) ? result.host : result;
  }
  function getTrueOffsetParent(element) {
    if (!isHTMLElement(element) || getComputedStyle$1(element).position === "fixed") {
      return null;
    }
    return element.offsetParent;
  }
  function getContainingBlock(element) {
    let currentNode = getParentNode(element);
    while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {
      if (isContainingBlock(currentNode)) {
        return currentNode;
      } else {
        currentNode = getParentNode(currentNode);
      }
    }
    return null;
  }
  function getOffsetParent(element) {
    const window2 = getWindow(element);
    let offsetParent = getTrueOffsetParent(element);
    while (offsetParent && isTableElement(offsetParent) && getComputedStyle$1(offsetParent).position === "static") {
      offsetParent = getTrueOffsetParent(offsetParent);
    }
    if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle$1(offsetParent).position === "static" && !isContainingBlock(offsetParent))) {
      return window2;
    }
    return offsetParent || getContainingBlock(element) || window2;
  }
  function getDimensions(element) {
    if (isHTMLElement(element)) {
      return {
        width: element.offsetWidth,
        height: element.offsetHeight
      };
    }
    const rect = getBoundingClientRect(element);
    return {
      width: rect.width,
      height: rect.height
    };
  }
  function convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {
    let {
      rect,
      offsetParent,
      strategy
    } = _ref;
    const isOffsetParentAnElement = isHTMLElement(offsetParent);
    const documentElement = getDocumentElement(offsetParent);
    if (offsetParent === documentElement) {
      return rect;
    }
    let scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    let scale = {
      x: 1,
      y: 1
    };
    const offsets = {
      x: 0,
      y: 0
    };
    if (isOffsetParentAnElement || !isOffsetParentAnElement && strategy !== "fixed") {
      if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
        scroll = getNodeScroll(offsetParent);
      }
      if (isHTMLElement(offsetParent)) {
        const offsetRect = getBoundingClientRect(offsetParent);
        scale = getScale(offsetParent);
        offsets.x = offsetRect.x + offsetParent.clientLeft;
        offsets.y = offsetRect.y + offsetParent.clientTop;
      }
    }
    return {
      width: rect.width * scale.x,
      height: rect.height * scale.y,
      x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x,
      y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y
    };
  }
  function getViewportRect(element, strategy) {
    const win = getWindow(element);
    const html = getDocumentElement(element);
    const visualViewport = win.visualViewport;
    let width = html.clientWidth;
    let height = html.clientHeight;
    let x = 0;
    let y = 0;
    if (visualViewport) {
      width = visualViewport.width;
      height = visualViewport.height;
      const layoutViewport = isLayoutViewport();
      if (layoutViewport || !layoutViewport && strategy === "fixed") {
        x = visualViewport.offsetLeft;
        y = visualViewport.offsetTop;
      }
    }
    return {
      width,
      height,
      x,
      y
    };
  }
  function getDocumentRect(element) {
    var _element$ownerDocumen;
    const html = getDocumentElement(element);
    const scroll = getNodeScroll(element);
    const body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
    const width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
    const height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
    let x = -scroll.scrollLeft + getWindowScrollBarX(element);
    const y = -scroll.scrollTop;
    if (getComputedStyle$1(body || html).direction === "rtl") {
      x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
    }
    return {
      width,
      height,
      x,
      y
    };
  }
  function getNearestOverflowAncestor(node) {
    const parentNode = getParentNode(node);
    if (isLastTraversableNode(parentNode)) {
      return node.ownerDocument.body;
    }
    if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {
      return parentNode;
    }
    return getNearestOverflowAncestor(parentNode);
  }
  function getOverflowAncestors(node, list) {
    var _node$ownerDocument;
    if (list === void 0) {
      list = [];
    }
    const scrollableAncestor = getNearestOverflowAncestor(node);
    const isBody = scrollableAncestor === ((_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.body);
    const win = getWindow(scrollableAncestor);
    if (isBody) {
      return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : []);
    }
    return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor));
  }
  function getInnerBoundingClientRect(element, strategy) {
    const clientRect = getBoundingClientRect(element, true, strategy === "fixed");
    const top = clientRect.top + element.clientTop;
    const left = clientRect.left + element.clientLeft;
    const scale = isHTMLElement(element) ? getScale(element) : {
      x: 1,
      y: 1
    };
    const width = element.clientWidth * scale.x;
    const height = element.clientHeight * scale.y;
    const x = left * scale.x;
    const y = top * scale.y;
    return {
      top: y,
      left: x,
      right: x + width,
      bottom: y + height,
      x,
      y,
      width,
      height
    };
  }
  function getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {
    if (clippingAncestor === "viewport") {
      return rectToClientRect(getViewportRect(element, strategy));
    }
    if (isElement(clippingAncestor)) {
      return getInnerBoundingClientRect(clippingAncestor, strategy);
    }
    return rectToClientRect(getDocumentRect(getDocumentElement(element)));
  }
  function getClippingElementAncestors(element, cache) {
    const cachedResult = cache.get(element);
    if (cachedResult) {
      return cachedResult;
    }
    let result = getOverflowAncestors(element).filter((el) => isElement(el) && getNodeName(el) !== "body");
    let currentContainingBlockComputedStyle = null;
    const elementIsFixed = getComputedStyle$1(element).position === "fixed";
    let currentNode = elementIsFixed ? getParentNode(element) : element;
    while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {
      const computedStyle = getComputedStyle$1(currentNode);
      const containingBlock = isContainingBlock(currentNode);
      const shouldDropCurrentNode = elementIsFixed ? !containingBlock && !currentContainingBlockComputedStyle : !containingBlock && computedStyle.position === "static" && !!currentContainingBlockComputedStyle && ["absolute", "fixed"].includes(currentContainingBlockComputedStyle.position);
      if (shouldDropCurrentNode) {
        result = result.filter((ancestor) => ancestor !== currentNode);
      } else {
        currentContainingBlockComputedStyle = computedStyle;
      }
      currentNode = getParentNode(currentNode);
    }
    cache.set(element, result);
    return result;
  }
  function getClippingRect(_ref) {
    let {
      element,
      boundary,
      rootBoundary,
      strategy
    } = _ref;
    const elementClippingAncestors = boundary === "clippingAncestors" ? getClippingElementAncestors(element, this._c) : [].concat(boundary);
    const clippingAncestors = [...elementClippingAncestors, rootBoundary];
    const firstClippingAncestor = clippingAncestors[0];
    const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {
      const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);
      accRect.top = max(rect.top, accRect.top);
      accRect.right = min(rect.right, accRect.right);
      accRect.bottom = min(rect.bottom, accRect.bottom);
      accRect.left = max(rect.left, accRect.left);
      return accRect;
    }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));
    return {
      width: clippingRect.right - clippingRect.left,
      height: clippingRect.bottom - clippingRect.top,
      x: clippingRect.left,
      y: clippingRect.top
    };
  }
  const platform = {
    getClippingRect,
    convertOffsetParentRelativeRectToViewportRelativeRect,
    isElement,
    getDimensions,
    getOffsetParent,
    getDocumentElement,
    getScale,
    getElementRects(_ref) {
      return __async(this, null, function* () {
        let {
          reference,
          floating,
          strategy
        } = _ref;
        const getOffsetParentFn = this.getOffsetParent || getOffsetParent;
        const getDimensionsFn = this.getDimensions;
        return {
          reference: getRectRelativeToOffsetParent(reference, yield getOffsetParentFn(floating), strategy),
          floating: __spreadValues({
            x: 0,
            y: 0
          }, yield getDimensionsFn(floating))
        };
      });
    },
    getClientRects: (element) => Array.from(element.getClientRects()),
    isRTL: (element) => getComputedStyle$1(element).direction === "rtl"
  };
  function autoUpdate(reference, floating, update, options) {
    if (options === void 0) {
      options = {};
    }
    const {
      ancestorScroll: _ancestorScroll = true,
      ancestorResize = true,
      elementResize = true,
      animationFrame = false
    } = options;
    const ancestorScroll = _ancestorScroll && !animationFrame;
    const ancestors = ancestorScroll || ancestorResize ? [...isElement(reference) ? getOverflowAncestors(reference) : reference.contextElement ? getOverflowAncestors(reference.contextElement) : [], ...getOverflowAncestors(floating)] : [];
    ancestors.forEach((ancestor) => {
      ancestorScroll && ancestor.addEventListener("scroll", update, {
        passive: true
      });
      ancestorResize && ancestor.addEventListener("resize", update);
    });
    let observer = null;
    if (elementResize) {
      let initialUpdate = true;
      observer = new ResizeObserver(() => {
        if (!initialUpdate) {
          update();
        }
        initialUpdate = false;
      });
      isElement(reference) && !animationFrame && observer.observe(reference);
      if (!isElement(reference) && reference.contextElement && !animationFrame) {
        observer.observe(reference.contextElement);
      }
      observer.observe(floating);
    }
    let frameId;
    let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;
    if (animationFrame) {
      frameLoop();
    }
    function frameLoop() {
      const nextRefRect = getBoundingClientRect(reference);
      if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {
        update();
      }
      prevRefRect = nextRefRect;
      frameId = requestAnimationFrame(frameLoop);
    }
    update();
    return () => {
      var _observer;
      ancestors.forEach((ancestor) => {
        ancestorScroll && ancestor.removeEventListener("scroll", update);
        ancestorResize && ancestor.removeEventListener("resize", update);
      });
      (_observer = observer) == null ? void 0 : _observer.disconnect();
      observer = null;
      if (animationFrame) {
        cancelAnimationFrame(frameId);
      }
    };
  }
  const computePosition = (reference, floating, options) => {
    const cache = /* @__PURE__ */ new Map();
    const mergedOptions = __spreadValues({
      platform
    }, options);
    const platformWithCache = __spreadProps(__spreadValues({}, mergedOptions.platform), {
      _c: cache
    });
    return computePosition$1(reference, floating, __spreadProps(__spreadValues({}, mergedOptions), {
      platform: platformWithCache
    }));
  };
  function P(l2, u2, e2) {
    let c2 = () => {
      var t2;
      return (t2 = e2 == null ? void 0 : e2.placement) != null ? t2 : "bottom";
    }, d = () => {
      var t2;
      return (t2 = e2 == null ? void 0 : e2.strategy) != null ? t2 : "absolute";
    }, [n2, o2] = createSignal({ x: null, y: null, placement: c2(), strategy: d(), middlewareData: {} }), [x, F] = createSignal();
    createEffect(() => {
      let t2 = x();
      if (t2)
        throw t2.value;
    });
    let s2 = createMemo(() => (l2(), u2(), {}));
    function i2() {
      let t2 = l2(), r = u2();
      if (t2 && r) {
        let a2 = s2();
        computePosition(t2, r, { middleware: e2 == null ? void 0 : e2.middleware, placement: c2(), strategy: d() }).then((m) => {
          a2 === s2() && o2(m);
        }, (m) => {
          F(m);
        });
      }
    }
    return createEffect(() => {
      let t2 = l2(), r = u2();
      if (e2 == null || e2.middleware, c2(), d(), t2 && r)
        if (e2 != null && e2.whileElementsMounted) {
          let a2 = e2.whileElementsMounted(t2, r, i2);
          a2 && onCleanup(a2);
        } else
          i2();
    }), { get x() {
      return n2().x;
    }, get y() {
      return n2().y;
    }, get placement() {
      return n2().placement;
    }, get strategy() {
      return n2().strategy;
    }, get middlewareData() {
      return n2().middlewareData;
    }, update: i2 };
  }
  const _tmpl$$3 = /* @__PURE__ */ template$1(`<tc-root data-tc-dropdown-container="true"></tc-root>`);
  const AccountButton = () => {
    const theme = useTheme();
    const connector = useContext(ConnectorContext);
    const tonConnectUI = useContext(TonConnectUiContext);
    const [isOpened, setIsOpened] = createSignal(false);
    const [account, setAccount] = createSignal(connector.account);
    const [restoringProcess, setRestoringProcess] = createSignal(true);
    let dropDownRef;
    const [floating, setFloating] = createSignal();
    const [anchor, setAnchor] = createSignal();
    const position = P(anchor, floating, {
      whileElementsMounted: autoUpdate,
      placement: "bottom-end"
    });
    const normalizedAddress = () => {
      const acc = account();
      if (acc) {
        const userFriendlyAddress = sdk.toUserFriendlyAddress(acc.address, acc.chain === sdk.CHAIN.TESTNET);
        return userFriendlyAddress.slice(0, 4) + "\u2026" + userFriendlyAddress.slice(-4);
      }
      return "";
    };
    tonConnectUI.connectionRestored.then(() => setRestoringProcess(false));
    const unsubscribe = connector.onStatusChange((wallet) => {
      if (!wallet) {
        setIsOpened(false);
        setAccount(null);
        return;
      }
      setAccount(wallet.account);
    });
    const onClick = (e2) => {
      if (!account() || !isOpened()) {
        return;
      }
      const clickToButton = anchor().contains(e2.target);
      const clickToDropdown = dropDownRef.contains(e2.target);
      if (!clickToButton && !clickToDropdown) {
        setIsOpened(false);
      }
    };
    onMount(() => {
      document.body.addEventListener("click", onClick);
    });
    onCleanup(() => {
      document.body.removeEventListener("click", onClick);
      unsubscribe();
    });
    return createComponent(Dynamic, {
      component: globalStylesTag,
      get children() {
        return [createComponent(Show, {
          get when() {
            return restoringProcess();
          },
          get children() {
            return createComponent(LoaderButtonStyled, {
              disabled: true,
              "data-tc-connect-button-loading": "true",
              get children() {
                return createComponent(LoaderIconStyled, {});
              }
            });
          }
        }), createComponent(Show, {
          get when() {
            return !restoringProcess();
          },
          get children() {
            return [createComponent(Show, {
              get when() {
                return !account();
              },
              get children() {
                return createComponent(AccountButtonStyled, {
                  onClick: () => tonConnectUI.connectWallet(),
                  "data-tc-connect-button": "true",
                  get children() {
                    return [createComponent(TonIcon, {
                      get fill() {
                        return theme.colors.connectButton.foreground;
                      }
                    }), createComponent(Text, {
                      translationKey: "button.connectWallet",
                      fontSize: "15px",
                      lineHeight: "18px",
                      fontWeight: "590",
                      get color() {
                        return theme.colors.connectButton.foreground;
                      },
                      children: "Connect wallet"
                    })];
                  }
                });
              }
            }), createComponent(Show, {
              get when() {
                return account();
              },
              get children() {
                return createComponent(DropdownContainerStyled, {
                  get children() {
                    return [createComponent(DropdownButtonStyled, {
                      onClick: () => setIsOpened((v) => !v),
                      ref: setAnchor,
                      "data-tc-dropdown-button": "true",
                      get children() {
                        return [createComponent(Text, {
                          fontSize: "15px",
                          fontWeight: "590",
                          lineHeight: "18px",
                          get children() {
                            return normalizedAddress();
                          }
                        }), createComponent(ArrowIcon, {
                          direction: "bottom"
                        })];
                      }
                    }), createComponent(Portal, {
                      get children() {
                        const _el$ = untrack(() => document.importNode(_tmpl$$3, true));
                        use(setFloating, _el$);
                        _el$.style.setProperty("z-index", "999");
                        _el$._$owner = getOwner();
                        insert(_el$, createComponent(Transition, {
                          onBeforeEnter: (el) => {
                            el.animate([{
                              opacity: 0,
                              transform: "translateY(-8px)"
                            }, {
                              opacity: 1,
                              transform: "translateY(0)"
                            }], {
                              duration: 150
                            });
                          },
                          onExit: (el, done) => {
                            const a2 = el.animate([{
                              opacity: 1,
                              transform: "translateY(0)"
                            }, {
                              opacity: 0,
                              transform: "translateY(-8px)"
                            }], {
                              duration: 150
                            });
                            a2.finished.then(done);
                          },
                          get children() {
                            return createComponent(Show, {
                              get when() {
                                return isOpened();
                              },
                              get children() {
                                return createComponent(DropdownStyled, {
                                  get hidden() {
                                    return !isOpened();
                                  },
                                  onClose: () => setIsOpened(false),
                                  ref(r$) {
                                    const _ref$ = dropDownRef;
                                    typeof _ref$ === "function" ? _ref$(r$) : dropDownRef = r$;
                                  }
                                });
                              }
                            });
                          }
                        }), null);
                        insert(_el$, createComponent(NotificationsStyled, {}), null);
                        createRenderEffect((_p$) => {
                          var _a2, _b;
                          const _v$ = position.strategy, _v$2 = `${(_a2 = position.y) != null ? _a2 : 0}px`, _v$3 = `${(_b = position.x) != null ? _b : 0}px`;
                          _v$ !== _p$._v$ && _el$.style.setProperty("position", _p$._v$ = _v$);
                          _v$2 !== _p$._v$2 && _el$.style.setProperty("top", _p$._v$2 = _v$2);
                          _v$3 !== _p$._v$3 && _el$.style.setProperty("left", _p$._v$3 = _v$3);
                          return _p$;
                        }, {
                          _v$: void 0,
                          _v$2: void 0,
                          _v$3: void 0
                        });
                        return _el$;
                      }
                    })];
                  }
                });
              }
            })];
          }
        })];
      }
    });
  };
  const borders$1 = {
    m: "16px",
    s: "8px",
    none: "0"
  };
  const QrCodeModalStyled = styled.div`
    ${media("mobile")} {
        padding: 10px 16px 0 16px;
    }
`;
  const H1Styled$2 = styled(H1)`
    max-width: 320px;
    margin: 0 auto 6px;
`;
  const StyledIconButton = styled(IconButton)`
    position: absolute;
    top: 16px;
    left: 16px;
`;
  const QRStyled = styled(QRCode)`
    margin-bottom: 16px;
`;
  const ButtonsContainerStyled$1 = styled.div`
    display: flex;
    gap: 16px;
    height: 56px;
    margin-bottom: 24px;
`;
  const ActionButtonStyled$1 = styled(Button)`
    padding: 0 16px;
    height: 56px;
    font-size: 16px;
    line-height: 20px;
    width: 100%;
    border-radius: ${(props) => borders$1[props.theme.borderRadius]};
`;
  const GetWalletStyled$1 = styled.div`
    display: flex;
    justify-content: space-between;
    align-items: center;
`;
  const TextStyled$1 = styled(Text)`
    padding-left: 8px;
    color: ${(props) => props.theme.colors.text.secondary};
    font-size: 16px;
`;
  const [appState, setAppState] = createStore({
    buttonRootId: null,
    language: "en",
    returnStrategy: "back",
    walletsListConfiguration: {}
  });
  const AStyled = styled.a`
    display: block;
    text-decoration: unset;
`;
  const Link = (props) => {
    const attributes = () => props.blank ? {
      rel: "noreferrer noopener"
    } : {};
    return createComponent(AStyled, mergeProps({
      get href() {
        return props.href;
      },
      get target() {
        return props.blank ? "_blank" : "_self";
      }
    }, attributes, {
      get children() {
        return props.children;
      }
    }));
  };
  const QrCodeModal = (props) => {
    const connector = useContext(ConnectorContext);
    const universalLink = createMemo(() => connector.connect({
      universalLink: props.wallet.universalLink,
      bridgeUrl: props.wallet.bridgeUrl
    }, props.additionalRequest));
    return createComponent(QrCodeModalStyled, {
      "data-tc-wallet-qr-modal-desktop": "true",
      get children() {
        return [createComponent(StyledIconButton, {
          icon: "arrow",
          onClick: () => props.onBackClick()
        }), createComponent(H1Styled$2, {
          translationKey: "walletModal.qrCodeModal.connectWith",
          get translationValues() {
            return {
              name: props.wallet.name
            };
          },
          get children() {
            return ["Connect with ", createMemo(() => props.wallet.name)];
          }
        }), createComponent(H2, {
          translationKey: "walletModal.qrCodeModal.scan",
          get translationValues() {
            return {
              name: props.wallet.name
            };
          },
          get children() {
            return ["Scan QR code with your phone\u2019s or ", createMemo(() => props.wallet.name), "\u2019s camera."];
          }
        }), createComponent(QRStyled, {
          disableCopy: false,
          get sourceUrl() {
            return universalLink();
          },
          get imageUrl() {
            return props.wallet.imageUrl;
          }
        }), createComponent(ButtonsContainerStyled$1, {
          get children() {
            return [createComponent(ActionButtonStyled$1, {
              scale: "s",
              onClick: () => {
                setLastSelectedWalletInfo(__spreadProps(__spreadValues({}, props.wallet), {
                  openMethod: "universal-link"
                }));
                openLinkBlank(addReturnStrategy(universalLink(), appState.returnStrategy));
              },
              get children() {
                return createComponent(Translation, {
                  translationKey: "walletModal.qrCodeModal.openWallet",
                  get translationValues() {
                    return {
                      name: props.wallet.name
                    };
                  },
                  get children() {
                    return ["Open ", createMemo(() => props.wallet.name)];
                  }
                });
              }
            }), createComponent(Show, {
              get when() {
                return sdk.isWalletInfoCurrentlyInjected(props.wallet);
              },
              get children() {
                return createComponent(ActionButtonStyled$1, {
                  scale: "s",
                  onClick: () => {
                    setLastSelectedWalletInfo(props.wallet);
                    connector.connect({
                      jsBridgeKey: props.wallet.jsBridgeKey
                    }, props.additionalRequest);
                  },
                  get children() {
                    return createComponent(Translation, {
                      translationKey: "common.openExtension",
                      children: "Open Extension"
                    });
                  }
                });
              }
            })];
          }
        }), createComponent(GetWalletStyled$1, {
          get children() {
            return [createComponent(TextStyled$1, {
              translationKey: "walletModal.qrCodeModal.dontHave",
              get translationValues() {
                return {
                  name: props.wallet.name
                };
              },
              get children() {
                return ["Don't have ", createMemo(() => props.wallet.name), "?"];
              }
            }), createComponent(Link, {
              get href() {
                return props.wallet.aboutUrl;
              },
              blank: true,
              get children() {
                return createComponent(Button, {
                  get children() {
                    return createComponent(Translation, {
                      translationKey: "common.get",
                      children: "GET"
                    });
                  }
                });
              }
            })];
          }
        })];
      }
    });
  };
  const StyledModal = styled(Modal)`
    padding-left: 24px;
    padding-right: 24px;

    ${media("mobile")} {
        padding-left: 0;
        padding-right: 0;

        min-height: 364px;
    }
`;
  const H1Styled$1 = styled(H1)`
    margin-top: 12px;

    ${media("mobile")} {
        padding: 0 10px;
    }
`;
  const LoaderContainerStyled = styled.div`
    margin: 30px 0;
    width: 100%;
    display: flex;
    justify-content: center;

    ${media("mobile")} {
        height: 160px;
        align-items: center;
    }
`;
  const TabTextStyled = styled(Text)`
    min-width: 84px;
    text-align: center;
    font-weight: 590;
`;
  const TabBarStyled = styled(TabBar)`
    margin: 0 auto 22px;
`;
  function uniq(array) {
    return [...new Set(array)];
  }
  function mergeConcat(idKey, array1, array2) {
    return array1.map((item1) => {
      const item2 = array2.find((elem) => elem[idKey] === item1[idKey]);
      array2 = array2.filter((elem) => elem[idKey] !== item1[idKey]);
      return item2 === void 0 ? item1 : item2;
    }).concat(array2);
  }
  function uiWalletToWalletInfo(uiWallet) {
    if ("jsBridgeKey" in uiWallet) {
      return __spreadProps(__spreadValues({}, uiWallet), {
        injected: sdk.TonConnect.isWalletInjected(uiWallet.jsBridgeKey),
        embedded: sdk.TonConnect.isInsideWalletBrowser(uiWallet.jsBridgeKey)
      });
    }
    return uiWallet;
  }
  function applyWalletsListConfiguration(walletsList, configuration) {
    var _a2;
    if (!configuration) {
      return walletsList;
    }
    if ((_a2 = configuration.includeWallets) == null ? void 0 : _a2.length) {
      walletsList = mergeConcat(
        "name",
        walletsList,
        configuration.includeWallets.map(uiWalletToWalletInfo)
      );
    }
    return walletsList;
  }
  function eqWalletName(wallet1, name) {
    if (!name) {
      return false;
    }
    return wallet1.name.toLowerCase() === name.toLowerCase() || wallet1.appName.toLowerCase() === name.toLowerCase();
  }
  const [isMobile, setIsMobile] = createSignal(isDevice("mobile"));
  if (getWindow$1()) {
    window.addEventListener("resize", () => setIsMobile(isDevice("mobile")));
  }
  const UlStyled = styled.ul`
    display: flex;
    margin: 0 auto 24px;
    width: fit-content;
    min-height: 124px;
    max-width: 100%;
    overflow-x: auto;
    overflow-y: hidden;
    padding: 0 24px;

    &&::-webkit-scrollbar {
        display: none;
    }

    -ms-overflow-style: none;
    scrollbar-width: none;
`;
  const DefaultWallet = styled.li`
    width: 82px;
    min-width: 82px;
    height: 124px;
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 8px 4px;

    text-align: center;
    cursor: pointer;

    transition: transform 0.1s ease-in-out;

    ${mediaNotTouch} {
        &:hover {
            transform: scale(1.04);
        }
    }

    &:active {
        transform: scale(0.96);
    }

    ${mediaTouch} {
        &:active {
            transform: scale(0.92);
        }
    }
`;
  const Divider = styled.div`
    width: 1px;
    margin: 0 10px;
    height: 24px;
    position: relative;
    top: 30px;

    background-color: ${(props) => props.theme.colors.icon.tertiary};
`;
  const LongArrowIconContainer = styled.div`
    width: 64px;
    height: 64px;
    border-radius: 16px;
    display: flex;
    align-items: center;
    justify-content: center;

    background-color: ${(props) => rgba(props.theme.colors.accent, 0.12)};
    color: ${(props) => props.theme.colors.accent};

    margin-bottom: 8px;
`;
  const H2Styled$2 = styled(H2)`
    margin-bottom: 24px;
    padding: 0 24px;
    min-height: 44px;
`;
  const ButtonStyled$2 = styled(Button)`
    display: block;
    margin: 0 auto;
`;
  const LINKS = {
    LEARN_MORE: "https://ton.org/wallets"
  };
  const _tmpl$$2 = /* @__PURE__ */ template$1(`<div data-tc-wallets-modal-mobile="true"></div>`), _tmpl$2 = /* @__PURE__ */ template$1(`<li></li>`);
  const MobileSelectWalletModal = (props) => {
    const connector = appState.connector;
    const theme = useTheme();
    const onSelect = (walletInfo) => {
      if (!isMobileUserAgent()) {
        return props.onSelect(walletInfo);
      }
      if ("universalLink" in walletInfo) {
        setLastSelectedWalletInfo(__spreadProps(__spreadValues({}, walletInfo), {
          openMethod: "universal-link"
        }));
        const universalLink = connector.connect({
          universalLink: walletInfo.universalLink,
          bridgeUrl: walletInfo.bridgeUrl
        }, props.additionalRequest);
        openLink(addReturnStrategy(universalLink, appState.returnStrategy));
        return;
      }
      openLinkBlank(walletInfo.aboutUrl);
    };
    const onSelectUniversal = () => {
      const universalLink = connector.connect(props.walletsList.filter(sdk.isWalletInfoRemote).map((item) => ({
        bridgeUrl: item.bridgeUrl,
        universalLink: item.universalLink
      })), props.additionalRequest);
      setLastSelectedWalletInfo({
        openMethod: "universal-link"
      });
      openLink(addReturnStrategy(universalLink, appState.returnStrategy));
    };
    return (() => {
      const _el$ = _tmpl$$2.cloneNode(true);
      insert(_el$, createComponent(H1, {
        translationKey: "walletModal.mobileSelectWalletModal.connectWallet",
        children: "Connect a wallet"
      }), null);
      insert(_el$, createComponent(H2Styled$2, {
        translationKey: "walletModal.mobileSelectWalletModal.selectWallet",
        children: "Select your wallet from the options to get started."
      }), null);
      insert(_el$, createComponent(UlStyled, {
        get children() {
          return [createComponent(DefaultWallet, {
            onClick: onSelectUniversal,
            get children() {
              return [createComponent(LongArrowIconContainer, {
                get children() {
                  return createComponent(LongArrowIcon, {
                    get fill() {
                      return theme.colors.accent;
                    }
                  });
                }
              }), createComponent(Text, {
                fontWeight: 590,
                translationKey: "walletModal.mobileSelectWalletModal.installedWallet",
                children: "Installed wallet"
              })];
            }
          }), createComponent(Divider, {
            children: "\xA0"
          }), createComponent(For, {
            get each() {
              return props.walletsList.filter((wallet) => "bridgeUrl" in wallet);
            },
            children: (wallet) => (() => {
              const _el$2 = _tmpl$2.cloneNode(true);
              insert(_el$2, createComponent(WalletItem, {
                get iconUrl() {
                  return wallet.imageUrl;
                },
                get name() {
                  return wallet.name;
                },
                onClick: () => onSelect(wallet)
              }));
              return _el$2;
            })()
          })];
        }
      }), null);
      insert(_el$, createComponent(Link, {
        get href() {
          return LINKS.LEARN_MORE;
        },
        blank: true,
        get children() {
          return createComponent(ButtonStyled$2, {
            get children() {
              return createComponent(Translation, {
                translationKey: "common.learnMore",
                children: "Learn more"
              });
            }
          });
        }
      }), null);
      return _el$;
    })();
  };
  const borders = {
    m: "16px",
    s: "8px",
    none: "0"
  };
  const hoverBorders = {
    m: "8px",
    s: "4px",
    none: "0"
  };
  const UniversalQrModalStyled = styled.div`
    display: flex;
    flex-direction: column;
    align-items: center;
`;
  const H2Styled$1 = styled(H2)`
    max-width: 320px;
    margin-bottom: 24px;
`;
  const QRCodeStyled = styled(QRCode)`
    margin-bottom: 16px;
`;
  const ButtonsContainerStyled = styled.div`
    display: flex;
    gap: 16px;
    width: 100%;
`;
  const ActionButtonStyled = styled(Button)`
    position: relative;
    font-size: 16px;
    line-height: 20px;
    width: 100%;
    padding: 0 16px;
    height: 56px;
    border-radius: ${(props) => borders[props.theme.borderRadius]};

    &:hover {
        ${(props) => props.disableEventsAnimation ? "transform: unset;" : ""}
    }

    &:active {
        ${(props) => props.disableEventsAnimation ? "transform: unset;" : ""}
    }
`;
  const PopupWrapperStyled = styled.ul`
    position: absolute;
    bottom: 100%;
    left: 0;
    margin: 0;
    padding: 8px;
    width: 188px;
    transform: translateY(-16px);

    background-color: ${(props) => props.theme.colors.background.primary};
    border-radius: ${(props) => borders[props.theme.borderRadius]};
    box-shadow: 0 4px 24px rgba(0, 0, 0, 0.16);
`;
  const ExtensionLiStyled = styled.li`
    padding: 8px;

    display: flex;
    align-items: center;
    gap: 8px;

    cursor: pointer;
    border-radius: ${(props) => hoverBorders[props.theme.borderRadius]};

    transition: background-color, transform 0.1s ease-in-out;

    &:hover {
        background-color: ${(props) => props.theme.colors.background.secondary};
    }

    &:active {
        transform: scale(0.96);
    }
`;
  const ImageStyled = styled(Image)`
    width: 24px;
    height: 24px;

    border-radius: 6px;
`;
  const GetWalletStyled = styled.div`
    margin-top: 23px;
    margin-bottom: 1px;
    width: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
`;
  styled(Text)`
    color: ${(props) => props.theme.colors.text.secondary};
    font-size: 16px;
`;
  const UniversalQrModal = (props) => {
    const [popupOpened, setPopupOpened] = createSignal(false);
    const connector = appState.connector;
    const walletsBridges = props.walletsList.filter(sdk.isWalletInfoRemote).map((item) => ({
      bridgeUrl: item.bridgeUrl,
      universalLink: item.universalLink
    }));
    const availableInjectableWallets = props.walletsList.filter(sdk.isWalletInfoCurrentlyInjected);
    setLastSelectedWalletInfo({
      openMethod: "qrcode"
    });
    const request = createMemo(() => connector.connect(walletsBridges, props.additionalRequest));
    const onOpenWalletClick = () => {
      let blurred = false;
      function blurHandler() {
        blurred = true;
        setLastSelectedWalletInfo({
          openMethod: "universal-link"
        });
        window.removeEventListener("blur", blurHandler);
      }
      window.addEventListener("blur", blurHandler);
      openLink(addReturnStrategy(request(), appState.returnStrategy));
      setTimeout(() => {
        if (!blurred) {
          props.openWalletFallback();
        }
        window.removeEventListener("blur", blurHandler);
      }, 200);
    };
    const onOpenExtensionClick = (e2) => {
      e2.stopPropagation();
      if (availableInjectableWallets.length === 1) {
        const walletInfo = availableInjectableWallets[0];
        setLastSelectedWalletInfo(walletInfo);
        connector.connect({
          jsBridgeKey: walletInfo.jsBridgeKey
        }, props.additionalRequest);
        return;
      }
      setPopupOpened((opened) => !opened);
    };
    const onExtensionClick = (walletInfo) => {
      setLastSelectedWalletInfo(walletInfo);
      connector.connect({
        jsBridgeKey: walletInfo.jsBridgeKey
      }, props.additionalRequest);
    };
    return createComponent(UniversalQrModalStyled, {
      onClick: () => setPopupOpened(false),
      "data-tc-universal-qr-desktop": "true",
      get children() {
        return [createComponent(H2Styled$1, {
          translationKey: "walletModal.universalQRModal.scanQR",
          children: "Scan QR code with a TON Connect compatible wallet."
        }), createComponent(QRCodeStyled, {
          get sourceUrl() {
            return request();
          },
          get disableCopy() {
            return popupOpened();
          }
        }), createComponent(ButtonsContainerStyled, {
          get children() {
            return [createComponent(ActionButtonStyled, {
              onClick: onOpenWalletClick,
              scale: "s",
              get children() {
                return [createComponent(Show, {
                  get when() {
                    return availableInjectableWallets.length;
                  },
                  get children() {
                    return createComponent(Translation, {
                      translationKey: "walletModal.universalQRModal.openWallet",
                      children: "Open Wallet"
                    });
                  }
                }), createComponent(Show, {
                  get when() {
                    return !availableInjectableWallets.length;
                  },
                  get children() {
                    return createComponent(Translation, {
                      translationKey: "walletModal.universalQRModal.openInstalledWallet",
                      children: "Open Installed Wallet"
                    });
                  }
                })];
              }
            }), createComponent(Show, {
              get when() {
                return availableInjectableWallets.length;
              },
              get children() {
                return createComponent(ActionButtonStyled, {
                  onClick: onOpenExtensionClick,
                  get disableEventsAnimation() {
                    return popupOpened();
                  },
                  scale: "s",
                  get children() {
                    return [createComponent(Transition, {
                      onBeforeEnter: (el) => {
                        el.animate([{
                          opacity: 0,
                          transform: "translateY(0)"
                        }, {
                          opacity: 1,
                          transform: "translateY(-16px)"
                        }], {
                          duration: 150
                        });
                      },
                      onExit: (el, done) => {
                        el.animate([{
                          opacity: 1,
                          transform: "translateY(-16px)"
                        }, {
                          opacity: 0,
                          transform: "translateY(0)"
                        }], {
                          duration: 150
                        }).finished.then(done);
                      },
                      get children() {
                        return createComponent(Show, {
                          get when() {
                            return popupOpened();
                          },
                          get children() {
                            return createComponent(PopupWrapperStyled, {
                              get children() {
                                return createComponent(For, {
                                  each: availableInjectableWallets,
                                  children: (wallet) => createComponent(ExtensionLiStyled, {
                                    onClick: () => onExtensionClick(wallet),
                                    get children() {
                                      return [createComponent(ImageStyled, {
                                        get src() {
                                          return wallet.imageUrl;
                                        },
                                        alt: ""
                                      }), createComponent(Text, {
                                        fontWeight: 590,
                                        get children() {
                                          return wallet.name;
                                        }
                                      })];
                                    }
                                  })
                                });
                              }
                            });
                          }
                        });
                      }
                    }), createComponent(Translation, {
                      translationKey: "common.openExtension",
                      children: "Open Extension"
                    })];
                  }
                });
              }
            })];
          }
        }), createComponent(Show, {
          get when() {
            return !availableInjectableWallets.length;
          },
          get children() {
            return createComponent(GetWalletStyled, {
              get children() {
                return createComponent(Link, {
                  get href() {
                    return LINKS.LEARN_MORE;
                  },
                  blank: true,
                  get children() {
                    return createComponent(Button, {
                      appearance: "flat",
                      "class": u`
                                font-size: 15px;
                            `,
                      get children() {
                        return createComponent(Translation, {
                          translationKey: "common.learnMore",
                          children: "Learn more"
                        });
                      }
                    });
                  }
                });
              }
            });
          }
        })];
      }
    });
  };
  const DesktopSelectWalletModalStyled = styled.div`
    display: flex;
    flex-direction: column;
    align-items: center;
`;
  const H2Styled = styled(H2)`
    margin-bottom: 26px;
`;
  const WalletsUl = styled.ul`
    display: grid;
    grid-template-columns: repeat(auto-fit, 92px);
    justify-content: center;
    row-gap: 8px;
    overflow-y: auto;
    max-height: 410px;
    width: calc(100% + 12px);
    margin-bottom: 30px;
    padding: 10px 0;
    align-self: flex-start;

    &&::-webkit-scrollbar {
        width: 8px;
    }

    &&::-webkit-scrollbar-track {
        background: transparent;
    }

    &&::-webkit-scrollbar-thumb {
        background: #cacaca;
        border-radius: 12px;
    }
`;
  const ButtonStyled$1 = styled(Button)`
    display: block;
    margin: 0 auto 1px;
    font-size: 15px;
`;
  const _tmpl$$1 = /* @__PURE__ */ template$1(`<li></li>`);
  const DesktopSelectWalletModal = (props) => {
    return createComponent(DesktopSelectWalletModalStyled, {
      "data-tc-select-wallet-desktop": "true",
      get children() {
        return [createComponent(H2Styled, {
          translationKey: "walletModal.desktopSelectWalletModal.selectWallet",
          children: "Choose your preferred wallet from the options to get started."
        }), createComponent(WalletsUl, {
          get children() {
            return createComponent(For, {
              get each() {
                return props.walletsList;
              },
              children: (wallet) => (() => {
                const _el$ = _tmpl$$1.cloneNode(true);
                insert(_el$, createComponent(WalletItem, {
                  get iconUrl() {
                    return wallet.imageUrl;
                  },
                  get name() {
                    return wallet.name;
                  },
                  onClick: () => props.onSelect(wallet)
                }));
                return _el$;
              })()
            });
          }
        }), createComponent(Link, {
          get href() {
            return LINKS.LEARN_MORE;
          },
          blank: true,
          get children() {
            return createComponent(ButtonStyled$1, {
              appearance: "flat",
              get children() {
                return createComponent(Translation, {
                  translationKey: "common.learnMore",
                  children: "Learn more"
                });
              }
            });
          }
        })];
      }
    });
  };
  const _tmpl$ = /* @__PURE__ */ template$1(`<div data-tc-wallets-modal-desktop="true"></div>`);
  const WalletsModal = () => {
    const {
      locale
    } = useI18n()[1];
    createEffect(() => locale(appState.language));
    const connector = useContext(ConnectorContext);
    const tonConnectUI = useContext(TonConnectUiContext);
    const [fetchedWalletsList] = createResource(() => tonConnectUI.getWallets());
    const [selectedWalletInfo, setSelectedWalletInfo] = createSignal(null);
    const [selectedTabIndex, setSelectedTabIndex] = createSignal(0);
    const walletsList = createMemo(() => {
      if (fetchedWalletsList.state !== "ready") {
        return null;
      }
      let walletsList2 = applyWalletsListConfiguration(fetchedWalletsList(), appState.walletsListConfiguration);
      const preferredWalletName = appState.preferredWalletName;
      const preferredWallet = walletsList2.find((item) => eqWalletName(item, preferredWalletName));
      const someWalletsWithSameName = walletsList2.filter((item) => eqWalletName(item, preferredWalletName)).length >= 2;
      if (preferredWalletName && preferredWallet && !someWalletsWithSameName) {
        walletsList2 = [preferredWallet].concat(walletsList2.filter((item) => !eqWalletName(item, preferredWalletName)));
      }
      return walletsList2;
    });
    const additionalRequestLoading = () => {
      var _a2;
      return ((_a2 = appState.connectRequestParameters) == null ? void 0 : _a2.state) === "loading";
    };
    const additionalRequest = createMemo(() => {
      var _a2;
      if (additionalRequestLoading()) {
        return void 0;
      }
      return (_a2 = appState.connectRequestParameters) == null ? void 0 : _a2.value;
    });
    const onClose = () => {
      setWalletsModalOpen(false);
      setSelectedWalletInfo(null);
    };
    const onSelectInDesktopList = (walletInfo) => {
      if (sdk.isWalletInfoCurrentlyInjected(walletInfo)) {
        setLastSelectedWalletInfo(walletInfo);
        connector.connect({
          jsBridgeKey: walletInfo.jsBridgeKey
        }, additionalRequest());
        return;
      }
      if (sdk.isWalletInfoRemote(walletInfo)) {
        setLastSelectedWalletInfo(__spreadProps(__spreadValues({}, walletInfo), {
          openMethod: "qrcode"
        }));
        setSelectedWalletInfo(walletInfo);
        return;
      }
      openLinkBlank(walletInfo.aboutUrl);
    };
    const unsubscribe = connector.onStatusChange((wallet) => {
      if (wallet) {
        onClose();
      }
    });
    onCleanup(unsubscribe);
    return createComponent(StyledModal, {
      get opened() {
        return walletsModalOpen();
      },
      onClose,
      "data-tc-wallets-modal-container": "true",
      get children() {
        return [createComponent(Show, {
          get when() {
            return additionalRequestLoading() || !walletsList();
          },
          get children() {
            return [createComponent(H1Styled$1, {
              translationKey: "walletModal.loading",
              children: "Wallets list is loading"
            }), createComponent(LoaderContainerStyled, {
              get children() {
                return createComponent(LoaderIcon, {
                  size: "m"
                });
              }
            })];
          }
        }), createComponent(Show, {
          get when() {
            return createMemo(() => !!!additionalRequestLoading())() && walletsList();
          },
          get children() {
            return [createComponent(Show, {
              get when() {
                return createMemo(() => !!isMobile())() && !selectedWalletInfo();
              },
              get children() {
                return createComponent(MobileSelectWalletModal, {
                  onSelect: onSelectInDesktopList,
                  get walletsList() {
                    return walletsList();
                  },
                  get additionalRequest() {
                    return additionalRequest();
                  }
                });
              }
            }), createComponent(Show, {
              get when() {
                return !isMobile();
              },
              get children() {
                return createComponent(Show, {
                  get when() {
                    return !selectedWalletInfo();
                  },
                  get children() {
                    const _el$ = _tmpl$.cloneNode(true);
                    insert(_el$, createComponent(TabBarStyled, {
                      get tab1() {
                        return createComponent(TabTextStyled, {
                          translationKey: "walletModal.qrCode",
                          cursor: "unset",
                          children: "QR Code"
                        });
                      },
                      get tab2() {
                        return createComponent(TabTextStyled, {
                          translationKey: "walletModal.wallets",
                          cursor: "unset",
                          children: "Wallets"
                        });
                      },
                      get selectedTabIndex() {
                        return selectedTabIndex();
                      },
                      onSelectedTabIndexChange: setSelectedTabIndex
                    }), null);
                    insert(_el$, createComponent(Switch, {
                      get children() {
                        return [createComponent(Match, {
                          get when() {
                            return selectedTabIndex() === 0;
                          },
                          get children() {
                            return createComponent(UniversalQrModal, {
                              get walletsList() {
                                return walletsList();
                              },
                              get additionalRequest() {
                                return additionalRequest();
                              },
                              openWalletFallback: () => setSelectedTabIndex(1)
                            });
                          }
                        }), createComponent(Match, {
                          get when() {
                            return selectedTabIndex() === 1;
                          },
                          get children() {
                            return createComponent(DesktopSelectWalletModal, {
                              get walletsList() {
                                return walletsList();
                              },
                              onSelect: onSelectInDesktopList
                            });
                          }
                        })];
                      }
                    }), null);
                    return _el$;
                  }
                });
              }
            }), createComponent(Show, {
              get when() {
                return selectedWalletInfo();
              },
              get children() {
                return createComponent(QrCodeModal, {
                  get additionalRequest() {
                    return additionalRequest();
                  },
                  get wallet() {
                    return selectedWalletInfo();
                  },
                  onBackClick: () => setSelectedWalletInfo(null)
                });
              }
            })];
          }
        })];
      }
    });
  };
  const ActionModalStyled = styled.div`
    display: flex;
    flex-direction: column;
    align-items: center;
    padding-bottom: 8px;
`;
  const H1Styled = styled(H1)`
    margin-top: 16px;
`;
  const TextStyled = styled(Text)`
    font-weight: 510;
    font-size: 16px;
    line-height: 20px;
    text-align: center;
    max-width: 250px;

    color: ${(props) => props.theme.colors.text.secondary};
`;
  const ButtonStyled = styled(Button)`
    margin-top: 32px;
`;
  const ActionModal = (props) => {
    const dataAttrs = useDataAttributes(props);
    const tonConnectUI = useContext(TonConnectUiContext);
    let universalLink;
    if ((tonConnectUI == null ? void 0 : tonConnectUI.wallet) && "universalLink" in tonConnectUI.wallet && tonConnectUI.wallet.openMethod === "universal-link") {
      universalLink = tonConnectUI.wallet.universalLink;
    }
    const onOpenWallet = () => {
      openLink(addReturnStrategy(universalLink, "back"));
    };
    return createComponent(ActionModalStyled, mergeProps(dataAttrs, {
      get children() {
        return [createMemo(() => props.icon), createComponent(H1Styled, {
          get translationKey() {
            return props.headerTranslationKey;
          },
          get translationValues() {
            return props.headerTranslationValues;
          }
        }), createComponent(TextStyled, {
          get translationKey() {
            return props.textTranslationKey;
          },
          get translationValues() {
            return props.textTranslationValues;
          }
        }), createComponent(Show, {
          get when() {
            return props.showButton !== "open-wallet";
          },
          get children() {
            return createComponent(ButtonStyled, {
              onClick: () => props.onClose(),
              get children() {
                return createComponent(Translation, {
                  translationKey: "common.close",
                  children: "Close"
                });
              }
            });
          }
        }), createComponent(Show, {
          get when() {
            return props.showButton === "open-wallet" && universalLink;
          },
          get children() {
            return createComponent(ButtonStyled, {
              onClick: onOpenWallet,
              get children() {
                return createComponent(Translation, {
                  translationKey: "common.openWallet",
                  children: "Open wallet"
                });
              }
            });
          }
        })];
      }
    }));
  };
  const ConfirmTransactionModal = (props) => {
    var _a2;
    const tonConnectUI = useContext(TonConnectUiContext);
    const [t2] = useI18n();
    const name = ((_a2 = tonConnectUI.wallet) == null ? void 0 : _a2.name) || t2("common.yourWallet", {}, "your wallet");
    return createComponent(ActionModal, {
      headerTranslationKey: "actionModal.confirmTransaction.header",
      headerTranslationValues: {
        name
      },
      textTranslationKey: "actionModal.confirmTransaction.text",
      get icon() {
        return createComponent(LoaderIcon, {
          size: "m"
        });
      },
      onClose: () => props.onClose(),
      showButton: "open-wallet",
      "data-tc-confirm-modal": "true"
    });
  };
  const TransactionCanceledModal = (props) => {
    return createComponent(ActionModal, {
      headerTranslationKey: "actionModal.transactionCanceled.header",
      textTranslationKey: "actionModal.transactionCanceled.text",
      get icon() {
        return createComponent(ErrorIcon, {
          size: "m"
        });
      },
      onClose: () => props.onClose(),
      "data-tc-transaction-canceled-modal": "true"
    });
  };
  const TransactionSentModal = (props) => {
    return createComponent(ActionModal, {
      headerTranslationKey: "actionModal.transactionSent.header",
      textTranslationKey: "actionModal.transactionSent.text",
      get icon() {
        return createComponent(SuccessIcon, {
          size: "m"
        });
      },
      onClose: () => props.onClose(),
      "data-tc-transaction-sent-modal": "true"
    });
  };
  const ActionsModal = () => {
    return createComponent(Modal, {
      get opened() {
        var _a2;
        return createMemo(() => action() !== null)() && ((_a2 = action()) == null ? void 0 : _a2.openModal) === true;
      },
      onClose: () => setAction(null),
      "data-tc-actions-modal-container": "true",
      get children() {
        return createComponent(Switch, {
          get children() {
            return [createComponent(Match, {
              get when() {
                return action().name === "transaction-sent";
              },
              get children() {
                return createComponent(TransactionSentModal, {
                  onClose: () => setAction(null)
                });
              }
            }), createComponent(Match, {
              get when() {
                return action().name === "transaction-canceled";
              },
              get children() {
                return createComponent(TransactionCanceledModal, {
                  onClose: () => setAction(null)
                });
              }
            }), createComponent(Match, {
              get when() {
                return action().name === "confirm-transaction";
              },
              get children() {
                return createComponent(ConfirmTransactionModal, {
                  onClose: () => setAction(null)
                });
              }
            })];
          }
        });
      }
    });
  };
  const App = (props) => {
    const translations = createI18nContext(i18nDictionary, appState.language);
    defineStylesRoot();
    fixMobileSafariActiveTransition();
    return createComponent(I18nContext.Provider, {
      value: translations,
      get children() {
        return createComponent(TonConnectUiContext.Provider, {
          get value() {
            return props.tonConnectUI;
          },
          get children() {
            return createComponent(ConnectorContext.Provider, {
              get value() {
                return appState.connector;
              },
              get children() {
                return [createComponent(GlobalStyles, {}), createComponent(ThemeProvider, {
                  theme: themeState,
                  get children() {
                    return [createComponent(Show, {
                      get when() {
                        return appState.buttonRootId;
                      },
                      get children() {
                        return createComponent(Portal, {
                          get mount() {
                            return document.getElementById(appState.buttonRootId);
                          },
                          get children() {
                            return createComponent(AccountButton, {});
                          }
                        });
                      }
                    }), createComponent(Dynamic, {
                      component: globalStylesTag,
                      get children() {
                        return [createComponent(WalletsModal, {}), createComponent(ActionsModal, {})];
                      }
                    })];
                  }
                })];
              }
            });
          }
        });
      }
    });
  };
  const widgetController = {
    openWalletsModal: () => void setTimeout(() => setWalletsModalOpen(true)),
    closeWalletsModal: () => void setTimeout(() => setWalletsModalOpen(false)),
    setAction: (action2) => void setTimeout(() => setAction(action2)),
    clearAction: () => void setTimeout(() => setAction(null)),
    getSelectedWalletInfo: () => lastSelectedWalletInfo(),
    renderApp: (root, tonConnectUI) => render(() => createComponent(App, {
      tonConnectUI
    }), document.getElementById(root))
  };
  class WalletInfoStorage {
    constructor() {
      __publicField(this, "localStorage");
      __publicField(this, "storageKey", "ton-connect-ui_wallet-info");
      checkLocalStorageExists();
      this.localStorage = localStorage;
    }
    setWalletInfo(walletInfo) {
      this.localStorage.setItem(this.storageKey, JSON.stringify(walletInfo));
    }
    getWalletInfo() {
      const walletInfoString = this.localStorage.getItem(this.storageKey);
      if (!walletInfoString) {
        return null;
      }
      return JSON.parse(walletInfoString);
    }
    removeWalletInfo() {
      this.localStorage.removeItem(this.storageKey);
    }
  }
  class PreferredWalletStorage {
    constructor() {
      __publicField(this, "localStorage");
      __publicField(this, "storageKey", "ton-connect-ui_preferred-wallet");
      checkLocalStorageExists();
      this.localStorage = localStorage;
    }
    setPreferredWalletName(name) {
      this.localStorage.setItem(this.storageKey, name);
    }
    getPreferredWalletName() {
      return this.localStorage.getItem(this.storageKey) || void 0;
    }
  }
  class TonConnectUI {
    constructor(options) {
      __publicField(this, "walletInfoStorage", new WalletInfoStorage());
      __publicField(this, "preferredWalletStorage", new PreferredWalletStorage());
      __publicField(this, "connector");
      __publicField(this, "walletInfo", null);
      __publicField(this, "systemThemeChangeUnsubscribe", null);
      __publicField(this, "actionsConfiguration");
      __publicField(this, "walletsList");
      __publicField(this, "connectRequestParametersCallback");
      __publicField(this, "connectionRestored", Promise.resolve(false));
      if (options && "connector" in options && options.connector) {
        this.connector = options.connector;
      } else if (options && "manifestUrl" in options && options.manifestUrl) {
        this.connector = new sdk.TonConnect({ manifestUrl: options.manifestUrl });
      } else {
        throw new TonConnectUIError(
          "You have to specify a `manifestUrl` or a `connector` in the options."
        );
      }
      this.walletsList = this.getWallets();
      this.walletsList.then((list) => preloadImages(uniq(list.map((item) => item.imageUrl))));
      const rootId = this.normalizeWidgetRoot(options == null ? void 0 : options.widgetRootId);
      this.subscribeToWalletChange();
      if ((options == null ? void 0 : options.restoreConnection) !== false) {
        this.connectionRestored = new Promise((resolve) => __async(this, null, function* () {
          yield this.connector.restoreConnection();
          if (!this.connector.connected) {
            this.walletInfoStorage.removeWalletInfo();
          }
          resolve(this.connector.connected);
        }));
      }
      this.uiOptions = mergeOptions(options, { uiPreferences: { theme: "SYSTEM" } });
      const preferredWalletName = this.preferredWalletStorage.getPreferredWalletName();
      setAppState({
        connector: this.connector,
        preferredWalletName
      });
      widgetController.renderApp(rootId, this);
    }
    static getWallets() {
      return sdk.TonConnect.getWallets();
    }
    get connected() {
      return this.connector.connected;
    }
    get account() {
      return this.connector.account;
    }
    get wallet() {
      if (!this.connector.wallet || !this.walletInfo) {
        return null;
      }
      return __spreadValues(__spreadValues({}, this.connector.wallet), this.walletInfo);
    }
    set uiOptions(options) {
      var _a2, _b, _c, _d, _e;
      this.checkButtonRootExist(options.buttonRootId);
      this.actionsConfiguration = options.actionsConfiguration;
      if ((_a2 = options.uiPreferences) == null ? void 0 : _a2.theme) {
        if (((_b = options.uiPreferences) == null ? void 0 : _b.theme) !== "SYSTEM") {
          (_c = this.systemThemeChangeUnsubscribe) == null ? void 0 : _c.call(this);
          setTheme(options.uiPreferences.theme, options.uiPreferences.colorsSet);
        } else {
          setTheme(getSystemTheme(), options.uiPreferences.colorsSet);
          if (!this.systemThemeChangeUnsubscribe) {
            this.systemThemeChangeUnsubscribe = subscribeToThemeChange(setTheme);
          }
        }
      } else {
        if ((_d = options.uiPreferences) == null ? void 0 : _d.colorsSet) {
          setColors(options.uiPreferences.colorsSet);
        }
      }
      if ((_e = options.uiPreferences) == null ? void 0 : _e.borderRadius) {
        setBorderRadius(options.uiPreferences.borderRadius);
      }
      setAppState((state) => {
        var _a3;
        const merged = mergeOptions(
          __spreadValues(__spreadValues(__spreadValues({}, options.language && { language: options.language }), !!((_a3 = options.actionsConfiguration) == null ? void 0 : _a3.returnStrategy) && {
            returnStrategy: options.actionsConfiguration.returnStrategy
          }), !!options.walletsListConfiguration && {
            walletsListConfiguration: options.walletsListConfiguration
          }),
          unwrap(state)
        );
        if (options.buttonRootId !== void 0) {
          merged.buttonRootId = options.buttonRootId;
        }
        return merged;
      });
    }
    setConnectRequestParameters(connectRequestParameters) {
      var _a2;
      setAppState({ connectRequestParameters });
      if ((connectRequestParameters == null ? void 0 : connectRequestParameters.state) === "ready" || !connectRequestParameters) {
        (_a2 = this.connectRequestParametersCallback) == null ? void 0 : _a2.call(this, connectRequestParameters == null ? void 0 : connectRequestParameters.value);
      }
    }
    getWallets() {
      return __async(this, null, function* () {
        return this.connector.getWallets();
      });
    }
    onStatusChange(callback, errorsHandler) {
      return this.connector.onStatusChange((wallet) => __async(this, null, function* () {
        if (wallet) {
          const lastSelectedWalletInfo2 = yield this.getSelectedWalletInfo(wallet);
          callback(__spreadValues(__spreadValues({}, wallet), lastSelectedWalletInfo2 || this.walletInfoStorage.getWalletInfo()));
        } else {
          callback(wallet);
        }
      }), errorsHandler);
    }
    connectWallet() {
      return __async(this, null, function* () {
        const walletsList = yield this.getWallets();
        const embeddedWallet = walletsList.find(sdk.isWalletInfoCurrentlyEmbedded);
        if (embeddedWallet) {
          const connect = (parameters) => {
            setLastSelectedWalletInfo(embeddedWallet);
            this.connector.connect({ jsBridgeKey: embeddedWallet.jsBridgeKey }, parameters);
          };
          const additionalRequest = appState.connectRequestParameters;
          if ((additionalRequest == null ? void 0 : additionalRequest.state) === "loading") {
            this.connectRequestParametersCallback = connect;
          } else {
            connect(additionalRequest == null ? void 0 : additionalRequest.value);
          }
        } else {
          widgetController.openWalletsModal();
        }
        return new Promise((resolve, reject) => {
          const unsubscribe = this.connector.onStatusChange((wallet) => __async(this, null, function* () {
            unsubscribe();
            if (wallet) {
              const lastSelectedWalletInfo2 = yield this.getSelectedWalletInfo(wallet);
              resolve(__spreadValues(__spreadValues({}, wallet), lastSelectedWalletInfo2 || this.walletInfoStorage.getWalletInfo()));
            } else {
              reject(new TonConnectUIError("Wallet was not connected"));
            }
          }), reject);
        });
      });
    }
    disconnect() {
      widgetController.clearAction();
      this.walletInfoStorage.removeWalletInfo();
      return this.connector.disconnect();
    }
    sendTransaction(tx, options) {
      return __async(this, null, function* () {
        if (!this.connected || !this.walletInfo) {
          throw new TonConnectUIError("Connect wallet to send a transaction.");
        }
        const { notifications: notifications2, modals, returnStrategy, skipRedirectToWallet } = this.getModalsAndNotificationsConfiguration(options);
        const userOSIsIos = getUserAgent().os === "ios";
        const shouldSkipRedirectToWallet = skipRedirectToWallet === "ios" && userOSIsIos || skipRedirectToWallet === "always";
        if ("universalLink" in this.walletInfo && this.walletInfo.openMethod === "universal-link" && !shouldSkipRedirectToWallet) {
          openLink(addReturnStrategy(this.walletInfo.universalLink, returnStrategy));
        }
        widgetController.setAction({
          name: "confirm-transaction",
          showNotification: notifications2.includes("before"),
          openModal: modals.includes("before")
        });
        try {
          const result = yield this.connector.sendTransaction(tx);
          widgetController.setAction({
            name: "transaction-sent",
            showNotification: notifications2.includes("success"),
            openModal: modals.includes("success")
          });
          return result;
        } catch (e2) {
          widgetController.setAction({
            name: "transaction-canceled",
            showNotification: notifications2.includes("error"),
            openModal: modals.includes("error")
          });
          if (e2 instanceof sdk.TonConnectError) {
            throw e2;
          } else {
            console.error(e2);
            throw new TonConnectUIError("Unhandled error:" + e2);
          }
        }
      });
    }
    subscribeToWalletChange() {
      this.connector.onStatusChange((wallet) => __async(this, null, function* () {
        var _a2;
        if (wallet) {
          yield this.updateWalletInfo(wallet);
          this.setPreferredWalletName(((_a2 = this.walletInfo) == null ? void 0 : _a2.appName) || wallet.device.appName);
        } else {
          this.walletInfoStorage.removeWalletInfo();
        }
      }));
    }
    setPreferredWalletName(value) {
      this.preferredWalletStorage.setPreferredWalletName(value);
      setAppState({ preferredWalletName: value });
    }
    getSelectedWalletInfo(wallet) {
      return __async(this, null, function* () {
        let lastSelectedWalletInfo2 = widgetController.getSelectedWalletInfo();
        if (!lastSelectedWalletInfo2) {
          return null;
        }
        let fullLastSelectedWalletInfo;
        if (!("name" in lastSelectedWalletInfo2)) {
          const walletsList = applyWalletsListConfiguration(
            yield this.walletsList,
            appState.walletsListConfiguration
          );
          const walletInfo = walletsList.find((item) => eqWalletName(item, wallet.device.appName));
          if (!walletInfo) {
            throw new TonConnectUIError(
              `Cannot find WalletInfo for the '${wallet.device.appName}' wallet`
            );
          }
          fullLastSelectedWalletInfo = __spreadValues(__spreadValues({}, walletInfo), lastSelectedWalletInfo2);
        } else {
          fullLastSelectedWalletInfo = lastSelectedWalletInfo2;
        }
        return fullLastSelectedWalletInfo;
      });
    }
    updateWalletInfo(wallet) {
      return __async(this, null, function* () {
        const selectedWalletInfo = yield this.getSelectedWalletInfo(wallet);
        if (selectedWalletInfo) {
          this.walletInfo = selectedWalletInfo;
          this.walletInfoStorage.setWalletInfo(selectedWalletInfo);
        } else {
          this.walletInfo = this.walletInfoStorage.getWalletInfo();
        }
      });
    }
    normalizeWidgetRoot(rootId) {
      if (!rootId || !document.getElementById(rootId)) {
        rootId = "tc-widget-root";
        const rootElement = document.createElement("div");
        rootElement.id = rootId;
        document.body.appendChild(rootElement);
      }
      return rootId;
    }
    checkButtonRootExist(buttonRootId) {
      if (buttonRootId == null) {
        return;
      }
      if (!document.getElementById(buttonRootId)) {
        throw new TonConnectUIError(`${buttonRootId} element not found in the document.`);
      }
    }
    getModalsAndNotificationsConfiguration(options) {
      var _a2, _b, _c, _d, _e;
      const allActions = [
        "before",
        "success",
        "error"
      ];
      let notifications2 = allActions;
      if (((_a2 = this.actionsConfiguration) == null ? void 0 : _a2.notifications) && ((_b = this.actionsConfiguration) == null ? void 0 : _b.notifications) !== "all") {
        notifications2 = this.actionsConfiguration.notifications;
      }
      if (options == null ? void 0 : options.notifications) {
        if (options.notifications === "all") {
          notifications2 = allActions;
        } else {
          notifications2 = options.notifications;
        }
      }
      let modals = ["before"];
      if ((_c = this.actionsConfiguration) == null ? void 0 : _c.modals) {
        if (this.actionsConfiguration.modals === "all") {
          modals = allActions;
        } else {
          modals = this.actionsConfiguration.modals;
        }
      }
      if (options == null ? void 0 : options.modals) {
        if (options.modals === "all") {
          modals = allActions;
        } else {
          modals = options.modals;
        }
      }
      const returnStrategy = (options == null ? void 0 : options.returnStrategy) || ((_d = this.actionsConfiguration) == null ? void 0 : _d.returnStrategy) || "back";
      const skipRedirectToWallet = (options == null ? void 0 : options.skipRedirectToWallet) || ((_e = this.actionsConfiguration) == null ? void 0 : _e.skipRedirectToWallet) || "ios";
      return {
        notifications: notifications2,
        modals,
        returnStrategy,
        skipRedirectToWallet
      };
    }
  }
  exports2.THEME = THEME;
  exports2.TonConnectUI = TonConnectUI;
  exports2.TonConnectUIError = TonConnectUIError;
  for (const k in sdk) {
    if (k !== "default" && !exports2.hasOwnProperty(k))
      Object.defineProperty(exports2, k, {
        enumerable: true,
        get: () => sdk[k]
      });
  }
  Object.defineProperties(exports2, { __esModule: { value: true }, [Symbol.toStringTag]: { value: "Module" } });
});
//# sourceMappingURL=index.umd.js.map
